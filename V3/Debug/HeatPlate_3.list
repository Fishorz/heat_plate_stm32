
HeatPlate_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004570  08004570  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004570  08004570  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000001c  08004594  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004594  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e47d  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a62  00000000  00000000  0002e505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c42  00000000  00000000  00031f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf0  00000000  00000000  00032b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143c4  00000000  00000000  0003587a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000904fd  00000000  00000000  00049c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040dc  00000000  00000000  000da13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000de218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080044b8 	.word	0x080044b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080044b8 	.word	0x080044b8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b1b      	ldr	r3, [pc, #108]	; (80001cc <MX_ADC1_Init+0x80>)
 800015e:	4a1c      	ldr	r2, [pc, #112]	; (80001d0 <MX_ADC1_Init+0x84>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b1a      	ldr	r3, [pc, #104]	; (80001cc <MX_ADC1_Init+0x80>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b18      	ldr	r3, [pc, #96]	; (80001cc <MX_ADC1_Init+0x80>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b17      	ldr	r3, [pc, #92]	; (80001cc <MX_ADC1_Init+0x80>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b15      	ldr	r3, [pc, #84]	; (80001cc <MX_ADC1_Init+0x80>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b13      	ldr	r3, [pc, #76]	; (80001cc <MX_ADC1_Init+0x80>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b12      	ldr	r3, [pc, #72]	; (80001cc <MX_ADC1_Init+0x80>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	4810      	ldr	r0, [pc, #64]	; (80001cc <MX_ADC1_Init+0x80>)
 800018a:	f000 ffef 	bl	800116c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fc96 	bl	8000ac4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80001a0:	2306      	movs	r3, #6
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <MX_ADC1_Init+0x80>)
 80001aa:	f001 f9b1 	bl	8001510 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fc86 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1, &adcValue, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	4906      	ldr	r1, [pc, #24]	; (80001d4 <MX_ADC1_Init+0x88>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <MX_ADC1_Init+0x80>)
 80001be:	f001 f8ad 	bl	800131c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	40012400 	.word	0x40012400
 80001d4:	20000038 	.word	0x20000038

080001d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a28      	ldr	r2, [pc, #160]	; (8000294 <HAL_ADC_MspInit+0xbc>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d149      	bne.n	800028c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a26      	ldr	r2, [pc, #152]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 80001fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b24      	ldr	r3, [pc, #144]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000210:	4b21      	ldr	r3, [pc, #132]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a20      	ldr	r2, [pc, #128]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b1e      	ldr	r3, [pc, #120]	; (8000298 <HAL_ADC_MspInit+0xc0>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0304 	and.w	r3, r3, #4
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000228:	2302      	movs	r3, #2
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800022c:	2303      	movs	r3, #3
 800022e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4819      	ldr	r0, [pc, #100]	; (800029c <HAL_ADC_MspInit+0xc4>)
 8000238:	f001 fe60 	bl	8001efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <HAL_ADC_MspInit+0xcc>)
 8000240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000244:	2200      	movs	r2, #0
 8000246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800025a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 800025e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000266:	2200      	movs	r2, #0
 8000268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 800026c:	2200      	movs	r2, #0
 800026e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000272:	f001 fc55 	bl	8001b20 <HAL_DMA_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800027c:	f000 fc22 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000284:	621a      	str	r2, [r3, #32]
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_ADC_MspInit+0xc8>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40012400 	.word	0x40012400
 8000298:	40021000 	.word	0x40021000
 800029c:	40010800 	.word	0x40010800
 80002a0:	2000006c 	.word	0x2000006c
 80002a4:	40020008 	.word	0x40020008

080002a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_DMA_Init+0x38>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <MX_DMA_Init+0x38>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_DMA_Init+0x38>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2100      	movs	r1, #0
 80002ca:	200b      	movs	r0, #11
 80002cc:	f001 fbf1 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002d0:	200b      	movs	r0, #11
 80002d2:	f001 fc0a 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <btnState>:
		encoder->encoderCounter--;
		break;
	}
}

int btnState(ENCODER_TypeDef *encoder) {
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

	int _return = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
	encoder->_btnState = ENCODER_Btn > 0;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <btnState+0x54>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
//	HAL_Delay(50);
	if (encoder->_btnState == 1 && encoder->_lastBtnState == 0) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d106      	bne.n	800031e <btnState+0x3a>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <btnState+0x3a>
		_return = 1;
 8000318:	2301      	movs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	e001      	b.n	8000322 <btnState+0x3e>
	} else {
		_return = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
	}
	encoder->_lastBtnState = encoder->_btnState;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	795a      	ldrb	r2, [r3, #5]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	711a      	strb	r2, [r3, #4]
	return (_return);
 800032a:	68fb      	ldr	r3, [r7, #12]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40010c00 	.word	0x40010c00

0800033c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a22      	ldr	r2, [pc, #136]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <MX_GPIO_Init+0xa4>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <MX_GPIO_Init+0xa4>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_GPIO_Init+0xa4>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <MX_GPIO_Init+0xa4>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_GPIO_Init+0xa4>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_Pin|encoderPinB_Pin|encoderPinA_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	21c1      	movs	r1, #193	; 0xc1
 800039c:	4811      	ldr	r0, [pc, #68]	; (80003e4 <MX_GPIO_Init+0xa8>)
 800039e:	f001 ff31 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|encoderPinB_Pin|encoderPinA_Pin;
 80003a2:	23c1      	movs	r3, #193	; 0xc1
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480a      	ldr	r0, [pc, #40]	; (80003e4 <MX_GPIO_Init+0xa8>)
 80003ba:	f001 fd9f 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoderBtn_Pin;
 80003be:	2320      	movs	r3, #32
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(encoderBtn_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0xa8>)
 80003d2:	f001 fd93 	bl	8001efc <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_I2C1_Init+0x50>)
 80003ee:	4a13      	ldr	r2, [pc, #76]	; (800043c <MX_I2C1_Init+0x54>)
 80003f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_I2C1_Init+0x50>)
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_I2C1_Init+0x58>)
 80003f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_I2C1_Init+0x50>)
 8000406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800040a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <MX_I2C1_Init+0x50>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_I2C1_Init+0x50>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_I2C1_Init+0x50>)
 8000426:	f001 ff1f 	bl	8002268 <HAL_I2C_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000430:	f000 fb48 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000b0 	.word	0x200000b0
 800043c:	40005400 	.word	0x40005400
 8000440:	000186a0 	.word	0x000186a0

08000444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <HAL_I2C_MspInit+0x90>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d132      	bne.n	80004ca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800047c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000482:	2312      	movs	r3, #18
 8000484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	4619      	mov	r1, r3
 8000490:	4812      	ldr	r0, [pc, #72]	; (80004dc <HAL_I2C_MspInit+0x98>)
 8000492:	f001 fd33 	bl	8001efc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_I2C_MspInit+0x9c>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	627b      	str	r3, [r7, #36]	; 0x24
 800049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
 80004a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
 80004ac:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <HAL_I2C_MspInit+0x9c>)
 80004ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 80004b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_I2C_MspInit+0x94>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004ca:	bf00      	nop
 80004cc:	3728      	adds	r7, #40	; 0x28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40005400 	.word	0x40005400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40010000 	.word	0x40010000

080004e4 <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 80004ee:	4a38      	ldr	r2, [pc, #224]	; (80005d0 <HD44780_Init+0xec>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 80004f4:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <HD44780_Init+0xf0>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004fa:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <HD44780_Init+0xf4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 8000500:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <HD44780_Init+0xec>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d907      	bls.n	8000518 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 8000508:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <HD44780_Init+0xf4>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <HD44780_Init+0xf4>)
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e006      	b.n	8000526 <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <HD44780_Init+0xf4>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <HD44780_Init+0xf4>)
 8000524:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 8000526:	f000 f9bf 	bl	80008a8 <DelayInit>
	HAL_Delay(50);
 800052a:	2032      	movs	r0, #50	; 0x32
 800052c:	f000 fdfa 	bl	8001124 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <HD44780_Init+0xf0>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f97d 	bl	8000834 <ExpanderWrite>
	HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f000 fdf1 	bl	8001124 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f000 f964 	bl	8000810 <Write4Bits>
	DelayUS(4500);
 8000548:	f241 1094 	movw	r0, #4500	; 0x1194
 800054c:	f000 f9d4 	bl	80008f8 <DelayUS>

	Write4Bits(0x03 << 4);
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f000 f95d 	bl	8000810 <Write4Bits>
	DelayUS(4500);
 8000556:	f241 1094 	movw	r0, #4500	; 0x1194
 800055a:	f000 f9cd 	bl	80008f8 <DelayUS>

	Write4Bits(0x03 << 4);
 800055e:	2030      	movs	r0, #48	; 0x30
 8000560:	f000 f956 	bl	8000810 <Write4Bits>
	DelayUS(4500);
 8000564:	f241 1094 	movw	r0, #4500	; 0x1194
 8000568:	f000 f9c6 	bl	80008f8 <DelayUS>

	Write4Bits(0x02 << 4);
 800056c:	2020      	movs	r0, #32
 800056e:	f000 f94f 	bl	8000810 <Write4Bits>
	DelayUS(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f000 f9c0 	bl	80008f8 <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HD44780_Init+0xf4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f907 	bl	8000796 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HD44780_Init+0xf8>)
 800058a:	2204      	movs	r2, #4
 800058c:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 800058e:	f000 f88b 	bl	80006a8 <HD44780_Display>
	HD44780_Clear();
 8000592:	f000 f82b 	bl	80005ec <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HD44780_Init+0xfc>)
 8000598:	2202      	movs	r2, #2
 800059a:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HD44780_Init+0xfc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8f5 	bl	8000796 <SendCommand>
	DelayUS(4500);
 80005ac:	f241 1094 	movw	r0, #4500	; 0x1194
 80005b0:	f000 f9a2 	bl	80008f8 <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 80005b4:	490b      	ldr	r1, [pc, #44]	; (80005e4 <HD44780_Init+0x100>)
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f8a2 	bl	8000700 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 80005bc:	490a      	ldr	r1, [pc, #40]	; (80005e8 <HD44780_Init+0x104>)
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f89e 	bl	8000700 <HD44780_CreateSpecialChar>

	HD44780_Home();
 80005c4:	f000 f81d 	bl	8000602 <HD44780_Home>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000107 	.word	0x20000107
 80005d4:	20000108 	.word	0x20000108
 80005d8:	20000104 	.word	0x20000104
 80005dc:	20000105 	.word	0x20000105
 80005e0:	20000106 	.word	0x20000106
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008

080005ec <HD44780_Clear>:

void HD44780_Clear() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 f8d0 	bl	8000796 <SendCommand>
	DelayUS(2000);
 80005f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005fa:	f000 f97d 	bl	80008f8 <DelayUS>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <HD44780_Home>:

void HD44780_Home() {
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 8000606:	2002      	movs	r0, #2
 8000608:	f000 f8c5 	bl	8000796 <SendCommand>
	DelayUS(2000);
 800060c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000610:	f000 f972 	bl	80008f8 <DelayUS>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HD44780_SetCursor+0x5c>)
 800062a:	f107 0408 	add.w	r4, r7, #8
 800062e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HD44780_SetCursor+0x60>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	429a      	cmp	r2, r3
 800063c:	d303      	bcc.n	8000646 <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HD44780_SetCursor+0x60>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	3318      	adds	r3, #24
 800064c:	443b      	add	r3, r7
 800064e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4413      	add	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	b25b      	sxtb	r3, r3
 800065c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f896 	bl	8000796 <SendCommand>
}
 800066a:	bf00      	nop
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	bf00      	nop
 8000674:	080044d0 	.word	0x080044d0
 8000678:	20000107 	.word	0x20000107

0800067c <HD44780_NoDisplay>:

void HD44780_NoDisplay() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_DISPLAYON;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HD44780_NoDisplay+0x28>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f023 0304 	bic.w	r3, r3, #4
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HD44780_NoDisplay+0x28>)
 800068c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HD44780_NoDisplay+0x28>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f87c 	bl	8000796 <SendCommand>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000105 	.word	0x20000105

080006a8 <HD44780_Display>:

void HD44780_Display() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HD44780_Display+0x28>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HD44780_Display+0x28>)
 80006b8:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HD44780_Display+0x28>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f866 	bl	8000796 <SendCommand>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000105 	.word	0x20000105

080006d4 <HD44780_Cursor>:
void HD44780_NoCursor() {
	dpControl &= ~LCD_CURSORON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	dpControl |= LCD_CURSORON;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HD44780_Cursor+0x28>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HD44780_Cursor+0x28>)
 80006e4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HD44780_Cursor+0x28>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f850 	bl	8000796 <SendCommand>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000105 	.word	0x20000105

08000700 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	b25b      	sxtb	r3, r3
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	b25b      	sxtb	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f837 	bl	8000796 <SendCommand>
	for (int i = 0; i < 8; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e009      	b.n	8000742 <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f83b 	bl	80007b2 <SendChar>
	for (int i = 0; i < 8; i++) {
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b07      	cmp	r3, #7
 8000746:	ddf2      	ble.n	800072e <HD44780_CreateSpecialChar+0x2e>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
	SendChar(index);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f827 	bl	80007b2 <SendChar>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	while (*c)
 8000774:	e006      	b.n	8000784 <HD44780_PrintStr+0x18>
		SendChar(*c++);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f817 	bl	80007b2 <SendChar>
	while (*c)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f4      	bne.n	8000776 <HD44780_PrintStr+0xa>
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <SendCommand>:
void HD44780_Backlight(void) {
	dpBacklight = LCD_BACKLIGHT;
	ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f812 	bl	80007ce <Send>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <SendChar>:

static void SendChar(uint8_t ch) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f804 	bl	80007ce <Send>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <Send>:

static void Send(uint8_t value, uint8_t mode) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	460a      	mov	r2, r1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	4613      	mov	r3, r2
 80007dc:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f023 030f 	bic.w	r3, r3, #15
 80007e4:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f80b 	bl	8000810 <Write4Bits>
	Write4Bits((lownib) | mode);
 80007fa:	7bba      	ldrb	r2, [r7, #14]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f804 	bl	8000810 <Write4Bits>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f809 	bl	8000834 <ExpanderWrite>
	PulseEnable(value);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f821 	bl	800086c <PulseEnable>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af02      	add	r7, sp, #8
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <ExpanderWrite+0x30>)
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4313      	orrs	r3, r2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 800084a:	f107 020f 	add.w	r2, r7, #15
 800084e:	230a      	movs	r3, #10
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	214e      	movs	r1, #78	; 0x4e
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <ExpanderWrite+0x34>)
 8000858:	f001 fe4a 	bl	80024f0 <HAL_I2C_Master_Transmit>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000108 	.word	0x20000108
 8000868:	200000b0 	.word	0x200000b0

0800086c <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE_LCD);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffd8 	bl	8000834 <ExpanderWrite>
	DelayUS(20);
 8000884:	2014      	movs	r0, #20
 8000886:	f000 f837 	bl	80008f8 <DelayUS>

	ExpanderWrite(_data & ~ENABLE_LCD);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f023 0304 	bic.w	r3, r3, #4
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffce 	bl	8000834 <ExpanderWrite>
	DelayUS(20);
 8000898:	2014      	movs	r0, #20
 800089a:	f000 f82d 	bl	80008f8 <DelayUS>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <DelayInit>:

static void DelayInit(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <DelayInit+0x48>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <DelayInit+0x48>)
 80008b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008b6:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <DelayInit+0x48>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <DelayInit+0x48>)
 80008be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <DelayInit+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <DelayInit+0x4c>)
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <DelayInit+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <DelayInit+0x4c>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <DelayInit+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80008e2:	bf00      	nop
	__ASM volatile ("NOP");
 80008e4:	bf00      	nop
	__ASM volatile ("NOP");
 80008e6:	bf00      	nop
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	e000edf0 	.word	0xe000edf0
 80008f4:	e0001000 	.word	0xe0001000

080008f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <DelayUS+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <DelayUS+0x44>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9a      	lsrs	r2, r3, #18
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <DelayUS+0x48>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <DelayUS+0x48>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f6      	bhi.n	800091a <DelayUS+0x22>
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	371c      	adds	r7, #28
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000010 	.word	0x20000010
 800093c:	431bde83 	.word	0x431bde83
 8000940:	e0001000 	.word	0xe0001000

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 fb8a 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f82e 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff fcf4 	bl	800033c <MX_GPIO_Init>
  MX_DMA_Init();
 8000954:	f7ff fca8 	bl	80002a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000958:	f7ff fbf8 	bl	800014c <MX_ADC1_Init>
  MX_TIM2_Init();
 800095c:	f000 fa36 	bl	8000dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000960:	f000 fa80 	bl	8000e64 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000964:	f7ff fd40 	bl	80003e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <main+0x58>)
 800096a:	f002 fe1b 	bl	80035a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <main+0x5c>)
 8000970:	f002 fe18 	bl	80035a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <main+0x5c>)
 8000978:	f002 feb6 	bl	80036e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800097c:	2104      	movs	r1, #4
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <main+0x5c>)
 8000980:	f002 feb2 	bl	80036e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	meunInit(&meun, 150);
 8000984:	2196      	movs	r1, #150	; 0x96
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <main+0x60>)
 8000988:	f000 f8a1 	bl	8000ace <meunInit>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		displayMeunHandler(&meun);
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <main+0x60>)
 800098e:	f000 f95d 	bl	8000c4c <displayMeunHandler>
		selectMeunHandler(&meun,&encoder);
 8000992:	4905      	ldr	r1, [pc, #20]	; (80009a8 <main+0x64>)
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <main+0x60>)
 8000996:	f000 f981 	bl	8000c9c <selectMeunHandler>
		displayMeunHandler(&meun);
 800099a:	e7f7      	b.n	800098c <main+0x48>
 800099c:	20000130 	.word	0x20000130
 80009a0:	20000178 	.word	0x20000178
 80009a4:	20000110 	.word	0x20000110
 80009a8:	20000128 	.word	0x20000128

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	2228      	movs	r2, #40	; 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fd50 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 f8cc 	bl	8002ba0 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a0e:	f000 f859 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fb38 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a3a:	f000 f843 	bl	8000ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a46:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fca4 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a56:	f000 f835 	bl	8000ac4 <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3750      	adds	r7, #80	; 0x50
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) { //50ms per tick
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a74:	d10b      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x2a>
		counter = counter > 500? 1 : counter + 1;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a7e:	d803      	bhi.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x24>
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	e000      	b.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x26>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a8c:	6013      	str	r3, [r2, #0]
	}
	if (counter % 50 == 0){
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a94:	fba3 1302 	umull	r1, r3, r3, r2
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	2132      	movs	r1, #50	; 0x32
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x4a>
		HAL_GPIO_TogglePin(GPIOB, SIGNAL_Pin);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000aaa:	f001 fbc3 	bl	8002234 <HAL_GPIO_TogglePin>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000010c 	.word	0x2000010c
 8000abc:	51eb851f 	.word	0x51eb851f
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>

08000ace <meunInit>:
#include <meun.h>
#include "encoder.h"

extern uint16_t counter;

void meunInit(MEUN_TypeDef *meun, int defaultTemp) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	meun->meunNeedUpdate = 1;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
	meun->nowTemp = 0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
	meun->targetTemp = defaultTemp;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	811a      	strh	r2, [r3, #8]
	HD44780_Init(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fcf9 	bl	80004e4 <HD44780_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <startScreeen>:

/*-------------------------public function------------------------------------*/

/*-------------------------pv function----------------------------------------*/
void startScreeen(MEUN_TypeDef *meun) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	HD44780_NoDisplay();
 8000b04:	f7ff fdba 	bl	800067c <HD44780_NoDisplay>
	HD44780_Cursor();
 8000b08:	f7ff fde4 	bl	80006d4 <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fd82 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO STM32!!!");
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <startScreeen+0x2c>)
 8000b16:	f7ff fe29 	bl	800076c <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe19 	bl	8000752 <HD44780_PrintSpecialChar>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	080044e0 	.word	0x080044e0

08000b2c <standby_page>:

void standby_page(MEUN_TypeDef *meun) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	char displayNowTemp[10];
	char displayTargetTemp[10];
	itoa(meun->nowTemp, displayNowTemp, 10);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	220a      	movs	r2, #10
 8000b40:	4619      	mov	r1, r3
 8000b42:	f003 fc49 	bl	80043d8 <itoa>
	itoa(meun->targetTemp, displayTargetTemp, 10);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	891b      	ldrh	r3, [r3, #8]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	220a      	movs	r2, #10
 8000b52:	4619      	mov	r1, r3
 8000b54:	f003 fc40 	bl	80043d8 <itoa>
	HD44780_SetCursor(1, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fd5c 	bl	8000618 <HD44780_SetCursor>
//	HD44780_PrintStr("-xxxxxxxxxxxxxx<");
	HD44780_PrintStr("Standby        ");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <standby_page+0x84>)
 8000b62:	f7ff fe03 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(1, 1);
 8000b66:	2101      	movs	r1, #1
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fd55 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr("N_T:");
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <standby_page+0x88>)
 8000b70:	f7ff fdfc 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 8000b74:	2101      	movs	r1, #1
 8000b76:	2006      	movs	r0, #6
 8000b78:	f7ff fd4e 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr(displayNowTemp);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fdf3 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f7ff fd45 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr("S_T:");
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <standby_page+0x8c>)
 8000b90:	f7ff fdec 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(14, 1);
 8000b94:	2101      	movs	r1, #1
 8000b96:	200e      	movs	r0, #14
 8000b98:	f7ff fd3e 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr(displayTargetTemp);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fde3 	bl	800076c <HD44780_PrintStr>
}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	080044f0 	.word	0x080044f0
 8000bb4:	08004500 	.word	0x08004500
 8000bb8:	08004508 	.word	0x08004508

08000bbc <heating_page>:

void heating_page(MEUN_TypeDef *meun) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	char displayNowTemp[10];
	char displayTargetTemp[10];
	itoa(meun->nowTemp, displayNowTemp, 10);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	220a      	movs	r2, #10
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f003 fc01 	bl	80043d8 <itoa>
	itoa(meun->targetTemp, displayTargetTemp, 10);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	891b      	ldrh	r3, [r3, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	220a      	movs	r2, #10
 8000be2:	4619      	mov	r1, r3
 8000be4:	f003 fbf8 	bl	80043d8 <itoa>
	HD44780_SetCursor(1, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fd14 	bl	8000618 <HD44780_SetCursor>
//	HD44780_PrintStr("-xxxxxxxxxxxxxx<");
	HD44780_PrintStr("Heating        ");
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <heating_page+0x84>)
 8000bf2:	f7ff fdbb 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(1, 1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fd0d 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr("N_T:");
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <heating_page+0x88>)
 8000c00:	f7ff fdb4 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 8000c04:	2101      	movs	r1, #1
 8000c06:	2006      	movs	r0, #6
 8000c08:	f7ff fd06 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr(displayNowTemp);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fdab 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f7ff fcfd 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr("S_T:");
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <heating_page+0x8c>)
 8000c20:	f7ff fda4 	bl	800076c <HD44780_PrintStr>
	HD44780_SetCursor(14, 1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	200e      	movs	r0, #14
 8000c28:	f7ff fcf6 	bl	8000618 <HD44780_SetCursor>
	HD44780_PrintStr(displayTargetTemp);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd9b 	bl	800076c <HD44780_PrintStr>
}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08004510 	.word	0x08004510
 8000c44:	08004500 	.word	0x08004500
 8000c48:	08004508 	.word	0x08004508

08000c4c <displayMeunHandler>:

//To control what should displaying
void displayMeunHandler(MEUN_TypeDef *meun) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	//*_*hard code update state to Ldisplay something

	if (meun->meunNeedUpdate) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01c      	beq.n	8000c96 <displayMeunHandler+0x4a>
		meun->meunNeedUpdate = 1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		HD44780_Clear();
 8000c62:	f7ff fcc3 	bl	80005ec <HD44780_Clear>
		switch (meun->meunIndex) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7d1b      	ldrb	r3, [r3, #20]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d00e      	beq.n	8000c8c <displayMeunHandler+0x40>
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	dc10      	bgt.n	8000c94 <displayMeunHandler+0x48>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <displayMeunHandler+0x30>
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d004      	beq.n	8000c84 <displayMeunHandler+0x38>
			break;
		case Heating:
			heating_page(meun);
			break;
		default:
			return;
 8000c7a:	e00b      	b.n	8000c94 <displayMeunHandler+0x48>
			startScreeen(meun);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff3d 	bl	8000afc <startScreeen>
			break;
 8000c82:	e008      	b.n	8000c96 <displayMeunHandler+0x4a>
			standby_page(meun);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff51 	bl	8000b2c <standby_page>
			break;
 8000c8a:	e004      	b.n	8000c96 <displayMeunHandler+0x4a>
			heating_page(meun);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff95 	bl	8000bbc <heating_page>
			break;
 8000c92:	e000      	b.n	8000c96 <displayMeunHandler+0x4a>
			return;
 8000c94:	bf00      	nop
		}
	}
}
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <selectMeunHandler>:

void selectMeunHandler(MEUN_TypeDef *meun, ENCODER_TypeDef *encoder) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	/*
	 * Standby
	 * Start Heating
	 */
	//which meun selected
	if (btnState(encoder)) {
 8000ca6:	6838      	ldr	r0, [r7, #0]
 8000ca8:	f7ff fb1c 	bl	80002e4 <btnState>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d014      	beq.n	8000cdc <selectMeunHandler+0x40>
		switch (meun->meunIndex) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7d1b      	ldrb	r3, [r3, #20]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d002      	beq.n	8000cc0 <selectMeunHandler+0x24>
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d007      	beq.n	8000cce <selectMeunHandler+0x32>
		case (Heating):
			meun->meunIndex = Standby;
			meun->meunNeedUpdate = 1;
			break;
		default:
			break;
 8000cbe:	e00d      	b.n	8000cdc <selectMeunHandler+0x40>
			meun->meunIndex = Heating;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	751a      	strb	r2, [r3, #20]
			meun->meunNeedUpdate = 1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
			break;
 8000ccc:	e006      	b.n	8000cdc <selectMeunHandler+0x40>
			meun->meunIndex = Standby;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	751a      	strb	r2, [r3, #20]
			meun->meunNeedUpdate = 1;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
			break;
 8000cda:	bf00      	nop
		}
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MspInit+0x60>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_MspInit+0x60>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f9ad 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Channel1_IRQHandler+0x10>)
 8000d9e:	f000 ff79 	bl	8001c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000006c 	.word	0x2000006c

08000dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM2_IRQHandler+0x10>)
 8000db2:	f002 fd3b 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000130 	.word	0x20000130

08000dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000df2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000df6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e00:	22c8      	movs	r2, #200	; 0xc8
 8000e02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e10:	4813      	ldr	r0, [pc, #76]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e12:	f002 fb77 	bl	8003504 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e1c:	f7ff fe52 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e2e:	f002 feaf 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e38:	f7ff fe44 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM2_Init+0x94>)
 8000e4a:	f003 fa3d 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e54:	f7ff fe36 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000130 	.word	0x20000130

08000e64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <MX_TIM3_Init+0xc4>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eac:	481d      	ldr	r0, [pc, #116]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000eae:	f002 fbcb 	bl	8003648 <HAL_TIM_PWM_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f7ff fe04 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000ecc:	f003 f9fc 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ed6:	f7ff fdf5 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eda:	2360      	movs	r3, #96	; 0x60
 8000edc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000ef2:	f002 fd8b 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000efc:	f7ff fde2 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2204      	movs	r2, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000f08:	f002 fd80 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f12:	f7ff fdd7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <MX_TIM3_Init+0xc0>)
 8000f18:	f000 f84a 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000178 	.word	0x20000178
 8000f28:	40000400 	.word	0x40000400

08000f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3c:	d113      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f000 fda9 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 fdc2 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_TIM_PWM_MspInit+0x34>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10b      	bne.n	8000f9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_PWM_MspInit+0x38>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_TIM_PWM_MspInit+0x38>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_TIM_PWM_MspInit+0x38>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40000400 	.word	0x40000400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_TIM_MspPostInit+0x58>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d117      	bne.n	8001000 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_TIM_MspPostInit+0x5c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_TIM_MspPostInit+0x5c>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_MspPostInit+0x5c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = FAN_Pin|HEATER_Pin;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_TIM_MspPostInit+0x60>)
 8000ffc:	f000 ff7e 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40000400 	.word	0x40000400
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fed4 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101a:	490c      	ldr	r1, [pc, #48]	; (800104c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001030:	4c09      	ldr	r4, [pc, #36]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 fa17 	bl	8004470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fc7f 	bl	8000944 <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001050:	08004578 	.word	0x08004578
  ldr r2, =_sbss
 8001054:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001058:	200001c4 	.word	0x200001c4

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fd13 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe32 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd2b 	bl	8001b06 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 fcf3 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000018 	.word	0x20000018
 80010e8:	20000014 	.word	0x20000014

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000018 	.word	0x20000018
 800110c:	200001c0 	.word	0x200001c0

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	200001c0 	.word	0x200001c0

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000018 	.word	0x20000018

0800116c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0be      	b.n	800130c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f814 	bl	80001d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 faff 	bl	80017b4 <ADC_ConversionStop_Disable>
 80011b6:	4603      	mov	r3, r0
 80011b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 8099 	bne.w	80012fa <HAL_ADC_Init+0x18e>
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 8095 	bne.w	80012fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d8:	f023 0302 	bic.w	r3, r3, #2
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b1b      	ldrb	r3, [r3, #12]
 80011f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001204:	d003      	beq.n	800120e <HAL_ADC_Init+0xa2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <HAL_ADC_Init+0xa8>
 800120e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001212:	e000      	b.n	8001216 <HAL_ADC_Init+0xaa>
 8001214:	2300      	movs	r3, #0
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d119      	bne.n	8001258 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7b1b      	ldrb	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	3b01      	subs	r3, #1
 8001232:	035a      	lsls	r2, r3, #13
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	e00b      	b.n	8001258 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_ADC_Init+0x1a8>)
 8001274:	4013      	ands	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	430b      	orrs	r3, r1
 800127e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d003      	beq.n	8001292 <HAL_ADC_Init+0x126>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d104      	bne.n	800129c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	3b01      	subs	r3, #1
 8001298:	051b      	lsls	r3, r3, #20
 800129a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_ADC_Init+0x1ac>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d10b      	bne.n	80012d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d6:	e018      	b.n	800130a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	f023 0312 	bic.w	r3, r3, #18
 80012e0:	f043 0210 	orr.w	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f8:	e007      	b.n	800130a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800130a:	7dfb      	ldrb	r3, [r7, #23]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	ffe1f7fd 	.word	0xffe1f7fd
 8001318:	ff1f0efe 	.word	0xff1f0efe

0800131c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Start_DMA+0x24>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <HAL_ADC_Start_DMA+0x1ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d106      	bne.n	800134e <HAL_ADC_Start_DMA+0x32>
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 80b3 	bne.w	80014b4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ADC_Start_DMA+0x40>
 8001358:	2302      	movs	r3, #2
 800135a:	e0ae      	b.n	80014ba <HAL_ADC_Start_DMA+0x19e>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f9cb 	bl	8001700 <ADC_Enable>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 809a 	bne.w	80014aa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_Start_DMA+0x84>
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d115      	bne.n	80013cc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d026      	beq.n	8001408 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ca:	e01d      	b.n	8001408 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <HAL_ADC_Start_DMA+0x1a8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d004      	beq.n	80013ec <HAL_ADC_Start_DMA+0xd0>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <HAL_ADC_Start_DMA+0x1ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10d      	bne.n	8001408 <HAL_ADC_Start_DMA+0xec>
 80013ec:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <HAL_ADC_Start_DMA+0x1a8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	f023 0206 	bic.w	r2, r3, #6
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001420:	e002      	b.n	8001428 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <HAL_ADC_Start_DMA+0x1b0>)
 8001436:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <HAL_ADC_Start_DMA+0x1b4>)
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_ADC_Start_DMA+0x1b8>)
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0202 	mvn.w	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001460:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a18      	ldr	r0, [r3, #32]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	334c      	adds	r3, #76	; 0x4c
 800146c:	4619      	mov	r1, r3
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f000 fbaf 	bl	8001bd4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001480:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001484:	d108      	bne.n	8001498 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001494:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001496:	e00f      	b.n	80014b8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014a6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014a8:	e006      	b.n	80014b8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80014b2:	e001      	b.n	80014b8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40012800 	.word	0x40012800
 80014cc:	08001837 	.word	0x08001837
 80014d0:	080018b3 	.word	0x080018b3
 80014d4:	080018cf 	.word	0x080018cf

080014d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x20>
 800152c:	2302      	movs	r3, #2
 800152e:	e0dc      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1da>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b06      	cmp	r3, #6
 800153e:	d81c      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b05      	subs	r3, #5
 8001552:	221f      	movs	r2, #31
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
 8001578:	e03c      	b.n	80015f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d81c      	bhi.n	80015bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b23      	subs	r3, #35	; 0x23
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	4019      	ands	r1, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b23      	subs	r3, #35	; 0x23
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ba:	e01b      	b.n	80015f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b41      	subs	r3, #65	; 0x41
 80015ce:	221f      	movs	r2, #31
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4019      	ands	r1, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b41      	subs	r3, #65	; 0x41
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b09      	cmp	r3, #9
 80015fa:	d91c      	bls.n	8001636 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68d9      	ldr	r1, [r3, #12]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	3b1e      	subs	r3, #30
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	4019      	ands	r1, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	3b1e      	subs	r3, #30
 8001628:	fa00 f203 	lsl.w	r2, r0, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	e019      	b.n	800166a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6919      	ldr	r1, [r3, #16]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	2207      	movs	r2, #7
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	4019      	ands	r1, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6898      	ldr	r0, [r3, #8]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001676:	2b11      	cmp	r3, #17
 8001678:	d132      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d125      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d126      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b10      	cmp	r3, #16
 80016a8:	d11a      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <HAL_ADC_ConfigChannel+0x1ec>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	0c9a      	lsrs	r2, r3, #18
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x1b2>
 80016ce:	e007      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f043 0220 	orr.w	r2, r3, #32
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	40012400 	.word	0x40012400
 80016f8:	20000010 	.word	0x20000010
 80016fc:	431bde83 	.word	0x431bde83

08001700 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d040      	beq.n	80017a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <ADC_Enable+0xac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <ADC_Enable+0xb0>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800173c:	e002      	b.n	8001744 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3b01      	subs	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800174a:	f7ff fce1 	bl	8001110 <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001750:	e01f      	b.n	8001792 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001752:	f7ff fcdd 	bl	8001110 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d918      	bls.n	8001792 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d011      	beq.n	8001792 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e007      	b.n	80017a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d1d8      	bne.n	8001752 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000010 	.word	0x20000010
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d12e      	bne.n	800182c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017de:	f7ff fc97 	bl	8001110 <HAL_GetTick>
 80017e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017e4:	e01b      	b.n	800181e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017e6:	f7ff fc93 	bl	8001110 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d914      	bls.n	800181e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10d      	bne.n	800181e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e007      	b.n	800182e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d0dc      	beq.n	80017e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800184c:	2b00      	cmp	r3, #0
 800184e:	d127      	bne.n	80018a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001866:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800186a:	d115      	bne.n	8001898 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff fe1d 	bl	80014d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800189e:	e004      	b.n	80018aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fe12 	bl	80014ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	f043 0204 	orr.w	r2, r3, #4
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fe01 	bl	80014fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4906      	ldr	r1, [pc, #24]	; (800199c <__NVIC_EnableIRQ+0x34>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2d 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff42 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff35 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e043      	b.n	8001bbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0xa8>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_DMA_Init+0xac>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	009a      	lsls	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_DMA_Init+0xb0>)
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	bffdfff8 	.word	0xbffdfff8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Start_IT+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e04b      	b.n	8001c8c <HAL_DMA_Start_IT+0xb8>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d13a      	bne.n	8001c7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f937 	bl	8001ea0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 020e 	orr.w	r2, r2, #14
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e00f      	b.n	8001c6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0204 	bic.w	r2, r2, #4
 8001c5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 020a 	orr.w	r2, r2, #10
 8001c6a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e005      	b.n	8001c8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
 8001c88:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d04f      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xc8>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04a      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a66      	ldr	r2, [pc, #408]	; (8001e84 <HAL_DMA_IRQHandler+0x1f0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d029      	beq.n	8001d42 <HAL_DMA_IRQHandler+0xae>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <HAL_DMA_IRQHandler+0x1f4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xaa>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <HAL_DMA_IRQHandler+0x1f8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xa4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a62      	ldr	r2, [pc, #392]	; (8001e90 <HAL_DMA_IRQHandler+0x1fc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d012      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x9e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_DMA_IRQHandler+0x200>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00a      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x98>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5f      	ldr	r2, [pc, #380]	; (8001e98 <HAL_DMA_IRQHandler+0x204>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d102      	bne.n	8001d26 <HAL_DMA_IRQHandler+0x92>
 8001d20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d24:	e00e      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d2a:	e00b      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d30:	e008      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d36:	e005      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3c:	e002      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	e000      	b.n	8001d44 <HAL_DMA_IRQHandler+0xb0>
 8001d42:	2304      	movs	r3, #4
 8001d44:	4a55      	ldr	r2, [pc, #340]	; (8001e9c <HAL_DMA_IRQHandler+0x208>)
 8001d46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8094 	beq.w	8001e7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	e08e      	b.n	8001e7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2202      	movs	r2, #2
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d056      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x186>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d051      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020a 	bic.w	r2, r2, #10
 8001d92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <HAL_DMA_IRQHandler+0x1f0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d029      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x166>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <HAL_DMA_IRQHandler+0x1f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x162>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a35      	ldr	r2, [pc, #212]	; (8001e8c <HAL_DMA_IRQHandler+0x1f8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x15c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_DMA_IRQHandler+0x1fc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d012      	beq.n	8001dea <HAL_DMA_IRQHandler+0x156>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_DMA_IRQHandler+0x200>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x150>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_DMA_IRQHandler+0x204>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d102      	bne.n	8001dde <HAL_DMA_IRQHandler+0x14a>
 8001dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ddc:	e00e      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de2:	e00b      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de8:	e008      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dee:	e005      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	e002      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001df6:	2320      	movs	r3, #32
 8001df8:	e000      	b.n	8001dfc <HAL_DMA_IRQHandler+0x168>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_DMA_IRQHandler+0x208>)
 8001dfe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d034      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e18:	e02f      	b.n	8001e7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2208      	movs	r2, #8
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d028      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x1e8>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020e 	bic.w	r2, r2, #14
 8001e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
    }
  }
  return;
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
}
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40020008 	.word	0x40020008
 8001e88:	4002001c 	.word	0x4002001c
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	40020044 	.word	0x40020044
 8001e94:	40020058 	.word	0x40020058
 8001e98:	4002006c 	.word	0x4002006c
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d108      	bne.n	8001ee0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ede:	e007      	b.n	8001ef0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b08b      	sub	sp, #44	; 0x2c
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0e:	e169      	b.n	80021e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f10:	2201      	movs	r2, #1
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 8158 	bne.w	80021de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a9a      	ldr	r2, [pc, #616]	; (800219c <HAL_GPIO_Init+0x2a0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d05e      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a98      	ldr	r2, [pc, #608]	; (800219c <HAL_GPIO_Init+0x2a0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d875      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f3e:	4a98      	ldr	r2, [pc, #608]	; (80021a0 <HAL_GPIO_Init+0x2a4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d058      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f44:	4a96      	ldr	r2, [pc, #600]	; (80021a0 <HAL_GPIO_Init+0x2a4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d86f      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f4a:	4a96      	ldr	r2, [pc, #600]	; (80021a4 <HAL_GPIO_Init+0x2a8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d052      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f50:	4a94      	ldr	r2, [pc, #592]	; (80021a4 <HAL_GPIO_Init+0x2a8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d869      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f56:	4a94      	ldr	r2, [pc, #592]	; (80021a8 <HAL_GPIO_Init+0x2ac>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d04c      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a92      	ldr	r2, [pc, #584]	; (80021a8 <HAL_GPIO_Init+0x2ac>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d863      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f62:	4a92      	ldr	r2, [pc, #584]	; (80021ac <HAL_GPIO_Init+0x2b0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d046      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f68:	4a90      	ldr	r2, [pc, #576]	; (80021ac <HAL_GPIO_Init+0x2b0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d85d      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d82a      	bhi.n	8001fc8 <HAL_GPIO_Init+0xcc>
 8001f72:	2b12      	cmp	r3, #18
 8001f74:	d859      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <HAL_GPIO_Init+0x80>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001fd1 	.word	0x08001fd1
 8001f84:	08001fe3 	.word	0x08001fe3
 8001f88:	08002025 	.word	0x08002025
 8001f8c:	0800202b 	.word	0x0800202b
 8001f90:	0800202b 	.word	0x0800202b
 8001f94:	0800202b 	.word	0x0800202b
 8001f98:	0800202b 	.word	0x0800202b
 8001f9c:	0800202b 	.word	0x0800202b
 8001fa0:	0800202b 	.word	0x0800202b
 8001fa4:	0800202b 	.word	0x0800202b
 8001fa8:	0800202b 	.word	0x0800202b
 8001fac:	0800202b 	.word	0x0800202b
 8001fb0:	0800202b 	.word	0x0800202b
 8001fb4:	0800202b 	.word	0x0800202b
 8001fb8:	0800202b 	.word	0x0800202b
 8001fbc:	0800202b 	.word	0x0800202b
 8001fc0:	08001fd9 	.word	0x08001fd9
 8001fc4:	08001fed 	.word	0x08001fed
 8001fc8:	4a79      	ldr	r2, [pc, #484]	; (80021b0 <HAL_GPIO_Init+0x2b4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fce:	e02c      	b.n	800202a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e029      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e024      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e01f      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e01a      	b.n	800202c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ffe:	2304      	movs	r3, #4
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e013      	b.n	800202c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800200c:	2308      	movs	r3, #8
 800200e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	611a      	str	r2, [r3, #16]
          break;
 8002016:	e009      	b.n	800202c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	615a      	str	r2, [r3, #20]
          break;
 8002022:	e003      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x130>
          break;
 800202a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2bff      	cmp	r3, #255	; 0xff
 8002030:	d801      	bhi.n	8002036 <HAL_GPIO_Init+0x13a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	e001      	b.n	800203a <HAL_GPIO_Init+0x13e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d802      	bhi.n	8002048 <HAL_GPIO_Init+0x14c>
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x152>
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	3b08      	subs	r3, #8
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	210f      	movs	r1, #15
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80b1 	beq.w	80021de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_GPIO_Init+0x2bc>)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <HAL_GPIO_Init+0x2c0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_GPIO_Init+0x1ec>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_GPIO_Init+0x2c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_GPIO_Init+0x1e8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_GPIO_Init+0x2c8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x1e4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <HAL_GPIO_Init+0x2cc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_GPIO_Init+0x1e0>
 80020d8:	2303      	movs	r3, #3
 80020da:	e006      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020dc:	2304      	movs	r3, #4
 80020de:	e004      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e8:	2300      	movs	r3, #0
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	f002 0203 	and.w	r2, r2, #3
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020fa:	492f      	ldr	r1, [pc, #188]	; (80021b8 <HAL_GPIO_Init+0x2bc>)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	492c      	ldr	r1, [pc, #176]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4928      	ldr	r1, [pc, #160]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800212c:	4013      	ands	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	491e      	ldr	r1, [pc, #120]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002154:	4013      	ands	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4918      	ldr	r1, [pc, #96]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4914      	ldr	r1, [pc, #80]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d021      	beq.n	80021d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e021      	b.n	80021de <HAL_GPIO_Init+0x2e2>
 800219a:	bf00      	nop
 800219c:	10320000 	.word	0x10320000
 80021a0:	10310000 	.word	0x10310000
 80021a4:	10220000 	.word	0x10220000
 80021a8:	10210000 	.word	0x10210000
 80021ac:	10120000 	.word	0x10120000
 80021b0:	10110000 	.word	0x10110000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40010800 	.word	0x40010800
 80021c0:	40010c00 	.word	0x40010c00
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40011400 	.word	0x40011400
 80021cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_GPIO_Init+0x304>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4909      	ldr	r1, [pc, #36]	; (8002200 <HAL_GPIO_Init+0x304>)
 80021da:	4013      	ands	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f47f ae8e 	bne.w	8001f10 <HAL_GPIO_Init+0x14>
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	372c      	adds	r7, #44	; 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43d9      	mvns	r1, r3
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	400b      	ands	r3, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	611a      	str	r2, [r3, #16]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e12b      	b.n	80024d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f8d8 	bl	8000444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022cc:	f001 f832 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 80022d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a81      	ldr	r2, [pc, #516]	; (80024dc <HAL_I2C_Init+0x274>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d807      	bhi.n	80022ec <HAL_I2C_Init+0x84>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a80      	ldr	r2, [pc, #512]	; (80024e0 <HAL_I2C_Init+0x278>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e006      	b.n	80022fa <HAL_I2C_Init+0x92>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a7d      	ldr	r2, [pc, #500]	; (80024e4 <HAL_I2C_Init+0x27c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bf94      	ite	ls
 80022f4:	2301      	movls	r3, #1
 80022f6:	2300      	movhi	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0e7      	b.n	80024d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a78      	ldr	r2, [pc, #480]	; (80024e8 <HAL_I2C_Init+0x280>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0c9b      	lsrs	r3, r3, #18
 800230c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_I2C_Init+0x274>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d802      	bhi.n	800233c <HAL_I2C_Init+0xd4>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	e009      	b.n	8002350 <HAL_I2C_Init+0xe8>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_I2C_Init+0x284>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	3301      	adds	r3, #1
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	495c      	ldr	r1, [pc, #368]	; (80024dc <HAL_I2C_Init+0x274>)
 800236c:	428b      	cmp	r3, r1
 800236e:	d819      	bhi.n	80023a4 <HAL_I2C_Init+0x13c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e59      	subs	r1, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fbb1 f3f3 	udiv	r3, r1, r3
 800237e:	1c59      	adds	r1, r3, #1
 8002380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002384:	400b      	ands	r3, r1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_I2C_Init+0x138>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e59      	subs	r1, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fbb1 f3f3 	udiv	r3, r1, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239e:	e051      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e04f      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_I2C_Init+0x168>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e012      	b.n	80023f6 <HAL_I2C_Init+0x18e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Init+0x196>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e022      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10e      	bne.n	8002424 <HAL_I2C_Init+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e58      	subs	r0, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	440b      	add	r3, r1
 8002414:	fbb0 f3f3 	udiv	r3, r0, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e58      	subs	r0, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	6809      	ldr	r1, [r1, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6911      	ldr	r1, [r2, #16]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	000186a0 	.word	0x000186a0
 80024e0:	001e847f 	.word	0x001e847f
 80024e4:	003d08ff 	.word	0x003d08ff
 80024e8:	431bde83 	.word	0x431bde83
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	460b      	mov	r3, r1
 80024fe:	817b      	strh	r3, [r7, #10]
 8002500:	4613      	mov	r3, r2
 8002502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7fe fe04 	bl	8001110 <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 80e0 	bne.w	80026d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	4970      	ldr	r1, [pc, #448]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f964 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	e0d3      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x50>
 800253c:	2302      	movs	r3, #2
 800253e:	e0cc      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d007      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a8:	8979      	ldrh	r1, [r7, #10]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f89c 	bl	80026ec <I2C_MasterRequestWrite>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e08d      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d4:	e066      	b.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa22 	bl	8002a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d107      	bne.n	80025fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x188>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d017      	beq.n	8002678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6a39      	ldr	r1, [r7, #32]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fa19 	bl	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b04      	cmp	r3, #4
 800268e:	d107      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e01a      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d194      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00100002 	.word	0x00100002
 80026e8:	ffff0000 	.word	0xffff0000

080026ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d006      	beq.n	8002716 <I2C_MasterRequestWrite+0x2a>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d003      	beq.n	8002716 <I2C_MasterRequestWrite+0x2a>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002714:	d108      	bne.n	8002728 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e00b      	b.n	8002740 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	2b12      	cmp	r3, #18
 800272e:	d107      	bne.n	8002740 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f84f 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d103      	bne.n	8002770 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e035      	b.n	80027e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277c:	d108      	bne.n	8002790 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	e01b      	b.n	80027c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002790:	897b      	ldrh	r3, [r7, #10]
 8002792:	11db      	asrs	r3, r3, #7
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 0306 	and.w	r3, r3, #6
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f063 030f 	orn	r3, r3, #15
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	490e      	ldr	r1, [pc, #56]	; (80027e8 <I2C_MasterRequestWrite+0xfc>)
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f898 	bl	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e010      	b.n	80027e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <I2C_MasterRequestWrite+0x100>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f888 	bl	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	00010008 	.word	0x00010008
 80027ec:	00010002 	.word	0x00010002

080027f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	e048      	b.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d044      	beq.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280a:	f7fe fc81 	bl	8001110 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d139      	bne.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x56>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	43da      	mvns	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	e00c      	b.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	429a      	cmp	r2, r3
 8002864:	d116      	bne.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e023      	b.n	80028dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10d      	bne.n	80028ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	e00c      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d093      	beq.n	8002802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f2:	e071      	b.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d123      	bne.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800291c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e067      	b.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d041      	beq.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002954:	f7fe fbdc 	bl	8001110 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d302      	bcc.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d136      	bne.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10c      	bne.n	800298e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e00b      	b.n	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	43da      	mvns	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e021      	b.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10c      	bne.n	80029fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e00b      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f af6d 	bne.w	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a30:	e034      	b.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f886 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e034      	b.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d028      	beq.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7fe fb61 	bl	8001110 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11d      	bne.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d016      	beq.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d1c3      	bne.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac0:	e034      	b.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f83e 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e034      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d028      	beq.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7fe fb19 	bl	8001110 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11d      	bne.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d016      	beq.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d1c3      	bne.n	8002ac2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d11b      	bne.n	8002b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e272      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc0:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5e>
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x12c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e24c      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x76>
 8002c08:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7f      	ldr	r2, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xbc>
 8002c42:	4b72      	ldr	r3, [pc, #456]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a71      	ldr	r2, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c5c:	4b6b      	ldr	r3, [pc, #428]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6a      	ldr	r2, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa48 	bl	8001110 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fa44 	bl	8001110 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e200      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe4>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa34 	bl	8001110 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fa30 	bl	8001110 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1ec      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x10c>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x18c>
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x176>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1c0      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4939      	ldr	r1, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e03a      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x270>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f9e9 	bl	8001110 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f9e5 	bl	8001110 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1a1      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4927      	ldr	r1, [pc, #156]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x270>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f9c8 	bl	8001110 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe f9c4 	bl	8001110 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e180      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d03a      	beq.n	8002e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_RCC_OscConfig+0x274>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f9a8 	bl	8001110 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f9a4 	bl	8001110 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e160      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f000 faba 	bl	800335c <RCC_Delay>
 8002de8:	e01c      	b.n	8002e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x274>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fe f98e 	bl	8001110 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe f98a 	bl	8001110 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d908      	bls.n	8002e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e146      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	42420000 	.word	0x42420000
 8002e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	4b92      	ldr	r3, [pc, #584]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e9      	bne.n	8002df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a6 	beq.w	8002f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a87      	ldr	r2, [pc, #540]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x4c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x4c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7e      	ldr	r2, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x4c8>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f94b 	bl	8001110 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe f947 	bl	8001110 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e103      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b75      	ldr	r3, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4c8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x312>
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x334>
 8002eba:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a69      	ldr	r2, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a66      	ldr	r2, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	e01c      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x356>
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a60      	ldr	r2, [pc, #384]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e00b      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a5a      	ldr	r2, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b58      	ldr	r3, [pc, #352]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d015      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe f8fb 	bl	8001110 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe f8f7 	bl	8001110 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0b1      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RCC_OscConfig+0x37e>
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fe f8e5 	bl	8001110 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe f8e1 	bl	8001110 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e09b      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8087 	beq.w	8003096 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d061      	beq.n	8003058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d146      	bne.n	800302a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe f8b5 	bl	8001110 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe f8b1 	bl	8001110 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e06d      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4921      	ldr	r1, [pc, #132]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a19      	ldr	r1, [r3, #32]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	491b      	ldr	r1, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fe f885 	bl	8001110 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe f881 	bl	8001110 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e03d      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x46a>
 8003028:	e035      	b.n	8003096 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_RCC_OscConfig+0x4cc>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe f86e 	bl	8001110 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f86a 	bl	8001110 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e026      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x498>
 8003056:	e01e      	b.n	8003096 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e019      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
 800306c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x500>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d0      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4965      	ldr	r1, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d040      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e073      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4936      	ldr	r1, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd ffbc 	bl	8001110 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd ffb8 	bl	8001110 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e053      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d210      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4922      	ldr	r1, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1cc>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd ff1a 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000
 8003268:	40021000 	.word	0x40021000
 800326c:	08004520 	.word	0x08004520
 8003270:	20000010 	.word	0x20000010
 8003274:	20000014 	.word	0x20000014

08003278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_RCC_GetSysClockFreq+0x94>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x30>
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x36>
 80032a6:	e027      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_GetSysClockFreq+0x98>)
 80032aa:	613b      	str	r3, [r7, #16]
      break;
 80032ac:	e027      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_GetSysClockFreq+0x94>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0c5b      	lsrs	r3, r3, #17
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	4a11      	ldr	r2, [pc, #68]	; (8003318 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_RCC_GetSysClockFreq+0x98>)
 80032da:	fb03 f202 	mul.w	r2, r3, r2
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	e004      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	613b      	str	r3, [r7, #16]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x98>)
 80032fa:	613b      	str	r3, [r7, #16]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	693b      	ldr	r3, [r7, #16]
}
 8003300:	4618      	mov	r0, r3
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	007a1200 	.word	0x007a1200
 8003314:	08004538 	.word	0x08004538
 8003318:	08004548 	.word	0x08004548
 800331c:	003d0900 	.word	0x003d0900

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <HAL_RCC_GetHCLKFreq+0x10>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000010 	.word	0x20000010

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003338:	f7ff fff2 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08004530 	.word	0x08004530

0800335c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <RCC_Delay+0x34>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <RCC_Delay+0x38>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a5b      	lsrs	r3, r3, #9
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003378:	bf00      	nop
  }
  while (Delay --);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	60fa      	str	r2, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f9      	bne.n	8003378 <RCC_Delay+0x1c>
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000010 	.word	0x20000010
 8003394:	10624dd3 	.word	0x10624dd3

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d07d      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b8:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	61d3      	str	r3, [r2, #28]
 80033d0:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d118      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ec:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a42      	ldr	r2, [pc, #264]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f8:	f7fd fe8a 	bl	8001110 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	e008      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fd fe86 	bl	8001110 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e06d      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d027      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003444:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003452:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd fe55 	bl	8001110 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd fe51 	bl	8001110 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e036      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4917      	ldr	r1, [pc, #92]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	4313      	orrs	r3, r2
 800349c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	490b      	ldr	r1, [pc, #44]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
 8003500:	42420440 	.word	0x42420440

08003504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e041      	b.n	800359a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fcfe 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f000 fc10 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e03a      	b.n	8003632 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_TIM_Base_Start_IT+0x98>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_TIM_Base_Start_IT+0x9c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_TIM_Base_Start_IT+0xa0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d010      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	e007      	b.n	8003630 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800

08003648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fc80 	bl	8000f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fb6e 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_TIM_PWM_Start+0x24>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e022      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d109      	bne.n	8003726 <HAL_TIM_PWM_Start+0x3e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e015      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d109      	bne.n	8003740 <HAL_TIM_PWM_Start+0x58>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e008      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e05e      	b.n	8003818 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start+0x82>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003768:	e013      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d104      	bne.n	800377a <HAL_TIM_PWM_Start+0x92>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003778:	e00b      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d104      	bne.n	800378a <HAL_TIM_PWM_Start+0xa2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003788:	e003      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2201      	movs	r2, #1
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd70 	bl	8004280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIM_PWM_Start+0x138>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_PWM_Start+0x138>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_TIM_PWM_Start+0x13c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_TIM_PWM_Start+0x140>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d010      	beq.n	8003816 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	e007      	b.n	8003816 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d020      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa5a 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa4d 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa5c 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa34 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa27 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa36 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa0e 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa01 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa10 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9e8 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9db 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f9ea 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0201 	mvn.w	r2, #1
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f866 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fced 	bl	8004396 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9ba 	bl	8003d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0220 	mvn.w	r2, #32
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fcc0 	bl	8004384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0ae      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	f200 809f 	bhi.w	8003b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003b79 	.word	0x08003b79
 8003a48:	08003b79 	.word	0x08003b79
 8003a4c:	08003b79 	.word	0x08003b79
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003b79 	.word	0x08003b79
 8003a58:	08003b79 	.word	0x08003b79
 8003a5c:	08003b79 	.word	0x08003b79
 8003a60:	08003af7 	.word	0x08003af7
 8003a64:	08003b79 	.word	0x08003b79
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	08003b79 	.word	0x08003b79
 8003a70:	08003b37 	.word	0x08003b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f9e2 	bl	8003e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0204 	bic.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
      break;
 8003ab2:	e064      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa28 	bl	8003f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      break;
 8003af4:	e043      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fa71 	bl	8003fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      break;
 8003b34:	e023      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fabb 	bl	80040b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0b4      	b.n	8003d16 <HAL_TIM_ConfigClockSource+0x186>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be4:	d03e      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xd4>
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	f200 8087 	bhi.w	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	f000 8086 	beq.w	8003d02 <HAL_TIM_ConfigClockSource+0x172>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d87f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d01a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xa6>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d87b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b60      	cmp	r3, #96	; 0x60
 8003c06:	d050      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x11a>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d877      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d03c      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xfa>
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d873      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d058      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x13a>
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d86f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b30      	cmp	r3, #48	; 0x30
 8003c1e:	d064      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	d86b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d060      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d867      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d05a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	e062      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c46:	f000 fafc 	bl	8004242 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]
      break;
 8003c62:	e04f      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c74:	f000 fae5 	bl	8004242 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c86:	609a      	str	r2, [r3, #8]
      break;
 8003c88:	e03c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fa5c 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2150      	movs	r1, #80	; 0x50
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fab3 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e02c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa7a 	bl	80041b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2160      	movs	r1, #96	; 0x60
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 faa3 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e01c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa3c 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa93 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 fa8a 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003d00:	e000      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <TIM_Base_SetConfig+0xd4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <TIM_Base_SetConfig+0xd8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <TIM_Base_SetConfig+0xd4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <TIM_Base_SetConfig+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <TIM_Base_SetConfig+0xd0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0201 	bic.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <TIM_OC1_SetConfig+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10c      	bne.n	8003eba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0308 	bic.w	r3, r3, #8
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <TIM_OC1_SetConfig+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00

08003f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f023 0210 	bic.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <TIM_OC2_SetConfig+0xd0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10d      	bne.n	8003f8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <TIM_OC2_SetConfig+0xd0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d113      	bne.n	8003fbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800402c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <TIM_OC3_SetConfig+0xd0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10d      	bne.n	800405e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <TIM_OC3_SetConfig+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <TIM_OC4_SetConfig+0x98>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d109      	bne.n	800412c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00

08004154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 030a 	bic.w	r3, r3, #10
 8004190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2201      	movs	r2, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	401a      	ands	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e046      	b.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d009      	beq.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a10      	ldr	r2, [pc, #64]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10c      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4313      	orrs	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800

08004384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <__itoa>:
 80043a8:	1e93      	subs	r3, r2, #2
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	b510      	push	{r4, lr}
 80043ae:	460c      	mov	r4, r1
 80043b0:	d904      	bls.n	80043bc <__itoa+0x14>
 80043b2:	2300      	movs	r3, #0
 80043b4:	461c      	mov	r4, r3
 80043b6:	700b      	strb	r3, [r1, #0]
 80043b8:	4620      	mov	r0, r4
 80043ba:	bd10      	pop	{r4, pc}
 80043bc:	2a0a      	cmp	r2, #10
 80043be:	d109      	bne.n	80043d4 <__itoa+0x2c>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	da07      	bge.n	80043d4 <__itoa+0x2c>
 80043c4:	232d      	movs	r3, #45	; 0x2d
 80043c6:	700b      	strb	r3, [r1, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	4240      	negs	r0, r0
 80043cc:	4421      	add	r1, r4
 80043ce:	f000 f805 	bl	80043dc <__utoa>
 80043d2:	e7f1      	b.n	80043b8 <__itoa+0x10>
 80043d4:	2100      	movs	r1, #0
 80043d6:	e7f9      	b.n	80043cc <__itoa+0x24>

080043d8 <itoa>:
 80043d8:	f7ff bfe6 	b.w	80043a8 <__itoa>

080043dc <__utoa>:
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	b08b      	sub	sp, #44	; 0x2c
 80043e0:	4605      	mov	r5, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	466e      	mov	r6, sp
 80043e6:	4c1d      	ldr	r4, [pc, #116]	; (800445c <__utoa+0x80>)
 80043e8:	f104 0c20 	add.w	ip, r4, #32
 80043ec:	4637      	mov	r7, r6
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	6861      	ldr	r1, [r4, #4]
 80043f2:	3408      	adds	r4, #8
 80043f4:	c703      	stmia	r7!, {r0, r1}
 80043f6:	4564      	cmp	r4, ip
 80043f8:	463e      	mov	r6, r7
 80043fa:	d1f7      	bne.n	80043ec <__utoa+0x10>
 80043fc:	7921      	ldrb	r1, [r4, #4]
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	7139      	strb	r1, [r7, #4]
 8004402:	1e91      	subs	r1, r2, #2
 8004404:	2922      	cmp	r1, #34	; 0x22
 8004406:	6038      	str	r0, [r7, #0]
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	d904      	bls.n	8004418 <__utoa+0x3c>
 800440e:	7019      	strb	r1, [r3, #0]
 8004410:	460b      	mov	r3, r1
 8004412:	4618      	mov	r0, r3
 8004414:	b00b      	add	sp, #44	; 0x2c
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004418:	1e58      	subs	r0, r3, #1
 800441a:	4684      	mov	ip, r0
 800441c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004420:	fb02 5617 	mls	r6, r2, r7, r5
 8004424:	3628      	adds	r6, #40	; 0x28
 8004426:	446e      	add	r6, sp
 8004428:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800442c:	460c      	mov	r4, r1
 800442e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004432:	462e      	mov	r6, r5
 8004434:	42b2      	cmp	r2, r6
 8004436:	463d      	mov	r5, r7
 8004438:	f101 0101 	add.w	r1, r1, #1
 800443c:	d9ee      	bls.n	800441c <__utoa+0x40>
 800443e:	2200      	movs	r2, #0
 8004440:	545a      	strb	r2, [r3, r1]
 8004442:	1919      	adds	r1, r3, r4
 8004444:	1aa5      	subs	r5, r4, r2
 8004446:	42aa      	cmp	r2, r5
 8004448:	dae3      	bge.n	8004412 <__utoa+0x36>
 800444a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800444e:	780e      	ldrb	r6, [r1, #0]
 8004450:	3201      	adds	r2, #1
 8004452:	7006      	strb	r6, [r0, #0]
 8004454:	f801 5901 	strb.w	r5, [r1], #-1
 8004458:	e7f4      	b.n	8004444 <__utoa+0x68>
 800445a:	bf00      	nop
 800445c:	0800454a 	.word	0x0800454a

08004460 <memset>:
 8004460:	4603      	mov	r3, r0
 8004462:	4402      	add	r2, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <__libc_init_array>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	2600      	movs	r6, #0
 8004474:	4d0c      	ldr	r5, [pc, #48]	; (80044a8 <__libc_init_array+0x38>)
 8004476:	4c0d      	ldr	r4, [pc, #52]	; (80044ac <__libc_init_array+0x3c>)
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	42a6      	cmp	r6, r4
 800447e:	d109      	bne.n	8004494 <__libc_init_array+0x24>
 8004480:	f000 f81a 	bl	80044b8 <_init>
 8004484:	2600      	movs	r6, #0
 8004486:	4d0a      	ldr	r5, [pc, #40]	; (80044b0 <__libc_init_array+0x40>)
 8004488:	4c0a      	ldr	r4, [pc, #40]	; (80044b4 <__libc_init_array+0x44>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	42a6      	cmp	r6, r4
 8004490:	d105      	bne.n	800449e <__libc_init_array+0x2e>
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	f855 3b04 	ldr.w	r3, [r5], #4
 8004498:	4798      	blx	r3
 800449a:	3601      	adds	r6, #1
 800449c:	e7ee      	b.n	800447c <__libc_init_array+0xc>
 800449e:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a2:	4798      	blx	r3
 80044a4:	3601      	adds	r6, #1
 80044a6:	e7f2      	b.n	800448e <__libc_init_array+0x1e>
 80044a8:	08004570 	.word	0x08004570
 80044ac:	08004570 	.word	0x08004570
 80044b0:	08004570 	.word	0x08004570
 80044b4:	08004574 	.word	0x08004574

080044b8 <_init>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr

080044c4 <_fini>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr
