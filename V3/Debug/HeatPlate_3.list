
HeatPlate_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad4  08005ad4  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08005ad4  08005ad4  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ad4  08005ad4  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08005adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000130  08005c0c  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005c0c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff2d  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ead  00000000  00000000  000300c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00032f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd5  00000000  00000000  00034018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a7f  00000000  00000000  00034ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ba8  00000000  00000000  0004e76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009081c  00000000  00000000  00064314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000458c  00000000  00000000  000f4b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f90bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000130 	.word	0x20000130
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a1c 	.word	0x08005a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000134 	.word	0x20000134
 800014c:	08005a1c 	.word	0x08005a1c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <getTableNum>:

}

//void calTemp(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig,
//		NTC_TypeDef *uNTC) {
int getTableNum(NTC_TypeDef *uNTC) {
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(ntc3960_100k) - 1; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e017      	b.n	8000ade <getTableNum+0x42>
		/* Use of > determined by inspection of data - colder temps have higher ADC value */
		if (uNTC->resistor > ntc3960_100k[i])
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <getTableNum+0x54>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fc89 	bl	80003d4 <__aeabi_ui2d>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	4629      	mov	r1, r5
 8000aca:	f7ff ff8d 	bl	80009e8 <__aeabi_dcmpgt>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <getTableNum+0x3c>
			return i;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	e007      	b.n	8000ae8 <getTableNum+0x4c>
	for (i = 0; i < sizeof(ntc3960_100k) - 1; i++) {
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000ae4:	d9e3      	bls.n	8000aae <getTableNum+0x12>
	}
	return i;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bdb0      	pop	{r4, r5, r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	00000000 	.word	0x00000000

08000af8 <calTemp>:

float calTemp(NTC_TypeDef *uNTC, uint32_t inoputAdcValue) {
 8000af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000afc:	b088      	sub	sp, #32
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	uNTC->_NTC_adcvalue = inoputAdcValue;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	601a      	str	r2, [r3, #0]
//	printf("run cal temp \r\n");

//cal resistor
	float voltage = 0.0;
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
	voltage = (uNTC->_NTC_adcvalue / 4096.0) * 3.3;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc5d 	bl	80003d4 <__aeabi_ui2d>
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	4b64      	ldr	r3, [pc, #400]	; (8000cb0 <calTemp+0x1b8>)
 8000b20:	f7ff fdfc 	bl	800071c <__aeabi_ddiv>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	a35e      	add	r3, pc, #376	; (adr r3, 8000ca8 <calTemp+0x1b0>)
 8000b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b32:	f7ff fcc9 	bl	80004c8 <__aeabi_dmul>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__aeabi_d2f>
 8000b42:	4603      	mov	r3, r0
 8000b44:	61bb      	str	r3, [r7, #24]
	uNTC->resistor = (refenceResistor * 1.0 * voltage)
 8000b46:	69b8      	ldr	r0, [r7, #24]
 8000b48:	f7ff fc66 	bl	8000418 <__aeabi_f2d>
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <calTemp+0x1bc>)
 8000b52:	f7ff fcb9 	bl	80004c8 <__aeabi_dmul>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	4614      	mov	r4, r2
 8000b5c:	461d      	mov	r5, r3
			/ (supplyVoltage * 1.0 - (voltage));
 8000b5e:	69b8      	ldr	r0, [r7, #24]
 8000b60:	f7ff fc5a 	bl	8000418 <__aeabi_f2d>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4952      	ldr	r1, [pc, #328]	; (8000cb8 <calTemp+0x1c0>)
 8000b6e:	f7ff faf3 	bl	8000158 <__aeabi_dsub>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4620      	mov	r0, r4
 8000b78:	4629      	mov	r1, r5
 8000b7a:	f7ff fdcf 	bl	800071c <__aeabi_ddiv>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
	uNTC->resistor = (refenceResistor * 1.0 * voltage)
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uNTC->resistor = uNTC->resistor;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	e9c1 2304 	strd	r2, r3, [r1, #16]

	uNTC->tableNum = getTableNum(uNTC);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff81 	bl	8000a9c <getTableNum>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	809a      	strh	r2, [r3, #4]
	int16_t temp1, temp2;
	temp1 = -40 + (uNTC->tableNum * 5);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	889b      	ldrh	r3, [r3, #4]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3b28      	subs	r3, #40	; 0x28
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	82fb      	strh	r3, [r7, #22]
	temp2 = -40 + ((uNTC->tableNum + 1) * 5);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	889b      	ldrh	r3, [r3, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	3b28      	subs	r3, #40	; 0x28
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	83fb      	strh	r3, [r7, #30]
// for over temp
	if (uNTC->tableNum >= sizeof(ntc3960_100k)) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	889b      	ldrh	r3, [r3, #4]
 8000bce:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8000bd2:	d301      	bcc.n	8000bd8 <calTemp+0xe0>
		temp2 = temp1;
 8000bd4:	8afb      	ldrh	r3, [r7, #22]
 8000bd6:	83fb      	strh	r3, [r7, #30]
	}
	double c = (ntc3960_100k[uNTC->tableNum + 1] - uNTC->resistor)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	889b      	ldrh	r3, [r3, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <calTemp+0x1c4>)
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fbf5 	bl	80003d4 <__aeabi_ui2d>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000bf0:	f7ff fab2 	bl	8000158 <__aeabi_dsub>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4690      	mov	r8, r2
 8000bfa:	4699      	mov	r9, r3
			/ (uNTC->resistor - ntc3960_100k[uNTC->tableNum]);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	889b      	ldrh	r3, [r3, #4]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <calTemp+0x1c4>)
 8000c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbe0 	bl	80003d4 <__aeabi_ui2d>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	f7ff fa9c 	bl	8000158 <__aeabi_dsub>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
	double c = (ntc3960_100k[uNTC->tableNum + 1] - uNTC->resistor)
 8000c24:	4640      	mov	r0, r8
 8000c26:	4649      	mov	r1, r9
 8000c28:	f7ff fd78 	bl	800071c <__aeabi_ddiv>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uNTC->temp = (temp2 + c * temp1) / (1 + c);
 8000c34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fbdb 	bl	80003f4 <__aeabi_i2d>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fbd4 	bl	80003f4 <__aeabi_i2d>
 8000c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c50:	f7ff fc3a 	bl	80004c8 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	f7ff fa7e 	bl	800015c <__adddf3>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	461d      	mov	r5, r3
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <calTemp+0x1c8>)
 8000c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c72:	f7ff fa73 	bl	800015c <__adddf3>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	f7ff fd4d 	bl	800071c <__aeabi_ddiv>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	uint32_t fti; //double to int
//				logR2 = logR2 *10000;
//	fti = (uint32_t) uNTC->temp;
//				fti = (int) temp[i];
//	printf("run cal temp done!!\r\n");
	return uNTC->temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff feb1 	bl	80009fc <__aeabi_d2f>
 8000c9a:	4603      	mov	r3, r0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ca6:	bf00      	nop
 8000ca8:	66666666 	.word	0x66666666
 8000cac:	400a6666 	.word	0x400a6666
 8000cb0:	40b00000 	.word	0x40b00000
 8000cb4:	40fd4c00 	.word	0x40fd4c00
 8000cb8:	40140000 	.word	0x40140000
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	3ff00000 	.word	0x3ff00000

08000cc4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <MX_ADC1_Init+0xc4>)
 8000cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d16:	f001 f941 	bl	8001f9c <HAL_ADC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000d20:	f000 fd22 	bl	8001768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d38:	f001 fbca 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000d42:	f000 fd11 	bl	8001768 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d56:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d5a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_ADC1_Init+0xc0>)
 8000d6e:	f001 fdb1 	bl	80028d4 <HAL_ADCEx_InjectedConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000d78:	f000 fcf6 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000014c 	.word	0x2000014c
 8000d88:	40012400 	.word	0x40012400

08000d8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <HAL_ADC_MspInit+0xcc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d151      	bne.n	8000e50 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_ADC_MspInit+0xd0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	481d      	ldr	r0, [pc, #116]	; (8000e60 <HAL_ADC_MspInit+0xd4>)
 8000dec:	f002 fa08 	bl	8003200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0xdc>)
 8000df4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e24:	480f      	ldr	r0, [pc, #60]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e26:	f001 fffd 	bl	8002e24 <HAL_DMA_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e30:	f000 fc9a 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e38:	621a      	str	r2, [r3, #32]
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_ADC_MspInit+0xd8>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2012      	movs	r0, #18
 8000e46:	f001 ffb6 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e4a:	2012      	movs	r0, #18
 8000e4c:	f001 ffcf 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800
 8000e64:	2000017c 	.word	0x2000017c
 8000e68:	40020008 	.word	0x40020008

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_DMA_Init+0x38>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <MX_DMA_Init+0x38>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_DMA_Init+0x38>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f001 ff91 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e94:	200b      	movs	r0, #11
 8000e96:	f001 ffaa 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <btnState>:
//		encoder->encoderCounter--;
//		break;
//	}
//}

int btnState(ENCODER_TypeDef *encoder) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	int _return = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
	encoder->_btnState = ENCODER_Btn > 0;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <btnState+0x54>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	71da      	strb	r2, [r3, #7]
//	HAL_Delay(50);
	if (encoder->_btnState == 1 && encoder->_lastBtnState == 0) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	79db      	ldrb	r3, [r3, #7]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <btnState+0x3a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	799b      	ldrb	r3, [r3, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <btnState+0x3a>
		_return = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e001      	b.n	8000ee6 <btnState+0x3e>
	} else {
		_return = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
	}
	encoder->_lastBtnState = encoder->_btnState;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	79da      	ldrb	r2, [r3, #7]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	719a      	strb	r2, [r3, #6]
	return (_return);
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <encoderState>:

int encoderState(ENCODER_TypeDef *encoder) {
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
//	calculatEncoder(encoder);
	encoder->encoderCounter = (TIM4->CNT) >> 2;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <encoderState+0x50>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	711a      	strb	r2, [r3, #4]
//	int _return;

	if (encoder->encoderCounter > encoder->lastEncoderCounter) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	791a      	ldrb	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	795b      	ldrb	r3, [r3, #5]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d905      	bls.n	8000f2c <encoderState+0x2c>
		encoder->lastEncoderCounter = encoder->encoderCounter;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	791a      	ldrb	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	715a      	strb	r2, [r3, #5]

		return (1);
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00c      	b.n	8000f46 <encoderState+0x46>

	} else if (encoder->encoderCounter < encoder->lastEncoderCounter) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	791a      	ldrb	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d205      	bcs.n	8000f44 <encoderState+0x44>
		encoder->lastEncoderCounter = encoder->encoderCounter;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791a      	ldrb	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	715a      	strb	r2, [r3, #5]

		return (2);
 8000f40:	2302      	movs	r3, #2
 8000f42:	e000      	b.n	8000f46 <encoderState+0x46>
	} else {
		return (0);
 8000f44:	2300      	movs	r3, #0
	}
//	return (_return);
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40000800 	.word	0x40000800

08000f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f6e:	f043 0320 	orr.w	r3, r3, #32
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_GPIO_Init+0xa4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_GPIO_Init+0xa8>)
 8000fb6:	f002 faa7 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <MX_GPIO_Init+0xa8>)
 8000fd2:	f002 f915 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoderBtn_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(encoderBtn_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_GPIO_Init+0xa8>)
 8000fea:	f002 f909 	bl	8003200 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C1_Init+0x50>)
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <MX_I2C1_Init+0x54>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_I2C1_Init+0x50>)
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_I2C1_Init+0x58>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_I2C1_Init+0x50>)
 800101e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_I2C1_Init+0x50>)
 800103e:	f002 fa95 	bl	800356c <HAL_I2C_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001048:	f000 fb8e 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001c0 	.word	0x200001c0
 8001054:	40005400 	.word	0x40005400
 8001058:	000186a0 	.word	0x000186a0

0800105c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_I2C_MspInit+0x90>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d132      	bne.n	80010e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001094:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <HAL_I2C_MspInit+0x98>)
 80010aa:	f002 f8a9 	bl	8003200 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_I2C_MspInit+0x9c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_I2C_MspInit+0x9c>)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_I2C_MspInit+0x94>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40010000 	.word	0x40010000

080010fc <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 8001106:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <HD44780_Init+0xec>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HD44780_Init+0xf0>)
 800110e:	2208      	movs	r2, #8
 8001110:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HD44780_Init+0xf4>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HD44780_Init+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d907      	bls.n	8001130 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HD44780_Init+0xf4>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <HD44780_Init+0xf4>)
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e006      	b.n	800113e <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HD44780_Init+0xf4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HD44780_Init+0xf4>)
 800113c:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 800113e:	f000 f9bf 	bl	80014c0 <DelayInit>
	HAL_Delay(50);
 8001142:	2032      	movs	r0, #50	; 0x32
 8001144:	f000 ff06 	bl	8001f54 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HD44780_Init+0xf0>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f97d 	bl	800144c <ExpanderWrite>
	HAL_Delay(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001156:	f000 fefd 	bl	8001f54 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 800115a:	2030      	movs	r0, #48	; 0x30
 800115c:	f000 f964 	bl	8001428 <Write4Bits>
	DelayUS(4500);
 8001160:	f241 1094 	movw	r0, #4500	; 0x1194
 8001164:	f000 f9d4 	bl	8001510 <DelayUS>

	Write4Bits(0x03 << 4);
 8001168:	2030      	movs	r0, #48	; 0x30
 800116a:	f000 f95d 	bl	8001428 <Write4Bits>
	DelayUS(4500);
 800116e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001172:	f000 f9cd 	bl	8001510 <DelayUS>

	Write4Bits(0x03 << 4);
 8001176:	2030      	movs	r0, #48	; 0x30
 8001178:	f000 f956 	bl	8001428 <Write4Bits>
	DelayUS(4500);
 800117c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001180:	f000 f9c6 	bl	8001510 <DelayUS>

	Write4Bits(0x02 << 4);
 8001184:	2020      	movs	r0, #32
 8001186:	f000 f94f 	bl	8001428 <Write4Bits>
	DelayUS(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f000 f9c0 	bl	8001510 <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HD44780_Init+0xf4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f907 	bl	80013ae <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HD44780_Init+0xf8>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 80011a6:	f000 f88b 	bl	80012c0 <HD44780_Display>
	HD44780_Clear();
 80011aa:	f000 f82b 	bl	8001204 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HD44780_Init+0xfc>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HD44780_Init+0xfc>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f8f5 	bl	80013ae <SendCommand>
	DelayUS(4500);
 80011c4:	f241 1094 	movw	r0, #4500	; 0x1194
 80011c8:	f000 f9a2 	bl	8001510 <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 80011cc:	490b      	ldr	r1, [pc, #44]	; (80011fc <HD44780_Init+0x100>)
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f8a2 	bl	8001318 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <HD44780_Init+0x104>)
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 f89e 	bl	8001318 <HD44780_CreateSpecialChar>

	HD44780_Home();
 80011dc:	f000 f81d 	bl	800121a <HD44780_Home>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000217 	.word	0x20000217
 80011ec:	20000218 	.word	0x20000218
 80011f0:	20000214 	.word	0x20000214
 80011f4:	20000215 	.word	0x20000215
 80011f8:	20000216 	.word	0x20000216
 80011fc:	20000114 	.word	0x20000114
 8001200:	2000011c 	.word	0x2000011c

08001204 <HD44780_Clear>:

void HD44780_Clear() {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8001208:	2001      	movs	r0, #1
 800120a:	f000 f8d0 	bl	80013ae <SendCommand>
	DelayUS(2000);
 800120e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001212:	f000 f97d 	bl	8001510 <DelayUS>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <HD44780_Home>:

void HD44780_Home() {
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 800121e:	2002      	movs	r0, #2
 8001220:	f000 f8c5 	bl	80013ae <SendCommand>
	DelayUS(2000);
 8001224:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001228:	f000 f972 	bl	8001510 <DelayUS>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HD44780_SetCursor+0x5c>)
 8001242:	f107 0408 	add.w	r4, r7, #8
 8001246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HD44780_SetCursor+0x60>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	429a      	cmp	r2, r3
 8001254:	d303      	bcc.n	800125e <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HD44780_SetCursor+0x60>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3b01      	subs	r3, #1
 800125c:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	3318      	adds	r3, #24
 8001264:	443b      	add	r3, r7
 8001266:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001278:	b25b      	sxtb	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f896 	bl	80013ae <SendCommand>
}
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	08005a34 	.word	0x08005a34
 8001290:	20000217 	.word	0x20000217

08001294 <HD44780_NoDisplay>:

void HD44780_NoDisplay() {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_DISPLAYON;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HD44780_NoDisplay+0x28>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HD44780_NoDisplay+0x28>)
 80012a4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HD44780_NoDisplay+0x28>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f87c 	bl	80013ae <SendCommand>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000215 	.word	0x20000215

080012c0 <HD44780_Display>:

void HD44780_Display() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HD44780_Display+0x28>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HD44780_Display+0x28>)
 80012d0:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HD44780_Display+0x28>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f866 	bl	80013ae <SendCommand>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000215 	.word	0x20000215

080012ec <HD44780_Cursor>:
void HD44780_NoCursor() {
	dpControl &= ~LCD_CURSORON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	dpControl |= LCD_CURSORON;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HD44780_Cursor+0x28>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HD44780_Cursor+0x28>)
 80012fc:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HD44780_Cursor+0x28>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f850 	bl	80013ae <SendCommand>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000215 	.word	0x20000215

08001318 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f837 	bl	80013ae <SendCommand>
	for (int i = 0; i < 8; i++) {
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e009      	b.n	800135a <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f83b 	bl	80013ca <SendChar>
	for (int i = 0; i < 8; i++) {
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddf2      	ble.n	8001346 <HD44780_CreateSpecialChar+0x2e>
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
	SendChar(index);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f827 	bl	80013ca <SendChar>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	while (*c)
 800138c:	e006      	b.n	800139c <HD44780_PrintStr+0x18>
		SendChar(*c++);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f817 	bl	80013ca <SendChar>
	while (*c)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f4      	bne.n	800138e <HD44780_PrintStr+0xa>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <SendCommand>:
void HD44780_Backlight(void) {
	dpBacklight = LCD_BACKLIGHT;
	ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd) {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f812 	bl	80013e6 <Send>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <SendChar>:

static void SendChar(uint8_t ch) {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2101      	movs	r1, #1
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f804 	bl	80013e6 <Send>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	4613      	mov	r3, r2
 80013f4:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f023 030f 	bic.w	r3, r3, #15
 80013fc:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	4313      	orrs	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f80b 	bl	8001428 <Write4Bits>
	Write4Bits((lownib) | mode);
 8001412:	7bba      	ldrb	r2, [r7, #14]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	4313      	orrs	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f804 	bl	8001428 <Write4Bits>
}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f809 	bl	800144c <ExpanderWrite>
	PulseEnable(value);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f821 	bl	8001484 <PulseEnable>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <ExpanderWrite+0x30>)
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4313      	orrs	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 8001462:	f107 020f 	add.w	r2, r7, #15
 8001466:	230a      	movs	r3, #10
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	214e      	movs	r1, #78	; 0x4e
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <ExpanderWrite+0x34>)
 8001470:	f002 f9c0 	bl	80037f4 <HAL_I2C_Master_Transmit>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000218 	.word	0x20000218
 8001480:	200001c0 	.word	0x200001c0

08001484 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE_LCD);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ffd8 	bl	800144c <ExpanderWrite>
	DelayUS(20);
 800149c:	2014      	movs	r0, #20
 800149e:	f000 f837 	bl	8001510 <DelayUS>

	ExpanderWrite(_data & ~ENABLE_LCD);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffce 	bl	800144c <ExpanderWrite>
	DelayUS(20);
 80014b0:	2014      	movs	r0, #20
 80014b2:	f000 f82d 	bl	8001510 <DelayUS>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <DelayInit>:

static void DelayInit(void) {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <DelayInit+0x48>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <DelayInit+0x48>)
 80014ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <DelayInit+0x48>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <DelayInit+0x48>)
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <DelayInit+0x4c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <DelayInit+0x4c>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <DelayInit+0x4c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <DelayInit+0x4c>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <DelayInit+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80014fa:	bf00      	nop
	__ASM volatile ("NOP");
 80014fc:	bf00      	nop
	__ASM volatile ("NOP");
 80014fe:	bf00      	nop
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	e000edf0 	.word	0xe000edf0
 800150c:	e0001000 	.word	0xe0001000

08001510 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <DelayUS+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <DelayUS+0x44>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9a      	lsrs	r2, r3, #18
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <DelayUS+0x48>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <DelayUS+0x48>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f6      	bhi.n	8001532 <DelayUS+0x22>
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000124 	.word	0x20000124
 8001554:	431bde83 	.word	0x431bde83
 8001558:	e0001000 	.word	0xe0001000

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fc96 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f888 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff fcf4 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f7ff fc7e 	bl	8000e6c <MX_DMA_Init>
  MX_ADC1_Init();
 8001570:	f7ff fba8 	bl	8000cc4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001574:	f000 fab0 	bl	8001ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001578:	f000 fafa 	bl	8001b70 <MX_TIM3_Init>
  MX_I2C1_Init();
 800157c:	f7ff fd40 	bl	8001000 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001580:	f000 fb5a 	bl	8001c38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001584:	482d      	ldr	r0, [pc, #180]	; (800163c <main+0xe0>)
 8001586:	f003 f98f 	bl	80048a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800158a:	482d      	ldr	r0, [pc, #180]	; (8001640 <main+0xe4>)
 800158c:	f003 f98c 	bl	80048a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	482b      	ldr	r0, [pc, #172]	; (8001640 <main+0xe4>)
 8001594:	f003 fa2a 	bl	80049ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001598:	2104      	movs	r1, #4
 800159a:	4829      	ldr	r0, [pc, #164]	; (8001640 <main+0xe4>)
 800159c:	f003 fa26 	bl	80049ec <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015a0:	213c      	movs	r1, #60	; 0x3c
 80015a2:	4828      	ldr	r0, [pc, #160]	; (8001644 <main+0xe8>)
 80015a4:	f003 fb66 	bl	8004c74 <HAL_TIM_Encoder_Start>
	HAL_ADC_Start_DMA(&hadc1, &adcValue, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	4927      	ldr	r1, [pc, #156]	; (8001648 <main+0xec>)
 80015ac:	4827      	ldr	r0, [pc, #156]	; (800164c <main+0xf0>)
 80015ae:	f000 fdcd 	bl	800214c <HAL_ADC_Start_DMA>
	meunInit(&meun, 150);
 80015b2:	2196      	movs	r1, #150	; 0x96
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <main+0xf4>)
 80015b6:	f000 f8dc 	bl	8001772 <meunInit>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//encoder_State = (TIM4->CNT) >> 2;
			displayMeunHandler(&meun);
 80015ba:	4825      	ldr	r0, [pc, #148]	; (8001650 <main+0xf4>)
 80015bc:	f000 f998 	bl	80018f0 <displayMeunHandler>
			selectMeunHandler(&meun, &encoder);
 80015c0:	4924      	ldr	r1, [pc, #144]	; (8001654 <main+0xf8>)
 80015c2:	4823      	ldr	r0, [pc, #140]	; (8001650 <main+0xf4>)
 80015c4:	f000 f9bc 	bl	8001940 <selectMeunHandler>

		if (counter % 50 == 0) {
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <main+0xfc>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <main+0x100>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	2132      	movs	r1, #50	; 0x32
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <main+0x8c>
			HAL_GPIO_TogglePin(GPIOB, SIGNAL_Pin);
 80015e0:	2101      	movs	r1, #1
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <main+0x104>)
 80015e4:	f001 ffa8 	bl	8003538 <HAL_GPIO_TogglePin>
		}

		if(counter %33 == 0){
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <main+0xfc>)
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <main+0x108>)
 80015ee:	fba3 2301 	umull	r2, r3, r3, r1
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	4613      	mov	r3, r2
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4413      	add	r3, r2
 80015fa:	1aca      	subs	r2, r1, r3
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	d1dc      	bne.n	80015ba <main+0x5e>
			currentTemp = calTemp(&ntc0, adcValue);
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <main+0xec>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <main+0x10c>)
 8001608:	f7ff fa76 	bl	8000af8 <calTemp>
 800160c:	4603      	mov	r3, r0
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff02 	bl	8000418 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4914      	ldr	r1, [pc, #80]	; (800166c <main+0x110>)
 800161a:	e9c1 2300 	strd	r2, r3, [r1]
			_resistor = *&ntc0.resistor;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <main+0x10c>)
 8001620:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001624:	4912      	ldr	r1, [pc, #72]	; (8001670 <main+0x114>)
 8001626:	e9c1 2300 	strd	r2, r3, [r1]
			_num= getTableNum(&ntc0);
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <main+0x10c>)
 800162c:	f7ff fa36 	bl	8000a9c <getTableNum>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <main+0x118>)
 8001636:	801a      	strh	r2, [r3, #0]
			displayMeunHandler(&meun);
 8001638:	e7bf      	b.n	80015ba <main+0x5e>
 800163a:	bf00      	nop
 800163c:	20000280 	.word	0x20000280
 8001640:	200002c8 	.word	0x200002c8
 8001644:	20000310 	.word	0x20000310
 8001648:	2000027c 	.word	0x2000027c
 800164c:	2000014c 	.word	0x2000014c
 8001650:	20000224 	.word	0x20000224
 8001654:	2000021c 	.word	0x2000021c
 8001658:	20000260 	.word	0x20000260
 800165c:	51eb851f 	.word	0x51eb851f
 8001660:	40010c00 	.word	0x40010c00
 8001664:	3e0f83e1 	.word	0x3e0f83e1
 8001668:	20000240 	.word	0x20000240
 800166c:	20000268 	.word	0x20000268
 8001670:	20000270 	.word	0x20000270
 8001674:	20000278 	.word	0x20000278

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	2228      	movs	r2, #40	; 0x28
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f99c 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b6:	2301      	movs	r3, #1
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fbe8 	bl	8003ea4 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016da:	f000 f845 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fe54 	bl	80043a8 <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001706:	f000 f82f 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800170a:	2302      	movs	r3, #2
 800170c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800170e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f002 ffc0 	bl	800469c <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001722:	f000 f821 	bl	8001768 <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	3750      	adds	r7, #80	; 0x50
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) { //50ms per tick
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d10b      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x2a>
		counter = counter > 500 ? 1 : counter + 1;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800174a:	d803      	bhi.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x24>
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x26>
 8001754:	2301      	movs	r3, #1
 8001756:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001758:	6013      	str	r3, [r2, #0]
	}

}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000260 	.word	0x20000260

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>

08001772 <meunInit>:
#include "main.h"
#include "config.h"

//extern uint16_t counter;

void meunInit(MEUN_TypeDef *meun, int defaultTemp) {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	meun->meunNeedUpdate = 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
	meun->nowTemp = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
	meun->targetTemp = defaultTemp;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	811a      	strh	r2, [r3, #8]
	HD44780_Init(2);
 8001790:	2002      	movs	r0, #2
 8001792:	f7ff fcb3 	bl	80010fc <HD44780_Init>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <startScreeen>:

/*-------------------------public function------------------------------------*/

/*-------------------------pv function----------------------------------------*/
void startScreeen(MEUN_TypeDef *meun) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	HD44780_NoDisplay();
 80017a8:	f7ff fd74 	bl	8001294 <HD44780_NoDisplay>
	HD44780_Cursor();
 80017ac:	f7ff fd9e 	bl	80012ec <HD44780_Cursor>
	HD44780_SetCursor(0, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fd3c 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO STM32!!!");
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <startScreeen+0x2c>)
 80017ba:	f7ff fde3 	bl	8001384 <HD44780_PrintStr>
	HD44780_PrintSpecialChar(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fdd3 	bl	800136a <HD44780_PrintSpecialChar>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08005a44 	.word	0x08005a44

080017d0 <standby_page>:

void standby_page(MEUN_TypeDef *meun) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	char displayNowTemp[10];
	char displayTargetTemp[10];
	itoa(meun->nowTemp, displayNowTemp, 10);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	220a      	movs	r2, #10
 80017e4:	4619      	mov	r1, r3
 80017e6:	f004 f8a9 	bl	800593c <itoa>
	itoa(meun->targetTemp, displayTargetTemp, 10);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	891b      	ldrh	r3, [r3, #8]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	220a      	movs	r2, #10
 80017f6:	4619      	mov	r1, r3
 80017f8:	f004 f8a0 	bl	800593c <itoa>
	HD44780_SetCursor(1, 0);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fd16 	bl	8001230 <HD44780_SetCursor>
//	HD44780_PrintStr("-xxxxxxxxxxxxxx<");
	HD44780_PrintStr("Standby        ");
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <standby_page+0x84>)
 8001806:	f7ff fdbd 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(1, 1);
 800180a:	2101      	movs	r1, #1
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff fd0f 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr("N_T:");
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <standby_page+0x88>)
 8001814:	f7ff fdb6 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 8001818:	2101      	movs	r1, #1
 800181a:	2006      	movs	r0, #6
 800181c:	f7ff fd08 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr(displayNowTemp);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fdad 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 800182a:	2101      	movs	r1, #1
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff fcff 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr("S_T:");
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <standby_page+0x8c>)
 8001834:	f7ff fda6 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(14, 1);
 8001838:	2101      	movs	r1, #1
 800183a:	200e      	movs	r0, #14
 800183c:	f7ff fcf8 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr(displayTargetTemp);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd9d 	bl	8001384 <HD44780_PrintStr>
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	08005a54 	.word	0x08005a54
 8001858:	08005a64 	.word	0x08005a64
 800185c:	08005a6c 	.word	0x08005a6c

08001860 <heating_page>:

void heating_page(MEUN_TypeDef *meun) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	char displayNowTemp[10];
	char displayTargetTemp[10];
	itoa(meun->nowTemp, displayNowTemp, 10);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	220a      	movs	r2, #10
 8001874:	4619      	mov	r1, r3
 8001876:	f004 f861 	bl	800593c <itoa>
	itoa(meun->targetTemp, displayTargetTemp, 10);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	891b      	ldrh	r3, [r3, #8]
 800187e:	4618      	mov	r0, r3
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	220a      	movs	r2, #10
 8001886:	4619      	mov	r1, r3
 8001888:	f004 f858 	bl	800593c <itoa>
	HD44780_SetCursor(1, 0);
 800188c:	2100      	movs	r1, #0
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fcce 	bl	8001230 <HD44780_SetCursor>
//	HD44780_PrintStr("-xxxxxxxxxxxxxx<");
	HD44780_PrintStr("Heating        ");
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <heating_page+0x84>)
 8001896:	f7ff fd75 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(1, 1);
 800189a:	2101      	movs	r1, #1
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fcc7 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr("N_T:");
 80018a2:	4811      	ldr	r0, [pc, #68]	; (80018e8 <heating_page+0x88>)
 80018a4:	f7ff fd6e 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(6, 1);
 80018a8:	2101      	movs	r1, #1
 80018aa:	2006      	movs	r0, #6
 80018ac:	f7ff fcc0 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr(displayNowTemp);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fd65 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 80018ba:	2101      	movs	r1, #1
 80018bc:	200a      	movs	r0, #10
 80018be:	f7ff fcb7 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr("S_T:");
 80018c2:	480a      	ldr	r0, [pc, #40]	; (80018ec <heating_page+0x8c>)
 80018c4:	f7ff fd5e 	bl	8001384 <HD44780_PrintStr>
	HD44780_SetCursor(14, 1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	200e      	movs	r0, #14
 80018cc:	f7ff fcb0 	bl	8001230 <HD44780_SetCursor>
	HD44780_PrintStr(displayTargetTemp);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fd55 	bl	8001384 <HD44780_PrintStr>
}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08005a74 	.word	0x08005a74
 80018e8:	08005a64 	.word	0x08005a64
 80018ec:	08005a6c 	.word	0x08005a6c

080018f0 <displayMeunHandler>:

//To control what should displaying
void displayMeunHandler(MEUN_TypeDef *meun) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	//*_*hard code update state to Ldisplay something

	if (meun->meunNeedUpdate) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <displayMeunHandler+0x4a>
		meun->meunNeedUpdate = 1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		HD44780_Clear();
 8001906:	f7ff fc7d 	bl	8001204 <HD44780_Clear>
		switch (meun->meunIndex) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7d1b      	ldrb	r3, [r3, #20]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d00e      	beq.n	8001930 <displayMeunHandler+0x40>
 8001912:	2b02      	cmp	r3, #2
 8001914:	dc10      	bgt.n	8001938 <displayMeunHandler+0x48>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <displayMeunHandler+0x30>
 800191a:	2b01      	cmp	r3, #1
 800191c:	d004      	beq.n	8001928 <displayMeunHandler+0x38>
			break;
		case Heating:
			heating_page(meun);
			break;
		default:
			return;
 800191e:	e00b      	b.n	8001938 <displayMeunHandler+0x48>
			startScreeen(meun);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff3d 	bl	80017a0 <startScreeen>
			break;
 8001926:	e008      	b.n	800193a <displayMeunHandler+0x4a>
			standby_page(meun);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff51 	bl	80017d0 <standby_page>
			break;
 800192e:	e004      	b.n	800193a <displayMeunHandler+0x4a>
			heating_page(meun);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff95 	bl	8001860 <heating_page>
			break;
 8001936:	e000      	b.n	800193a <displayMeunHandler+0x4a>
			return;
 8001938:	bf00      	nop
		}
	}
}
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <selectMeunHandler>:

void selectMeunHandler(MEUN_TypeDef *meun, ENCODER_TypeDef *encoder) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	/*
	 * Standby
	 * Start Heating
	 */
	//which meun selected
	if (encoderState(encoder) == 2) {
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff fad8 	bl	8000f00 <encoderState>
 8001950:	4603      	mov	r3, r0
 8001952:	2b02      	cmp	r3, #2
 8001954:	d106      	bne.n	8001964 <selectMeunHandler+0x24>

		meun->targetTemp++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	891b      	ldrh	r3, [r3, #8]
 800195a:	3301      	adds	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	811a      	strh	r2, [r3, #8]
 8001962:	e00b      	b.n	800197c <selectMeunHandler+0x3c>
	} else if (encoderState(encoder) == 1) {
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f7ff facb 	bl	8000f00 <encoderState>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <selectMeunHandler+0x3c>

		meun->targetTemp--;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	891b      	ldrh	r3, [r3, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	811a      	strh	r2, [r3, #8]
	}

	if (meun->targetTemp > MAX_TEMP) {
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	891b      	ldrh	r3, [r3, #8]
 8001980:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001984:	d904      	bls.n	8001990 <selectMeunHandler+0x50>
		meun->targetTemp = MAX_TEMP;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800198c:	811a      	strh	r2, [r3, #8]
 800198e:	e006      	b.n	800199e <selectMeunHandler+0x5e>
	} else if (meun->targetTemp < MIN_TEMP) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	891b      	ldrh	r3, [r3, #8]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d802      	bhi.n	800199e <selectMeunHandler+0x5e>
		meun->targetTemp = MIN_TEMP;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	220a      	movs	r2, #10
 800199c:	811a      	strh	r2, [r3, #8]
	}

	if (btnState(encoder)) {
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f7ff fa82 	bl	8000ea8 <btnState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d014      	beq.n	80019d4 <selectMeunHandler+0x94>
		switch (meun->meunIndex) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d1b      	ldrb	r3, [r3, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d002      	beq.n	80019b8 <selectMeunHandler+0x78>
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d007      	beq.n	80019c6 <selectMeunHandler+0x86>
		case (Heating):
			meun->meunIndex = Standby;
			meun->meunNeedUpdate = 1;
			break;
		default:
			break;
 80019b6:	e00d      	b.n	80019d4 <selectMeunHandler+0x94>
			meun->meunIndex = Heating;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	751a      	strb	r2, [r3, #20]
			meun->meunNeedUpdate = 1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
			break;
 80019c4:	e006      	b.n	80019d4 <selectMeunHandler+0x94>
			meun->meunIndex = Standby;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	751a      	strb	r2, [r3, #20]
			meun->meunNeedUpdate = 1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
			break;
 80019d2:	bf00      	nop
		}
	}
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_MspInit+0x5c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_MspInit+0x5c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_MspInit+0x60>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_MspInit+0x60>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 fa49 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <DMA1_Channel1_IRQHandler+0x10>)
 8001a96:	f001 fa7f 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000017c 	.word	0x2000017c

08001aa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <ADC1_2_IRQHandler+0x10>)
 8001aaa:	f000 fc2d 	bl	8002308 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000014c 	.word	0x2000014c

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f003 f967 	bl	8004d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000280 	.word	0x20000280

08001acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001afe:	228f      	movs	r2, #143	; 0x8f
 8001b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b0a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b1e:	f002 fe73 	bl	8004808 <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b28:	f7ff fe1e 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b3a:	f003 fadb 	bl	80050f4 <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b44:	f7ff fe10 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM2_Init+0x94>)
 8001b56:	f003 fe69 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b60:	f7ff fe02 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000280 	.word	0x20000280

08001b70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <MX_TIM3_Init+0xc4>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bb8:	481d      	ldr	r0, [pc, #116]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001bba:	f002 fec7 	bl	800494c <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f7ff fdd0 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4816      	ldr	r0, [pc, #88]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001bd8:	f003 fe28 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001be2:	f7ff fdc1 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	2360      	movs	r3, #96	; 0x60
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001bfe:	f003 f9b7 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c08:	f7ff fdae 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001c14:	f003 f9ac 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c1e:	f7ff fda3 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <MX_TIM3_Init+0xc0>)
 8001c24:	f000 f8dc 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200002c8 	.word	0x200002c8
 8001c34:	40000400 	.word	0x40000400

08001c38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 febc 	bl	80059c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <MX_TIM4_Init+0xa4>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c68:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001c6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001ca6:	f002 ff43 	bl	8004b30 <HAL_TIM_Encoder_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f7ff fd5a 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM4_Init+0xa0>)
 8001cc2:	f003 fdb3 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ccc:	f7ff fd4c 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000310 	.word	0x20000310
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d113      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_TIM_Base_MspInit+0x44>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_TIM_Base_MspInit+0x44>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_TIM_Base_MspInit+0x44>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	201c      	movs	r0, #28
 8001d10:	f001 f851 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d14:	201c      	movs	r0, #28
 8001d16:	f001 f86a 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_TIM_PWM_MspInit+0x34>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10b      	bne.n	8001d52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_TIM_PWM_MspInit+0x38>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_TIM_PWM_MspInit+0x38>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_TIM_PWM_MspInit+0x38>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d123      	bne.n	8001dcc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	61d3      	str	r3, [r2, #28]
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001dc8:	f001 fa1a 	bl	8003200 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010c00 	.word	0x40010c00

08001de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_TIM_MspPostInit+0x58>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d117      	bne.n	8001e30 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_TIM_MspPostInit+0x5c>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_TIM_MspPostInit+0x5c>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_TIM_MspPostInit+0x5c>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = FAN_Pin|HEATER_Pin;
 8001e18:	23c0      	movs	r3, #192	; 0xc0
 8001e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_TIM_MspPostInit+0x60>)
 8001e2c:	f001 f9e8 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800

08001e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff fe42 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e4a:	490c      	ldr	r1, [pc, #48]	; (8001e7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e60:	4c09      	ldr	r4, [pc, #36]	; (8001e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f003 fdb1 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e72:	f7ff fb73 	bl	800155c <main>
  bx lr
 8001e76:	4770      	bx	lr
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001e80:	08005adc 	.word	0x08005adc
  ldr r2, =_sbss
 8001e84:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001e88:	2000035c 	.word	0x2000035c

08001e8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <CAN1_RX1_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x28>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x28>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 ff7d 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd96 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ff95 	bl	8002e0a <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 ff5d 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000124 	.word	0x20000124
 8001f14:	2000012c 	.word	0x2000012c
 8001f18:	20000128 	.word	0x20000128

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_IncTick+0x20>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	2000012c 	.word	0x2000012c
 8001f3c:	20000358 	.word	0x20000358

08001f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_GetTick+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000358 	.word	0x20000358

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffe0 	bl	8001f40 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000012c 	.word	0x2000012c

08001f9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0be      	b.n	800213c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fed6 	bl	8000d8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fbc7 	bl	8002774 <ADC_ConversionStop_Disable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8099 	bne.w	800212a <HAL_ADC_Init+0x18e>
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 8095 	bne.w	800212a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	f043 0202 	orr.w	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800201c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002024:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4313      	orrs	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d003      	beq.n	800203e <HAL_ADC_Init+0xa2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_ADC_Init+0xa8>
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	e000      	b.n	8002046 <HAL_ADC_Init+0xaa>
 8002044:	2300      	movs	r3, #0
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7d1b      	ldrb	r3, [r3, #20]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d119      	bne.n	8002088 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	3b01      	subs	r3, #1
 8002062:	035a      	lsls	r2, r3, #13
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e00b      	b.n	8002088 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_ADC_Init+0x1a8>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_Init+0x126>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d104      	bne.n	80020cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	430a      	orrs	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_ADC_Init+0x1ac>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d10b      	bne.n	8002108 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002106:	e018      	b.n	800213a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f023 0312 	bic.w	r3, r3, #18
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	ffe1f7fd 	.word	0xffe1f7fd
 8002148:	ff1f0efe 	.word	0xff1f0efe

0800214c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_ADC_Start_DMA+0x1a8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d004      	beq.n	8002170 <HAL_ADC_Start_DMA+0x24>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_ADC_Start_DMA+0x1ac>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d106      	bne.n	800217e <HAL_ADC_Start_DMA+0x32>
 8002170:	4b60      	ldr	r3, [pc, #384]	; (80022f4 <HAL_ADC_Start_DMA+0x1a8>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 80b3 	bne.w	80022e4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_Start_DMA+0x40>
 8002188:	2302      	movs	r3, #2
 800218a:	e0ae      	b.n	80022ea <HAL_ADC_Start_DMA+0x19e>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fa93 	bl	80026c0 <ADC_Enable>
 800219a:	4603      	mov	r3, r0
 800219c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 809a 	bne.w	80022da <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_ADC_Start_DMA+0x1ac>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_Start_DMA+0x84>
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_ADC_Start_DMA+0x1a8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d115      	bne.n	80021fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d026      	beq.n	8002238 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021fa:	e01d      	b.n	8002238 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <HAL_ADC_Start_DMA+0x1a8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_ADC_Start_DMA+0xd0>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_ADC_Start_DMA+0x1ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d10d      	bne.n	8002238 <HAL_ADC_Start_DMA+0xec>
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_ADC_Start_DMA+0x1a8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002230:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f023 0206 	bic.w	r2, r3, #6
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002250:	e002      	b.n	8002258 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_ADC_Start_DMA+0x1b0>)
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a24      	ldr	r2, [pc, #144]	; (8002300 <HAL_ADC_Start_DMA+0x1b4>)
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_ADC_Start_DMA+0x1b8>)
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0202 	mvn.w	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002290:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a18      	ldr	r0, [r3, #32]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	334c      	adds	r3, #76	; 0x4c
 800229c:	4619      	mov	r1, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f000 fe19 	bl	8002ed8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022b4:	d108      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022c4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022c6:	e00f      	b.n	80022e8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022d6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022d8:	e006      	b.n	80022e8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80022e2:	e001      	b.n	80022e8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012400 	.word	0x40012400
 80022f8:	40012800 	.word	0x40012800
 80022fc:	080027f7 	.word	0x080027f7
 8002300:	08002873 	.word	0x08002873
 8002304:	0800288f 	.word	0x0800288f

08002308 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03e      	beq.n	80023a8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d039      	beq.n	80023a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002356:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800235a:	d11d      	bne.n	8002398 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002360:	2b00      	cmp	r3, #0
 8002362:	d119      	bne.n	8002398 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0220 	bic.w	r2, r2, #32
 8002372:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f874 	bl	8002486 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0212 	mvn.w	r2, #18
 80023a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d04d      	beq.n	800244e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d048      	beq.n	800244e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80023de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80023e2:	d012      	beq.n	800240a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d125      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002400:	d11d      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002418:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa3f 	bl	80028c2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 020c 	mvn.w	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f81b 	bl	80024aa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x20>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e0dc      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1da>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d81c      	bhi.n	800253a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	221f      	movs	r2, #31
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b05      	subs	r3, #5
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
 8002538:	e03c      	b.n	80025b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d81c      	bhi.n	800257c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	; 0x23
 8002554:	221f      	movs	r2, #31
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	4019      	ands	r1, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b23      	subs	r3, #35	; 0x23
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
 800257a:	e01b      	b.n	80025b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b41      	subs	r3, #65	; 0x41
 800258e:	221f      	movs	r2, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	4019      	ands	r1, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	; 0x41
 80025a8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d91c      	bls.n	80025f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68d9      	ldr	r1, [r3, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4019      	ands	r1, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6898      	ldr	r0, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	3b1e      	subs	r3, #30
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	e019      	b.n	800262a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	2207      	movs	r2, #7
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	4019      	ands	r1, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6898      	ldr	r0, [r3, #8]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b10      	cmp	r3, #16
 8002630:	d003      	beq.n	800263a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002636:	2b11      	cmp	r3, #17
 8002638:	d132      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d125      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d126      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002660:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b10      	cmp	r3, #16
 8002668:	d11a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9a      	lsrs	r2, r3, #18
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002680:	e002      	b.n	8002688 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x1b2>
 800268e:	e007      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40012400 	.word	0x40012400
 80026b8:	20000124 	.word	0x20000124
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d040      	beq.n	8002760 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <ADC_Enable+0xac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <ADC_Enable+0xb0>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026fc:	e002      	b.n	8002704 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800270a:	f7ff fc19 	bl	8001f40 <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002710:	e01f      	b.n	8002752 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002712:	f7ff fc15 	bl	8001f40 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d918      	bls.n	8002752 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d011      	beq.n	8002752 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d1d8      	bne.n	8002712 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000124 	.word	0x20000124
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d12e      	bne.n	80027ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800279e:	f7ff fbcf 	bl	8001f40 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a4:	e01b      	b.n	80027de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a6:	f7ff fbcb 	bl	8001f40 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d914      	bls.n	80027de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10d      	bne.n	80027de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d0dc      	beq.n	80027a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800280c:	2b00      	cmp	r3, #0
 800280e:	d127      	bne.n	8002860 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002826:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800282a:	d115      	bne.n	8002858 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fe14 	bl	8002486 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800285e:	e004      	b.n	800286a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fe09 	bl	8002498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fe01 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80028d4:	b490      	push	{r4, r7}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e17d      	b.n	8002bf0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10c      	bne.n	8002926 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	0d9b      	lsrs	r3, r3, #22
 8002914:	059b      	lsls	r3, r3, #22
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	03d1      	lsls	r1, r2, #15
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	6393      	str	r3, [r2, #56]	; 0x38
 8002924:	e04f      	b.n	80029c6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e046      	b.n	80029c6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d82a      	bhi.n	800299a <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	330f      	adds	r3, #15
 800295c:	221f      	movs	r2, #31
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002966:	43db      	mvns	r3, r3
 8002968:	4019      	ands	r1, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	3b01      	subs	r3, #1
 8002970:	0518      	lsls	r0, r3, #20
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681c      	ldr	r4, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	330f      	adds	r3, #15
 8002988:	fa04 f303 	lsl.w	r3, r4, r3
 800298c:	ea40 0203 	orr.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
 8002998:	e015      	b.n	80029c6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	1ad2      	subs	r2, r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	330f      	adds	r3, #15
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80029bc:	43da      	mvns	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	400a      	ands	r2, r1
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00c      	beq.n	80029ee <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6991      	ldr	r1, [r2, #24]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	430b      	orrs	r3, r1
 80029ec:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	7d5b      	ldrb	r3, [r3, #21]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d115      	bne.n	8002a22 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80029fe:	d108      	bne.n	8002a12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	e007      	b.n	8002a22 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	7d1b      	ldrb	r3, [r3, #20]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d114      	bne.n	8002a54 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	7d5b      	ldrb	r3, [r3, #21]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	e007      	b.n	8002a54 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	d91c      	bls.n	8002a96 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b1e      	subs	r3, #30
 8002a6e:	2207      	movs	r2, #7
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4019      	ands	r1, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6898      	ldr	r0, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	3b1e      	subs	r3, #30
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e019      	b.n	8002aca <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4019      	ands	r1, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6898      	ldr	r0, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d003      	beq.n	8002ada <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d107      	bne.n	8002aea <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ae8:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d022      	beq.n	8002b38 <HAL_ADCEx_InjectedConfigChannel+0x264>
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d82e      	bhi.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d002      	beq.n	8002b00 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d00e      	beq.n	8002b1c <HAL_ADCEx_InjectedConfigChannel+0x248>
 8002afe:	e029      	b.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b0a:	f023 030f 	bic.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	68d1      	ldr	r1, [r2, #12]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002b1a:	e029      	b.n	8002b70 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b26:	f023 030f 	bic.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68d1      	ldr	r1, [r2, #12]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	430b      	orrs	r3, r1
 8002b34:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002b36:	e01b      	b.n	8002b70 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b42:	f023 030f 	bic.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68d1      	ldr	r1, [r2, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8002b52:	e00d      	b.n	8002b70 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b5e:	f023 030f 	bic.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68d1      	ldr	r1, [r2, #12]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8002b6e:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d003      	beq.n	8002b80 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7c:	2b11      	cmp	r3, #17
 8002b7e:	d132      	bne.n	8002be6 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d125      	bne.n	8002bd6 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d126      	bne.n	8002be6 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ba6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d11a      	bne.n	8002be6 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9a      	lsrs	r2, r3, #18
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc6:	e002      	b.n	8002bce <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8002bd4:	e007      	b.n	8002be6 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f043 0220 	orr.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc90      	pop	{r4, r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012400 	.word	0x40012400
 8002c00:	20000124 	.word	0x20000124
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <__NVIC_EnableIRQ+0x34>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff90 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff2d 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff42 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff90 	bl	8002cf8 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5f 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff35 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e043      	b.n	8002ec2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_DMA_Init+0xa8>)
 8002e42:	4413      	add	r3, r2
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <HAL_DMA_Init+0xac>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	009a      	lsls	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_DMA_Init+0xb0>)
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	bffdfff8 	.word	0xbffdfff8
 8002ed0:	cccccccd 	.word	0xcccccccd
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Start_IT+0x20>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e04b      	b.n	8002f90 <HAL_DMA_Start_IT+0xb8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d13a      	bne.n	8002f82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f937 	bl	80031a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 020e 	orr.w	r2, r2, #14
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e00f      	b.n	8002f70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 020a 	orr.w	r2, r2, #10
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e005      	b.n	8002f8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d04f      	beq.n	8003060 <HAL_DMA_IRQHandler+0xc8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04a      	beq.n	8003060 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0204 	bic.w	r2, r2, #4
 8002fe6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a66      	ldr	r2, [pc, #408]	; (8003188 <HAL_DMA_IRQHandler+0x1f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d029      	beq.n	8003046 <HAL_DMA_IRQHandler+0xae>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_DMA_IRQHandler+0x1f4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_DMA_IRQHandler+0xaa>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_DMA_IRQHandler+0x1f8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01a      	beq.n	800303c <HAL_DMA_IRQHandler+0xa4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a62      	ldr	r2, [pc, #392]	; (8003194 <HAL_DMA_IRQHandler+0x1fc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d012      	beq.n	8003036 <HAL_DMA_IRQHandler+0x9e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a60      	ldr	r2, [pc, #384]	; (8003198 <HAL_DMA_IRQHandler+0x200>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00a      	beq.n	8003030 <HAL_DMA_IRQHandler+0x98>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a5f      	ldr	r2, [pc, #380]	; (800319c <HAL_DMA_IRQHandler+0x204>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d102      	bne.n	800302a <HAL_DMA_IRQHandler+0x92>
 8003024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003028:	e00e      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 800302a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800302e:	e00b      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 8003030:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003034:	e008      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 8003036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303a:	e005      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 800303c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003040:	e002      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	e000      	b.n	8003048 <HAL_DMA_IRQHandler+0xb0>
 8003046:	2304      	movs	r3, #4
 8003048:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_DMA_IRQHandler+0x208>)
 800304a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8094 	beq.w	800317e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800305e:	e08e      	b.n	800317e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2202      	movs	r2, #2
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d056      	beq.n	800311e <HAL_DMA_IRQHandler+0x186>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d051      	beq.n	800311e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 020a 	bic.w	r2, r2, #10
 8003096:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a38      	ldr	r2, [pc, #224]	; (8003188 <HAL_DMA_IRQHandler+0x1f0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d029      	beq.n	80030fe <HAL_DMA_IRQHandler+0x166>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_DMA_IRQHandler+0x1f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_IRQHandler+0x162>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a35      	ldr	r2, [pc, #212]	; (8003190 <HAL_DMA_IRQHandler+0x1f8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01a      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x15c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_DMA_IRQHandler+0x1fc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d012      	beq.n	80030ee <HAL_DMA_IRQHandler+0x156>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a32      	ldr	r2, [pc, #200]	; (8003198 <HAL_DMA_IRQHandler+0x200>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x150>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_DMA_IRQHandler+0x204>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x14a>
 80030dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030e0:	e00e      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e6:	e00b      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ec:	e008      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f2:	e005      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f8:	e002      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030fa:	2320      	movs	r3, #32
 80030fc:	e000      	b.n	8003100 <HAL_DMA_IRQHandler+0x168>
 80030fe:	2302      	movs	r3, #2
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_DMA_IRQHandler+0x208>)
 8003102:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d034      	beq.n	800317e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800311c:	e02f      	b.n	800317e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2208      	movs	r2, #8
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d028      	beq.n	8003180 <HAL_DMA_IRQHandler+0x1e8>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d023      	beq.n	8003180 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    }
  }
  return;
 800317e:	bf00      	nop
 8003180:	bf00      	nop
}
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40020008 	.word	0x40020008
 800318c:	4002001c 	.word	0x4002001c
 8003190:	40020030 	.word	0x40020030
 8003194:	40020044 	.word	0x40020044
 8003198:	40020058 	.word	0x40020058
 800319c:	4002006c 	.word	0x4002006c
 80031a0:	40020000 	.word	0x40020000

080031a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d108      	bne.n	80031e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031e2:	e007      	b.n	80031f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b08b      	sub	sp, #44	; 0x2c
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	e169      	b.n	80034e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003214:	2201      	movs	r2, #1
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 8158 	bne.w	80034e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a9a      	ldr	r2, [pc, #616]	; (80034a0 <HAL_GPIO_Init+0x2a0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d05e      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 800323c:	4a98      	ldr	r2, [pc, #608]	; (80034a0 <HAL_GPIO_Init+0x2a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d875      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003242:	4a98      	ldr	r2, [pc, #608]	; (80034a4 <HAL_GPIO_Init+0x2a4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d058      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003248:	4a96      	ldr	r2, [pc, #600]	; (80034a4 <HAL_GPIO_Init+0x2a4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d86f      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800324e:	4a96      	ldr	r2, [pc, #600]	; (80034a8 <HAL_GPIO_Init+0x2a8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d052      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003254:	4a94      	ldr	r2, [pc, #592]	; (80034a8 <HAL_GPIO_Init+0x2a8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d869      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800325a:	4a94      	ldr	r2, [pc, #592]	; (80034ac <HAL_GPIO_Init+0x2ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04c      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003260:	4a92      	ldr	r2, [pc, #584]	; (80034ac <HAL_GPIO_Init+0x2ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d863      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003266:	4a92      	ldr	r2, [pc, #584]	; (80034b0 <HAL_GPIO_Init+0x2b0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d046      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 800326c:	4a90      	ldr	r2, [pc, #576]	; (80034b0 <HAL_GPIO_Init+0x2b0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d85d      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003272:	2b12      	cmp	r3, #18
 8003274:	d82a      	bhi.n	80032cc <HAL_GPIO_Init+0xcc>
 8003276:	2b12      	cmp	r3, #18
 8003278:	d859      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_GPIO_Init+0x80>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032fb 	.word	0x080032fb
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080032e7 	.word	0x080032e7
 800328c:	08003329 	.word	0x08003329
 8003290:	0800332f 	.word	0x0800332f
 8003294:	0800332f 	.word	0x0800332f
 8003298:	0800332f 	.word	0x0800332f
 800329c:	0800332f 	.word	0x0800332f
 80032a0:	0800332f 	.word	0x0800332f
 80032a4:	0800332f 	.word	0x0800332f
 80032a8:	0800332f 	.word	0x0800332f
 80032ac:	0800332f 	.word	0x0800332f
 80032b0:	0800332f 	.word	0x0800332f
 80032b4:	0800332f 	.word	0x0800332f
 80032b8:	0800332f 	.word	0x0800332f
 80032bc:	0800332f 	.word	0x0800332f
 80032c0:	0800332f 	.word	0x0800332f
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	4a79      	ldr	r2, [pc, #484]	; (80034b4 <HAL_GPIO_Init+0x2b4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032d2:	e02c      	b.n	800332e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	623b      	str	r3, [r7, #32]
          break;
 80032da:	e029      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	623b      	str	r3, [r7, #32]
          break;
 80032e4:	e024      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	3308      	adds	r3, #8
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e01f      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	330c      	adds	r3, #12
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e01a      	b.n	8003330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003302:	2304      	movs	r3, #4
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e013      	b.n	8003330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003310:	2308      	movs	r3, #8
 8003312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	611a      	str	r2, [r3, #16]
          break;
 800331a:	e009      	b.n	8003330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800331c:	2308      	movs	r3, #8
 800331e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	615a      	str	r2, [r3, #20]
          break;
 8003326:	e003      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
          break;
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x130>
          break;
 800332e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2bff      	cmp	r3, #255	; 0xff
 8003334:	d801      	bhi.n	800333a <HAL_GPIO_Init+0x13a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	e001      	b.n	800333e <HAL_GPIO_Init+0x13e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2bff      	cmp	r3, #255	; 0xff
 8003344:	d802      	bhi.n	800334c <HAL_GPIO_Init+0x14c>
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	e002      	b.n	8003352 <HAL_GPIO_Init+0x152>
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	3b08      	subs	r3, #8
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	210f      	movs	r1, #15
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80b1 	beq.w	80034e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003398:	4a48      	ldr	r2, [pc, #288]	; (80034bc <HAL_GPIO_Init+0x2bc>)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <HAL_GPIO_Init+0x2c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_GPIO_Init+0x1ec>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_GPIO_Init+0x2c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00d      	beq.n	80033e8 <HAL_GPIO_Init+0x1e8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <HAL_GPIO_Init+0x2c8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x1e4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3d      	ldr	r2, [pc, #244]	; (80034cc <HAL_GPIO_Init+0x2cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_GPIO_Init+0x1e0>
 80033dc:	2303      	movs	r3, #3
 80033de:	e006      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e004      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	f002 0203 	and.w	r2, r2, #3
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033fe:	492f      	ldr	r1, [pc, #188]	; (80034bc <HAL_GPIO_Init+0x2bc>)
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	492c      	ldr	r1, [pc, #176]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	4928      	ldr	r1, [pc, #160]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003430:	4013      	ands	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4922      	ldr	r1, [pc, #136]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	60cb      	str	r3, [r1, #12]
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	43db      	mvns	r3, r3
 8003456:	491e      	ldr	r1, [pc, #120]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003458:	4013      	ands	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4918      	ldr	r1, [pc, #96]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	43db      	mvns	r3, r3
 800347e:	4914      	ldr	r1, [pc, #80]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003480:	4013      	ands	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e021      	b.n	80034e2 <HAL_GPIO_Init+0x2e2>
 800349e:	bf00      	nop
 80034a0:	10320000 	.word	0x10320000
 80034a4:	10310000 	.word	0x10310000
 80034a8:	10220000 	.word	0x10220000
 80034ac:	10210000 	.word	0x10210000
 80034b0:	10120000 	.word	0x10120000
 80034b4:	10110000 	.word	0x10110000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40010800 	.word	0x40010800
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40011000 	.word	0x40011000
 80034cc:	40011400 	.word	0x40011400
 80034d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_GPIO_Init+0x304>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	43db      	mvns	r3, r3
 80034dc:	4909      	ldr	r1, [pc, #36]	; (8003504 <HAL_GPIO_Init+0x304>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f ae8e 	bne.w	8003214 <HAL_GPIO_Init+0x14>
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	372c      	adds	r7, #44	; 0x2c
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43d9      	mvns	r1, r3
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	400b      	ands	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
	...

0800356c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e12b      	b.n	80037d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fd62 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035d0:	f001 f832 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 80035d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a81      	ldr	r2, [pc, #516]	; (80037e0 <HAL_I2C_Init+0x274>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d807      	bhi.n	80035f0 <HAL_I2C_Init+0x84>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a80      	ldr	r2, [pc, #512]	; (80037e4 <HAL_I2C_Init+0x278>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e006      	b.n	80035fe <HAL_I2C_Init+0x92>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a7d      	ldr	r2, [pc, #500]	; (80037e8 <HAL_I2C_Init+0x27c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0e7      	b.n	80037d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a78      	ldr	r2, [pc, #480]	; (80037ec <HAL_I2C_Init+0x280>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0c9b      	lsrs	r3, r3, #18
 8003610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a6a      	ldr	r2, [pc, #424]	; (80037e0 <HAL_I2C_Init+0x274>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <HAL_I2C_Init+0xd4>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	3301      	adds	r3, #1
 800363e:	e009      	b.n	8003654 <HAL_I2C_Init+0xe8>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	4a69      	ldr	r2, [pc, #420]	; (80037f0 <HAL_I2C_Init+0x284>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	3301      	adds	r3, #1
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	430b      	orrs	r3, r1
 800365a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	495c      	ldr	r1, [pc, #368]	; (80037e0 <HAL_I2C_Init+0x274>)
 8003670:	428b      	cmp	r3, r1
 8003672:	d819      	bhi.n	80036a8 <HAL_I2C_Init+0x13c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e59      	subs	r1, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003688:	400b      	ands	r3, r1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_I2C_Init+0x138>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e59      	subs	r1, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fbb1 f3f3 	udiv	r3, r1, r3
 800369c:	3301      	adds	r3, #1
 800369e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a2:	e051      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 80036a4:	2304      	movs	r3, #4
 80036a6:	e04f      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <HAL_I2C_Init+0x168>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e012      	b.n	80036fa <HAL_I2C_Init+0x18e>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Init+0x196>
 80036fe:	2301      	movs	r3, #1
 8003700:	e022      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <HAL_I2C_Init+0x1bc>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e58      	subs	r0, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	440b      	add	r3, r1
 8003718:	fbb0 f3f3 	udiv	r3, r0, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003726:	e00f      	b.n	8003748 <HAL_I2C_Init+0x1dc>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	0099      	lsls	r1, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6809      	ldr	r1, [r1, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6911      	ldr	r1, [r2, #16]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	430b      	orrs	r3, r1
 800378a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	000186a0 	.word	0x000186a0
 80037e4:	001e847f 	.word	0x001e847f
 80037e8:	003d08ff 	.word	0x003d08ff
 80037ec:	431bde83 	.word	0x431bde83
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	817b      	strh	r3, [r7, #10]
 8003804:	4613      	mov	r3, r2
 8003806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7fe fb9a 	bl	8001f40 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	f040 80e0 	bne.w	80039dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2319      	movs	r3, #25
 8003822:	2201      	movs	r2, #1
 8003824:	4970      	ldr	r1, [pc, #448]	; (80039e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f964 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	e0d3      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x50>
 8003840:	2302      	movs	r3, #2
 8003842:	e0cc      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d007      	beq.n	800386a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2210      	movs	r2, #16
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	893a      	ldrh	r2, [r7, #8]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_I2C_Master_Transmit+0x1f8>)
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f89c 	bl	80039f0 <I2C_MasterRequestWrite>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e08d      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d8:	e066      	b.n	80039a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fa22 	bl	8003d28 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06b      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <HAL_I2C_Master_Transmit+0x188>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	d017      	beq.n	800397c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	6a39      	ldr	r1, [r7, #32]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa19 	bl	8003db8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2b04      	cmp	r3, #4
 8003992:	d107      	bne.n	80039a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01a      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d194      	bne.n	80038da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	00100002 	.word	0x00100002
 80039ec:	ffff0000 	.word	0xffff0000

080039f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	460b      	mov	r3, r1
 80039fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d006      	beq.n	8003a1a <I2C_MasterRequestWrite+0x2a>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d003      	beq.n	8003a1a <I2C_MasterRequestWrite+0x2a>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a18:	d108      	bne.n	8003a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e00b      	b.n	8003a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	2b12      	cmp	r3, #18
 8003a32:	d107      	bne.n	8003a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f84f 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6a:	d103      	bne.n	8003a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e035      	b.n	8003ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a80:	d108      	bne.n	8003a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a82:	897b      	ldrh	r3, [r7, #10]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a90:	611a      	str	r2, [r3, #16]
 8003a92:	e01b      	b.n	8003acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a94:	897b      	ldrh	r3, [r7, #10]
 8003a96:	11db      	asrs	r3, r3, #7
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0306 	and.w	r3, r3, #6
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f063 030f 	orn	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <I2C_MasterRequestWrite+0xfc>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f898 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e010      	b.n	8003ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ac2:	897b      	ldrh	r3, [r7, #10]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4907      	ldr	r1, [pc, #28]	; (8003af0 <I2C_MasterRequestWrite+0x100>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f888 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010008 	.word	0x00010008
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	e048      	b.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d044      	beq.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fa17 	bl	8001f40 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d139      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10d      	bne.n	8003b4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	e00c      	b.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d116      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e023      	b.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10d      	bne.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	e00c      	b.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d093      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf6:	e071      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c06:	d123      	bne.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e067      	b.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d041      	beq.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fe f972 	bl	8001f40 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d136      	bne.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10c      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e00b      	b.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e021      	b.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10c      	bne.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e00b      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af6d 	bne.w	8003bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d34:	e034      	b.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f886 	bl	8003e48 <I2C_IsAcknowledgeFailed>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d028      	beq.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe f8f7 	bl	8001f40 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11d      	bne.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d1c3      	bne.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f83e 	bl	8003e48 <I2C_IsAcknowledgeFailed>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e034      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d028      	beq.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fe f8af 	bl	8001f40 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11d      	bne.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d016      	beq.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d1c3      	bne.n	8003dc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d11b      	bne.n	8003e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e272      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8087 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec4:	4b92      	ldr	r3, [pc, #584]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d00c      	beq.n	8003eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed0:	4b8f      	ldr	r3, [pc, #572]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d112      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5e>
 8003edc:	4b8c      	ldr	r3, [pc, #560]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4b89      	ldr	r3, [pc, #548]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d06c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x12c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d168      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e24c      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x76>
 8003f0c:	4b80      	ldr	r3, [pc, #512]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a7f      	ldr	r2, [pc, #508]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0xd4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x98>
 8003f22:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b78      	ldr	r3, [pc, #480]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a77      	ldr	r2, [pc, #476]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xd4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0xbc>
 8003f46:	4b72      	ldr	r3, [pc, #456]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a71      	ldr	r2, [pc, #452]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b6f      	ldr	r3, [pc, #444]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6e      	ldr	r2, [pc, #440]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xd4>
 8003f60:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a67      	ldr	r2, [pc, #412]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fd ffde 	bl	8001f40 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd ffda 	bl	8001f40 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e200      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xe4>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd ffca 	bl	8001f40 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd ffc6 	bl	8001f40 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1ec      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x10c>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fde:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fea:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x18c>
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x176>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1c0      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4939      	ldr	r1, [pc, #228]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b36      	ldr	r3, [pc, #216]	; (8004114 <HAL_RCC_OscConfig+0x270>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd ff7f 	bl	8001f40 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004046:	f7fd ff7b 	bl	8001f40 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1a1      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4927      	ldr	r1, [pc, #156]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCC_OscConfig+0x270>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fd ff5e 	bl	8001f40 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004088:	f7fd ff5a 	bl	8001f40 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e180      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03a      	beq.n	8004128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d019      	beq.n	80040ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7fd ff3e 	bl	8001f40 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fd ff3a 	bl	8001f40 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e160      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f000 faba 	bl	8004660 <RCC_Delay>
 80040ec:	e01c      	b.n	8004128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fd ff24 	bl	8001f40 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fa:	e00f      	b.n	800411c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd ff20 	bl	8001f40 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d908      	bls.n	800411c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e146      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	42420000 	.word	0x42420000
 8004118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b92      	ldr	r3, [pc, #584]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e9      	bne.n	80040fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a6 	beq.w	8004282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b88      	ldr	r3, [pc, #544]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4a87      	ldr	r2, [pc, #540]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	61d3      	str	r3, [r2, #28]
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004162:	4b82      	ldr	r3, [pc, #520]	; (800436c <HAL_RCC_OscConfig+0x4c8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d118      	bne.n	80041a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416e:	4b7f      	ldr	r3, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x4c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7e      	ldr	r2, [pc, #504]	; (800436c <HAL_RCC_OscConfig+0x4c8>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417a:	f7fd fee1 	bl	8001f40 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fd fedd 	bl	8001f40 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b64      	cmp	r3, #100	; 0x64
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e103      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	4b75      	ldr	r3, [pc, #468]	; (800436c <HAL_RCC_OscConfig+0x4c8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x312>
 80041a8:	4b6f      	ldr	r3, [pc, #444]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a6e      	ldr	r2, [pc, #440]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e02d      	b.n	8004212 <HAL_RCC_OscConfig+0x36e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x334>
 80041be:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4a69      	ldr	r2, [pc, #420]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6213      	str	r3, [r2, #32]
 80041ca:	4b67      	ldr	r3, [pc, #412]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4a66      	ldr	r2, [pc, #408]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	6213      	str	r3, [r2, #32]
 80041d6:	e01c      	b.n	8004212 <HAL_RCC_OscConfig+0x36e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d10c      	bne.n	80041fa <HAL_RCC_OscConfig+0x356>
 80041e0:	4b61      	ldr	r3, [pc, #388]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4a60      	ldr	r2, [pc, #384]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6213      	str	r3, [r2, #32]
 80041ec:	4b5e      	ldr	r3, [pc, #376]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a5d      	ldr	r2, [pc, #372]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	e00b      	b.n	8004212 <HAL_RCC_OscConfig+0x36e>
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4a5a      	ldr	r2, [pc, #360]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	6213      	str	r3, [r2, #32]
 8004206:	4b58      	ldr	r3, [pc, #352]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4a57      	ldr	r2, [pc, #348]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d015      	beq.n	8004246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fd fe91 	bl	8001f40 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fd fe8d 	bl	8001f40 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0b1      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ee      	beq.n	8004222 <HAL_RCC_OscConfig+0x37e>
 8004244:	e014      	b.n	8004270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fd fe7b 	bl	8001f40 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd fe77 	bl	8001f40 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e09b      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004264:	4b40      	ldr	r3, [pc, #256]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4a3b      	ldr	r2, [pc, #236]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8087 	beq.w	800439a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d061      	beq.n	800435c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d146      	bne.n	800432e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_RCC_OscConfig+0x4cc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd fe4b 	bl	8001f40 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd fe47 	bl	8001f40 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e06d      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d108      	bne.n	80042e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4921      	ldr	r1, [pc, #132]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a19      	ldr	r1, [r3, #32]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	430b      	orrs	r3, r1
 80042fa:	491b      	ldr	r1, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4cc>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fd fe1b 	bl	8001f40 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430e:	f7fd fe17 	bl	8001f40 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e03d      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x46a>
 800432c:	e035      	b.n	800439a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_OscConfig+0x4cc>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd fe04 	bl	8001f40 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fe00 	bl	8001f40 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e026      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x498>
 800435a:	e01e      	b.n	800439a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e019      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
 8004370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x500>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	429a      	cmp	r2, r3
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000

080043a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0d0      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d910      	bls.n	80043ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 0207 	bic.w	r2, r3, #7
 80043d2:	4965      	ldr	r1, [pc, #404]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b8      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004404:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800440e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a52      	ldr	r2, [pc, #328]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b50      	ldr	r3, [pc, #320]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	494d      	ldr	r1, [pc, #308]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d040      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07f      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e073      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06b      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4936      	ldr	r1, [pc, #216]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fd fd52 	bl	8001f40 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd fd4e 	bl	8001f40 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e053      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d210      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	4922      	ldr	r1, [pc, #136]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e032      	b.n	800455e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4916      	ldr	r1, [pc, #88]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490e      	ldr	r1, [pc, #56]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004536:	f000 f821 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	490a      	ldr	r1, [pc, #40]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1cc>)
 8004550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fcb0 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40022000 	.word	0x40022000
 800456c:	40021000 	.word	0x40021000
 8004570:	08005a84 	.word	0x08005a84
 8004574:	20000124 	.word	0x20000124
 8004578:	20000128 	.word	0x20000128

0800457c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	2300      	movs	r3, #0
 8004590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <HAL_RCC_GetSysClockFreq+0x94>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x30>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x36>
 80045aa:	e027      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ae:	613b      	str	r3, [r7, #16]
      break;
 80045b0:	e027      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	0c9b      	lsrs	r3, r3, #18
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
 80045be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <HAL_RCC_GetSysClockFreq+0x94>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	0c5b      	lsrs	r3, r3, #17
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_RCC_GetSysClockFreq+0xa0>)
 80045d6:	5cd3      	ldrb	r3, [r2, r3]
 80045d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <HAL_RCC_GetSysClockFreq+0x98>)
 80045de:	fb03 f202 	mul.w	r2, r3, r2
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e004      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	613b      	str	r3, [r7, #16]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetSysClockFreq+0x98>)
 80045fe:	613b      	str	r3, [r7, #16]
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	693b      	ldr	r3, [r7, #16]
}
 8004604:	4618      	mov	r0, r3
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	007a1200 	.word	0x007a1200
 8004618:	08005a9c 	.word	0x08005a9c
 800461c:	08005aac 	.word	0x08005aac
 8004620:	003d0900 	.word	0x003d0900

08004624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <HAL_RCC_GetHCLKFreq+0x10>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	20000124 	.word	0x20000124

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800463c:	f7ff fff2 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK1Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	08005a94 	.word	0x08005a94

08004660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <RCC_Delay+0x34>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <RCC_Delay+0x38>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	0a5b      	lsrs	r3, r3, #9
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800467c:	bf00      	nop
  }
  while (Delay --);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	60fa      	str	r2, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f9      	bne.n	800467c <RCC_Delay+0x1c>
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	20000124 	.word	0x20000124
 8004698:	10624dd3 	.word	0x10624dd3

0800469c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d07d      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4a4b      	ldr	r2, [pc, #300]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	61d3      	str	r3, [r2, #28]
 80046d4:	4b49      	ldr	r3, [pc, #292]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d118      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a42      	ldr	r2, [pc, #264]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fc:	f7fd fc20 	bl	8001f40 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	e008      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004704:	f7fd fc1c 	bl	8001f40 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e06d      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004722:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d02e      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	429a      	cmp	r2, r3
 800473e:	d027      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004740:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004748:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d014      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd fbeb 	bl	8001f40 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd fbe7 	bl	8001f40 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e036      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ee      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4917      	ldr	r1, [pc, #92]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a8:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4a13      	ldr	r2, [pc, #76]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c0:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	490b      	ldr	r1, [pc, #44]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4904      	ldr	r1, [pc, #16]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	40007000 	.word	0x40007000
 8004804:	42420440 	.word	0x42420440

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd fa56 	bl	8001ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fd40 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e03a      	b.n	8004936 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIM_Base_Start_IT+0x98>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x58>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d009      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x58>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <HAL_TIM_Base_Start_IT+0x9c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x58>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <HAL_TIM_Base_Start_IT+0xa0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d111      	bne.n	8004924 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d010      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	e007      	b.n	8004934 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800

0800494c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e041      	b.n	80049e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd f9d8 	bl	8001d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 fc9e 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x24>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e022      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d109      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x3e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e015      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x58>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_PWM_Start+0x6a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e05e      	b.n	8004b1c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x82>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6c:	e013      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x92>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	e00b      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xa2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8c:	e003      	b.n	8004a96 <HAL_TIM_PWM_Start+0xaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fea0 	bl	80057e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_TIM_PWM_Start+0x138>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIM_PWM_Start+0x138>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0xfa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d009      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0xfa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <HAL_TIM_PWM_Start+0x13c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0xfa>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <HAL_TIM_PWM_Start+0x140>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d111      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d010      	beq.n	8004b1a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	e007      	b.n	8004b1a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800

08004b30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e093      	b.n	8004c6c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fd f903 	bl	8001d64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b74:	f023 0307 	bic.w	r3, r3, #7
 8004b78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f000 fba1 	bl	80052cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bd0:	f023 030c 	bic.w	r3, r3, #12
 8004bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	4313      	orrs	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	011a      	lsls	r2, r3, #4
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	031b      	lsls	r3, r3, #12
 8004c00:	4313      	orrs	r3, r2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d110      	bne.n	8004cc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004caa:	7b7b      	ldrb	r3, [r7, #13]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d001      	beq.n	8004cb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e069      	b.n	8004d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	e031      	b.n	8004d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d110      	bne.n	8004cee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ccc:	7bbb      	ldrb	r3, [r7, #14]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d102      	bne.n	8004cd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd2:	7b3b      	ldrb	r3, [r7, #12]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d001      	beq.n	8004cdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e055      	b.n	8004d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	e01d      	b.n	8004d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d108      	bne.n	8004d06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	7b7b      	ldrb	r3, [r7, #13]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d102      	bne.n	8004d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d00:	7b3b      	ldrb	r3, [r7, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e03e      	b.n	8004d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_TIM_Encoder_Start+0xc4>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d008      	beq.n	8004d48 <HAL_TIM_Encoder_Start+0xd4>
 8004d36:	e00f      	b.n	8004d58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fd4f 	bl	80057e4 <TIM_CCxChannelCmd>
      break;
 8004d46:	e016      	b.n	8004d76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2104      	movs	r1, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fd47 	bl	80057e4 <TIM_CCxChannelCmd>
      break;
 8004d56:	e00e      	b.n	8004d76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd3f 	bl	80057e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fd38 	bl	80057e4 <TIM_CCxChannelCmd>
      break;
 8004d74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0202 	mvn.w	r2, #2
 8004dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa5a 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa4d 	bl	8005282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa5c 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d020      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0204 	mvn.w	r2, #4
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa34 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa27 	bl	8005282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa36 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01b      	beq.n	8004e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0208 	mvn.w	r2, #8
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2204      	movs	r2, #4
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa0e 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa01 	bl	8005282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa10 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0210 	mvn.w	r2, #16
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2208      	movs	r2, #8
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9e8 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9db 	bl	8005282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9ea 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00c      	beq.n	8004efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0201 	mvn.w	r2, #1
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc fc1a 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fced 	bl	80058fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9ba 	bl	80052b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0220 	mvn.w	r2, #32
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fcc0 	bl	80058e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e0ae      	b.n	80050ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	f200 809f 	bhi.w	80050dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	080050dd 	.word	0x080050dd
 8004fac:	080050dd 	.word	0x080050dd
 8004fb0:	080050dd 	.word	0x080050dd
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	080050dd 	.word	0x080050dd
 8004fbc:	080050dd 	.word	0x080050dd
 8004fc0:	080050dd 	.word	0x080050dd
 8004fc4:	0800505b 	.word	0x0800505b
 8004fc8:	080050dd 	.word	0x080050dd
 8004fcc:	080050dd 	.word	0x080050dd
 8004fd0:	080050dd 	.word	0x080050dd
 8004fd4:	0800509b 	.word	0x0800509b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f9e2 	bl	80053a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0208 	orr.w	r2, r2, #8
 8004ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0204 	bic.w	r2, r2, #4
 8005002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6999      	ldr	r1, [r3, #24]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	619a      	str	r2, [r3, #24]
      break;
 8005016:	e064      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fa28 	bl	8005474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6999      	ldr	r1, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	619a      	str	r2, [r3, #24]
      break;
 8005058:	e043      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fa71 	bl	8005548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0208 	orr.w	r2, r2, #8
 8005074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0204 	bic.w	r2, r2, #4
 8005084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69d9      	ldr	r1, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	61da      	str	r2, [r3, #28]
      break;
 8005098:	e023      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fabb 	bl	800561c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	021a      	lsls	r2, r3, #8
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	61da      	str	r2, [r3, #28]
      break;
 80050da:	e002      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
      break;
 80050e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x1c>
 800510c:	2302      	movs	r3, #2
 800510e:	e0b4      	b.n	800527a <HAL_TIM_ConfigClockSource+0x186>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800512e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005148:	d03e      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0xd4>
 800514a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514e:	f200 8087 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005156:	f000 8086 	beq.w	8005266 <HAL_TIM_ConfigClockSource+0x172>
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d87f      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b70      	cmp	r3, #112	; 0x70
 8005162:	d01a      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xa6>
 8005164:	2b70      	cmp	r3, #112	; 0x70
 8005166:	d87b      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b60      	cmp	r3, #96	; 0x60
 800516a:	d050      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x11a>
 800516c:	2b60      	cmp	r3, #96	; 0x60
 800516e:	d877      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b50      	cmp	r3, #80	; 0x50
 8005172:	d03c      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0xfa>
 8005174:	2b50      	cmp	r3, #80	; 0x50
 8005176:	d873      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d058      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x13a>
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d86f      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b30      	cmp	r3, #48	; 0x30
 8005182:	d064      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d86b      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d060      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x15a>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d867      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05c      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	2b10      	cmp	r3, #16
 8005196:	d05a      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x15a>
 8005198:	e062      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	f000 fafc 	bl	80057a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	609a      	str	r2, [r3, #8]
      break;
 80051c6:	e04f      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	f000 fae5 	bl	80057a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ea:	609a      	str	r2, [r3, #8]
      break;
 80051ec:	e03c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 fa5c 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2150      	movs	r1, #80	; 0x50
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fab3 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800520c:	e02c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fa7a 	bl	8005714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2160      	movs	r1, #96	; 0x60
 8005226:	4618      	mov	r0, r3
 8005228:	f000 faa3 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800522c:	e01c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fa3c 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2140      	movs	r1, #64	; 0x40
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fa93 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800524c:	e00c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f000 fa8a 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800525e:	e003      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e000      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
	...

080052cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2f      	ldr	r2, [pc, #188]	; (800539c <TIM_Base_SetConfig+0xd0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x30>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x30>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <TIM_Base_SetConfig+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x30>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a2b      	ldr	r2, [pc, #172]	; (80053a4 <TIM_Base_SetConfig+0xd8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <TIM_Base_SetConfig+0xd0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0x62>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0x62>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <TIM_Base_SetConfig+0xd4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0x62>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <TIM_Base_SetConfig+0xd8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0d      	ldr	r2, [pc, #52]	; (800539c <TIM_Base_SetConfig+0xd0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d103      	bne.n	8005374 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f023 0201 	bic.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]
  }
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800

080053a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f023 0201 	bic.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 0302 	bic.w	r3, r3, #2
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <TIM_OC1_SetConfig+0xc8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0308 	bic.w	r3, r3, #8
 800540a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0304 	bic.w	r3, r3, #4
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a13      	ldr	r2, [pc, #76]	; (8005470 <TIM_OC1_SetConfig+0xc8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40012c00 	.word	0x40012c00

08005474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f023 0210 	bic.w	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0320 	bic.w	r3, r3, #32
 80054be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_OC2_SetConfig+0xd0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10d      	bne.n	80054f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a14      	ldr	r2, [pc, #80]	; (8005544 <TIM_OC2_SetConfig+0xd0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00

08005548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <TIM_OC3_SetConfig+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <TIM_OC3_SetConfig+0xd0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d113      	bne.n	80055f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40012c00 	.word	0x40012c00

0800561c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <TIM_OC4_SetConfig+0x98>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d109      	bne.n	8005690 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00

080056b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 030a 	bic.w	r3, r3, #10
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr

08005714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0210 	bic.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	031b      	lsls	r3, r3, #12
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	f043 0307 	orr.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2201      	movs	r2, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e046      	b.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10c      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800

080058e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <__itoa>:
 800590c:	1e93      	subs	r3, r2, #2
 800590e:	2b22      	cmp	r3, #34	; 0x22
 8005910:	b510      	push	{r4, lr}
 8005912:	460c      	mov	r4, r1
 8005914:	d904      	bls.n	8005920 <__itoa+0x14>
 8005916:	2300      	movs	r3, #0
 8005918:	461c      	mov	r4, r3
 800591a:	700b      	strb	r3, [r1, #0]
 800591c:	4620      	mov	r0, r4
 800591e:	bd10      	pop	{r4, pc}
 8005920:	2a0a      	cmp	r2, #10
 8005922:	d109      	bne.n	8005938 <__itoa+0x2c>
 8005924:	2800      	cmp	r0, #0
 8005926:	da07      	bge.n	8005938 <__itoa+0x2c>
 8005928:	232d      	movs	r3, #45	; 0x2d
 800592a:	700b      	strb	r3, [r1, #0]
 800592c:	2101      	movs	r1, #1
 800592e:	4240      	negs	r0, r0
 8005930:	4421      	add	r1, r4
 8005932:	f000 f805 	bl	8005940 <__utoa>
 8005936:	e7f1      	b.n	800591c <__itoa+0x10>
 8005938:	2100      	movs	r1, #0
 800593a:	e7f9      	b.n	8005930 <__itoa+0x24>

0800593c <itoa>:
 800593c:	f7ff bfe6 	b.w	800590c <__itoa>

08005940 <__utoa>:
 8005940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005942:	b08b      	sub	sp, #44	; 0x2c
 8005944:	4605      	mov	r5, r0
 8005946:	460b      	mov	r3, r1
 8005948:	466e      	mov	r6, sp
 800594a:	4c1d      	ldr	r4, [pc, #116]	; (80059c0 <__utoa+0x80>)
 800594c:	f104 0c20 	add.w	ip, r4, #32
 8005950:	4637      	mov	r7, r6
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	6861      	ldr	r1, [r4, #4]
 8005956:	3408      	adds	r4, #8
 8005958:	c703      	stmia	r7!, {r0, r1}
 800595a:	4564      	cmp	r4, ip
 800595c:	463e      	mov	r6, r7
 800595e:	d1f7      	bne.n	8005950 <__utoa+0x10>
 8005960:	7921      	ldrb	r1, [r4, #4]
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	7139      	strb	r1, [r7, #4]
 8005966:	1e91      	subs	r1, r2, #2
 8005968:	2922      	cmp	r1, #34	; 0x22
 800596a:	6038      	str	r0, [r7, #0]
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	d904      	bls.n	800597c <__utoa+0x3c>
 8005972:	7019      	strb	r1, [r3, #0]
 8005974:	460b      	mov	r3, r1
 8005976:	4618      	mov	r0, r3
 8005978:	b00b      	add	sp, #44	; 0x2c
 800597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597c:	1e58      	subs	r0, r3, #1
 800597e:	4684      	mov	ip, r0
 8005980:	fbb5 f7f2 	udiv	r7, r5, r2
 8005984:	fb02 5617 	mls	r6, r2, r7, r5
 8005988:	3628      	adds	r6, #40	; 0x28
 800598a:	446e      	add	r6, sp
 800598c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005990:	460c      	mov	r4, r1
 8005992:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005996:	462e      	mov	r6, r5
 8005998:	42b2      	cmp	r2, r6
 800599a:	463d      	mov	r5, r7
 800599c:	f101 0101 	add.w	r1, r1, #1
 80059a0:	d9ee      	bls.n	8005980 <__utoa+0x40>
 80059a2:	2200      	movs	r2, #0
 80059a4:	545a      	strb	r2, [r3, r1]
 80059a6:	1919      	adds	r1, r3, r4
 80059a8:	1aa5      	subs	r5, r4, r2
 80059aa:	42aa      	cmp	r2, r5
 80059ac:	dae3      	bge.n	8005976 <__utoa+0x36>
 80059ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80059b2:	780e      	ldrb	r6, [r1, #0]
 80059b4:	3201      	adds	r2, #1
 80059b6:	7006      	strb	r6, [r0, #0]
 80059b8:	f801 5901 	strb.w	r5, [r1], #-1
 80059bc:	e7f4      	b.n	80059a8 <__utoa+0x68>
 80059be:	bf00      	nop
 80059c0:	08005aae 	.word	0x08005aae

080059c4 <memset>:
 80059c4:	4603      	mov	r3, r0
 80059c6:	4402      	add	r2, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	2600      	movs	r6, #0
 80059d8:	4d0c      	ldr	r5, [pc, #48]	; (8005a0c <__libc_init_array+0x38>)
 80059da:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	f000 f81a 	bl	8005a1c <_init>
 80059e8:	2600      	movs	r6, #0
 80059ea:	4d0a      	ldr	r5, [pc, #40]	; (8005a14 <__libc_init_array+0x40>)
 80059ec:	4c0a      	ldr	r4, [pc, #40]	; (8005a18 <__libc_init_array+0x44>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08005ad4 	.word	0x08005ad4
 8005a10:	08005ad4 	.word	0x08005ad4
 8005a14:	08005ad4 	.word	0x08005ad4
 8005a18:	08005ad8 	.word	0x08005ad8

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
