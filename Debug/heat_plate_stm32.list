
heat_plate_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a14  08002a14  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a14  08002a14  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a14  08002a14  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000001c  08002a38  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002a38  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf7c  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df7  00000000  00000000  0002c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab7  00000000  00000000  0002ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fc0  00000000  00000000  0002f667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f384  00000000  00000000  00047627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec88  00000000  00000000  000569ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003984  00000000  00000000  000e5634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e8fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029b0 	.word	0x080029b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080029b0 	.word	0x080029b0

0800014c <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 800018e:	f000 f9bf 	bl	8000510 <DelayInit>
	HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f000 fcec 	bl	8000b70 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f97d 	bl	800049c <ExpanderWrite>
	HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fce3 	bl	8000b70 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f964 	bl	8000478 <Write4Bits>
	DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 f9d4 	bl	8000560 <DelayUS>

	Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f95d 	bl	8000478 <Write4Bits>
	DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 f9cd 	bl	8000560 <DelayUS>

	Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f956 	bl	8000478 <Write4Bits>
	DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 f9c6 	bl	8000560 <DelayUS>

	Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f94f 	bl	8000478 <Write4Bits>
	DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f9c0 	bl	8000560 <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f907 	bl	80003fe <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 80001f6:	f000 f88b 	bl	8000310 <HD44780_Display>
	HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8f5 	bl	80003fe <SendCommand>
	DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f9a2 	bl	8000560 <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8a2 	bl	8000368 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f89e 	bl	8000368 <HD44780_CreateSpecialChar>

	HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000003b 	.word	0x2000003b
 800023c:	2000003c 	.word	0x2000003c
 8000240:	20000038 	.word	0x20000038
 8000244:	20000039 	.word	0x20000039
 8000248:	2000003a 	.word	0x2000003a
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f8d0 	bl	80003fe <SendCommand>
	DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f97d 	bl	8000560 <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home() {
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f8c5 	bl	80003fe <SendCommand>
	DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f972 	bl	8000560 <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f896 	bl	80003fe <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	080029c8 	.word	0x080029c8
 80002e0:	2000003b 	.word	0x2000003b

080002e4 <HD44780_NoDisplay>:

void HD44780_NoDisplay() {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_NoDisplay+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f023 0304 	bic.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_NoDisplay+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_NoDisplay+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f87c 	bl	80003fe <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000039 	.word	0x20000039

08000310 <HD44780_Display>:

void HD44780_Display() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HD44780_Display+0x28>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <HD44780_Display+0x28>)
 8000320:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <HD44780_Display+0x28>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	b2db      	uxtb	r3, r3
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f866 	bl	80003fe <SendCommand>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000039 	.word	0x20000039

0800033c <HD44780_Cursor>:
void HD44780_NoCursor() {
	dpControl &= ~LCD_CURSORON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	dpControl |= LCD_CURSORON;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <HD44780_Cursor+0x28>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HD44780_Cursor+0x28>)
 800034c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HD44780_Cursor+0x28>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f850 	bl	80003fe <SendCommand>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000039 	.word	0x20000039

08000368 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	b25b      	sxtb	r3, r3
 8000382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000386:	b25b      	sxtb	r3, r3
 8000388:	b2db      	uxtb	r3, r3
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f837 	bl	80003fe <SendCommand>
	for (int i = 0; i < 8; i++) {
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	e009      	b.n	80003aa <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f83b 	bl	800041a <SendChar>
	for (int i = 0; i < 8; i++) {
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	ddf2      	ble.n	8000396 <HD44780_CreateSpecialChar+0x2e>
	}
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	4603      	mov	r3, r0
 80003c2:	71fb      	strb	r3, [r7, #7]
	SendChar(index);
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f827 	bl	800041a <SendChar>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	while (*c)
 80003dc:	e006      	b.n	80003ec <HD44780_PrintStr+0x18>
		SendChar(*c++);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f817 	bl	800041a <SendChar>
	while (*c)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f4      	bne.n	80003de <HD44780_PrintStr+0xa>
}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <SendCommand>:
void HD44780_Backlight(void) {
	dpBacklight = LCD_BACKLIGHT;
	ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f812 	bl	8000436 <Send>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <SendChar>:

static void SendChar(uint8_t ch) {
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	2101      	movs	r1, #1
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f804 	bl	8000436 <Send>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	460a      	mov	r2, r1
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	4613      	mov	r3, r2
 8000444:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	f023 030f 	bic.w	r3, r3, #15
 800044c:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 8000454:	7bfa      	ldrb	r2, [r7, #15]
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	4313      	orrs	r3, r2
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f000 f80b 	bl	8000478 <Write4Bits>
	Write4Bits((lownib) | mode);
 8000462:	7bba      	ldrb	r2, [r7, #14]
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	4313      	orrs	r3, r2
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f804 	bl	8000478 <Write4Bits>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f809 	bl	800049c <ExpanderWrite>
	PulseEnable(value);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f821 	bl	80004d4 <PulseEnable>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <ExpanderWrite+0x30>)
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80004b2:	f107 020f 	add.w	r2, r7, #15
 80004b6:	230a      	movs	r3, #10
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2301      	movs	r3, #1
 80004bc:	217e      	movs	r1, #126	; 0x7e
 80004be:	4804      	ldr	r0, [pc, #16]	; (80004d0 <ExpanderWrite+0x34>)
 80004c0:	f001 f856 	bl	8001570 <HAL_I2C_Master_Transmit>
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000003c 	.word	0x2000003c
 80004d0:	20000088 	.word	0x20000088

080004d4 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ffd8 	bl	800049c <ExpanderWrite>
	DelayUS(20);
 80004ec:	2014      	movs	r0, #20
 80004ee:	f000 f837 	bl	8000560 <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f023 0304 	bic.w	r3, r3, #4
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ffce 	bl	800049c <ExpanderWrite>
	DelayUS(20);
 8000500:	2014      	movs	r0, #20
 8000502:	f000 f82d 	bl	8000560 <DelayUS>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <DelayInit>:

static void DelayInit(void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <DelayInit+0x48>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <DelayInit+0x48>)
 800051a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800051e:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <DelayInit+0x48>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <DelayInit+0x48>)
 8000526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800052a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <DelayInit+0x4c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <DelayInit+0x4c>)
 8000532:	f023 0301 	bic.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <DelayInit+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <DelayInit+0x4c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <DelayInit+0x4c>)
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 800054a:	bf00      	nop
	__ASM volatile ("NOP");
 800054c:	bf00      	nop
	__ASM volatile ("NOP");
 800054e:	bf00      	nop
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	e000edf0 	.word	0xe000edf0
 800055c:	e0001000 	.word	0xe0001000

08000560 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000560:	b480      	push	{r7}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <DelayUS+0x40>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <DelayUS+0x44>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	0c9a      	lsrs	r2, r3, #18
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	fb02 f303 	mul.w	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <DelayUS+0x48>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <DelayUS+0x48>)
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	429a      	cmp	r2, r3
 8000592:	d8f6      	bhi.n	8000582 <DelayUS+0x22>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000010 	.word	0x20000010
 80005a4:	431bde83 	.word	0x431bde83
 80005a8:	e0001000 	.word	0xe0001000

080005ac <HAL_TIM_PeriodElapsedCallback>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	*counter = *counter > 2000 ? 0 : *counter++;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	4905      	ldr	r1, [pc, #20]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	7013      	strb	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000040 	.word	0x20000040

080005d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d8:	f000 fa68 	bl	8000aac <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005dc:	f000 f830 	bl	8000640 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HD44780_Init(2);
 80005e0:	2002      	movs	r0, #2
 80005e2:	f7ff fdb3 	bl	800014c <HD44780_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e6:	f000 f8f3 	bl	80007d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005ea:	f000 f86f 	bl	80006cc <MX_I2C1_Init>
	MX_TIM2_Init();
 80005ee:	f000 f89b 	bl	8000728 <MX_TIM2_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (*counter % 10 >> 10) {
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <main+0x60>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <main+0x64>)
 80005fa:	fba3 1302 	umull	r1, r3, r3, r2
 80005fe:	08d9      	lsrs	r1, r3, #3
 8000600:	460b      	mov	r3, r1
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	129b      	asrs	r3, r3, #10
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0ef      	beq.n	80005f2 <main+0x1e>
			HD44780_Clear();
 8000612:	f7ff fe1f 	bl	8000254 <HD44780_Clear>
			HD44780_NoDisplay();
 8000616:	f7ff fe65 	bl	80002e4 <HD44780_NoDisplay>
			HD44780_Cursor();
 800061a:	f7ff fe8f 	bl	800033c <HD44780_Cursor>
			HD44780_SetCursor(0, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fe2d 	bl	8000280 <HD44780_SetCursor>
			HD44780_PrintStr("HELLO STM32!!!");
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x68>)
 8000628:	f7ff fed4 	bl	80003d4 <HD44780_PrintStr>
			HD44780_PrintSpecialChar(0);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fec4 	bl	80003ba <HD44780_PrintSpecialChar>
		if (*counter % 10 >> 10) {
 8000632:	e7de      	b.n	80005f2 <main+0x1e>
 8000634:	20000040 	.word	0x20000040
 8000638:	cccccccd 	.word	0xcccccccd
 800063c:	080029d8 	.word	0x080029d8

08000640 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f982 	bl	8002958 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fac9 	bl	8001c20 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x58>
		Error_Handler();
 8000694:	f000 f8d4 	bl	8000840 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fd36 	bl	8002124 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x82>
		Error_Handler();
 80006be:	f000 f8bf 	bl	8000840 <Error_Handler>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3740      	adds	r7, #64	; 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 126;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	227e      	movs	r2, #126	; 0x7e
 80006e6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f000 fded 	bl	80012e8 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000714:	f000 f894 	bl	8000840 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000088 	.word	0x20000088
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2224      	movs	r2, #36	; 0x24
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f90e 	bl	8002958 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_TIM2_Init+0xa4>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_TIM2_Init+0xa4>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_TIM2_Init+0xa4>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_TIM2_Init+0xa4>)
 800075a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800075e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_TIM2_Init+0xa4>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_TIM2_Init+0xa4>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800076c:	2301      	movs	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000774:	2301      	movs	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_TIM2_Init+0xa4>)
 8000798:	f001 fe3e 	bl	8002418 <HAL_TIM_Encoder_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80007a2:	f000 f84d 	bl	8000840 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_TIM2_Init+0xa4>)
 80007b4:	f002 f860 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80007be:	f000 f83f 	bl	8000840 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000dc 	.word	0x200000dc

080007d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x58>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_GPIO_Init+0x58>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_GPIO_Init+0x58>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_GPIO_Init+0x58>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <MX_GPIO_Init+0x58>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_GPIO_Init+0x58>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_GPIO_Init+0x58>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <MX_GPIO_Init+0x58>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_GPIO_Init+0x58>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <TIM2_IRQHandler+0x10>)
 8000832:	f001 fe93 	bl	800255c <HAL_TIM_IRQHandler>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000dc 	.word	0x200000dc

08000840 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <HAL_MspInit+0x5c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x5c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_MspInit+0x60>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_MspInit+0x60>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010000 	.word	0x40010000

080008b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_I2C_MspInit+0x90>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d132      	bne.n	8000936 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_I2C_MspInit+0x94>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_I2C_MspInit+0x94>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_I2C_MspInit+0x94>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <HAL_I2C_MspInit+0x98>)
 80008fe:	f000 fb6f 	bl	8000fe0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_I2C_MspInit+0x9c>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <HAL_I2C_MspInit+0x9c>)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_I2C_MspInit+0x94>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_I2C_MspInit+0x94>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_I2C_MspInit+0x94>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40005400 	.word	0x40005400
 8000944:	40021000 	.word	0x40021000
 8000948:	40010c00 	.word	0x40010c00
 800094c:	40010000 	.word	0x40010000

08000950 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_TIM_Encoder_MspInit+0x80>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d12b      	bne.n	80009c8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	61d3      	str	r3, [r2, #28]
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a0:	23c0      	movs	r3, #192	; 0xc0
 80009a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80009b4:	f000 fb14 	bl	8000fe0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	201e      	movs	r0, #30
 80009be:	f000 f9d2 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009c2:	201e      	movs	r0, #30
 80009c4:	f000 f9eb 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40000800 	.word	0x40000800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010c00 	.word	0x40010c00

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f889 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Channel1_IRQHandler+0x10>)
 8000a32:	f000 f9cf 	bl	8000dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000044 	.word	0x20000044

08000a40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM4_IRQHandler+0x10>)
 8000a46:	f001 fd89 	bl	800255c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000124 	.word	0x20000124

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff fff8 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a66:	490c      	ldr	r1, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a7c:	4c09      	ldr	r4, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f001 ff6d 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fda1 	bl	80005d4 <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a9c:	08002a1c 	.word	0x08002a1c
  ldr r2, =_sbss
 8000aa0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000aa4:	20000170 	.word	0x20000170

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f947 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fec0 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f95f 	bl	8000dba <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f927 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	20000018 	.word	0x20000018
 8000b34:	20000014 	.word	0x20000014

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000018 	.word	0x20000018
 8000b58:	2000016c 	.word	0x2000016c

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	2000016c 	.word	0x2000016c

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff fff0 	bl	8000b5c <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffe0 	bl	8000b5c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000018 	.word	0x20000018

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <__NVIC_EnableIRQ+0x34>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff2d 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff42 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff35 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	2204      	movs	r2, #4
 8000df2:	409a      	lsls	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d04f      	beq.n	8000e9c <HAL_DMA_IRQHandler+0xc8>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d04a      	beq.n	8000e9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0320 	and.w	r3, r3, #32
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d107      	bne.n	8000e24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d029      	beq.n	8000e82 <HAL_DMA_IRQHandler+0xae>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a65      	ldr	r2, [pc, #404]	; (8000fc8 <HAL_DMA_IRQHandler+0x1f4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d022      	beq.n	8000e7e <HAL_DMA_IRQHandler+0xaa>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_DMA_IRQHandler+0x1f8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01a      	beq.n	8000e78 <HAL_DMA_IRQHandler+0xa4>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a62      	ldr	r2, [pc, #392]	; (8000fd0 <HAL_DMA_IRQHandler+0x1fc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d012      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x9e>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a60      	ldr	r2, [pc, #384]	; (8000fd4 <HAL_DMA_IRQHandler+0x200>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00a      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x98>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a5f      	ldr	r2, [pc, #380]	; (8000fd8 <HAL_DMA_IRQHandler+0x204>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d102      	bne.n	8000e66 <HAL_DMA_IRQHandler+0x92>
 8000e60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e64:	e00e      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e6a:	e00b      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e70:	e008      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e76:	e005      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7c:	e002      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e7e:	2340      	movs	r3, #64	; 0x40
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_IRQHandler+0xb0>
 8000e82:	2304      	movs	r3, #4
 8000e84:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <HAL_DMA_IRQHandler+0x208>)
 8000e86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 8094 	beq.w	8000fba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e9a:	e08e      	b.n	8000fba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d056      	beq.n	8000f5a <HAL_DMA_IRQHandler+0x186>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d051      	beq.n	8000f5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10b      	bne.n	8000edc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 020a 	bic.w	r2, r2, #10
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d029      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x166>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <HAL_DMA_IRQHandler+0x1f4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d022      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x162>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <HAL_DMA_IRQHandler+0x1f8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01a      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x15c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a34      	ldr	r2, [pc, #208]	; (8000fd0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d012      	beq.n	8000f2a <HAL_DMA_IRQHandler+0x156>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_DMA_IRQHandler+0x200>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00a      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x150>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_DMA_IRQHandler+0x204>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_DMA_IRQHandler+0x14a>
 8000f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f22:	e00b      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	e008      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	e005      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f34:	e002      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f36:	2320      	movs	r3, #32
 8000f38:	e000      	b.n	8000f3c <HAL_DMA_IRQHandler+0x168>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <HAL_DMA_IRQHandler+0x208>)
 8000f3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d034      	beq.n	8000fba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f58:	e02f      	b.n	8000fba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	2208      	movs	r2, #8
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d028      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x1e8>
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d023      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 020e 	bic.w	r2, r2, #14
 8000f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	4798      	blx	r3
    }
  }
  return;
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
}
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020008 	.word	0x40020008
 8000fc8:	4002001c 	.word	0x4002001c
 8000fcc:	40020030 	.word	0x40020030
 8000fd0:	40020044 	.word	0x40020044
 8000fd4:	40020058 	.word	0x40020058
 8000fd8:	4002006c 	.word	0x4002006c
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e169      	b.n	80012c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8158 	bne.w	80012c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a9a      	ldr	r2, [pc, #616]	; (8001280 <HAL_GPIO_Init+0x2a0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d05e      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800101c:	4a98      	ldr	r2, [pc, #608]	; (8001280 <HAL_GPIO_Init+0x2a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d875      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001022:	4a98      	ldr	r2, [pc, #608]	; (8001284 <HAL_GPIO_Init+0x2a4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d058      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001028:	4a96      	ldr	r2, [pc, #600]	; (8001284 <HAL_GPIO_Init+0x2a4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d86f      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800102e:	4a96      	ldr	r2, [pc, #600]	; (8001288 <HAL_GPIO_Init+0x2a8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d052      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001034:	4a94      	ldr	r2, [pc, #592]	; (8001288 <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d869      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800103a:	4a94      	ldr	r2, [pc, #592]	; (800128c <HAL_GPIO_Init+0x2ac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d04c      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 8001040:	4a92      	ldr	r2, [pc, #584]	; (800128c <HAL_GPIO_Init+0x2ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d863      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001046:	4a92      	ldr	r2, [pc, #584]	; (8001290 <HAL_GPIO_Init+0x2b0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d046      	beq.n	80010da <HAL_GPIO_Init+0xfa>
 800104c:	4a90      	ldr	r2, [pc, #576]	; (8001290 <HAL_GPIO_Init+0x2b0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d85d      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d82a      	bhi.n	80010ac <HAL_GPIO_Init+0xcc>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d859      	bhi.n	800110e <HAL_GPIO_Init+0x12e>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <HAL_GPIO_Init+0x80>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010db 	.word	0x080010db
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010c7 	.word	0x080010c7
 800106c:	08001109 	.word	0x08001109
 8001070:	0800110f 	.word	0x0800110f
 8001074:	0800110f 	.word	0x0800110f
 8001078:	0800110f 	.word	0x0800110f
 800107c:	0800110f 	.word	0x0800110f
 8001080:	0800110f 	.word	0x0800110f
 8001084:	0800110f 	.word	0x0800110f
 8001088:	0800110f 	.word	0x0800110f
 800108c:	0800110f 	.word	0x0800110f
 8001090:	0800110f 	.word	0x0800110f
 8001094:	0800110f 	.word	0x0800110f
 8001098:	0800110f 	.word	0x0800110f
 800109c:	0800110f 	.word	0x0800110f
 80010a0:	0800110f 	.word	0x0800110f
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	4a79      	ldr	r2, [pc, #484]	; (8001294 <HAL_GPIO_Init+0x2b4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010b2:	e02c      	b.n	800110e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	623b      	str	r3, [r7, #32]
          break;
 80010ba:	e029      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	3304      	adds	r3, #4
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e024      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	3308      	adds	r3, #8
 80010cc:	623b      	str	r3, [r7, #32]
          break;
 80010ce:	e01f      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	330c      	adds	r3, #12
 80010d6:	623b      	str	r3, [r7, #32]
          break;
 80010d8:	e01a      	b.n	8001110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e2:	2304      	movs	r3, #4
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e013      	b.n	8001110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	611a      	str	r2, [r3, #16]
          break;
 80010fa:	e009      	b.n	8001110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010fc:	2308      	movs	r3, #8
 80010fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	615a      	str	r2, [r3, #20]
          break;
 8001106:	e003      	b.n	8001110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x130>
          break;
 800110e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	; 0xff
 8001114:	d801      	bhi.n	800111a <HAL_GPIO_Init+0x13a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e001      	b.n	800111e <HAL_GPIO_Init+0x13e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3304      	adds	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d802      	bhi.n	800112c <HAL_GPIO_Init+0x14c>
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	e002      	b.n	8001132 <HAL_GPIO_Init+0x152>
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	3b08      	subs	r3, #8
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	210f      	movs	r1, #15
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	6a39      	ldr	r1, [r7, #32]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80b1 	beq.w	80012c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001178:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2bc>)
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a40      	ldr	r2, [pc, #256]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3e      	ldr	r2, [pc, #248]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e0>
 80011bc:	2303      	movs	r3, #3
 80011be:	e006      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e004      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_GPIO_Init+0x1ee>
 80011cc:	2300      	movs	r3, #0
 80011ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011de:	492f      	ldr	r1, [pc, #188]	; (800129c <HAL_GPIO_Init+0x2bc>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	492c      	ldr	r1, [pc, #176]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4928      	ldr	r1, [pc, #160]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	4922      	ldr	r1, [pc, #136]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	491e      	ldr	r1, [pc, #120]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4918      	ldr	r1, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d021      	beq.n	80012b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e021      	b.n	80012c2 <HAL_GPIO_Init+0x2e2>
 800127e:	bf00      	nop
 8001280:	10320000 	.word	0x10320000
 8001284:	10310000 	.word	0x10310000
 8001288:	10220000 	.word	0x10220000
 800128c:	10210000 	.word	0x10210000
 8001290:	10120000 	.word	0x10120000
 8001294:	10110000 	.word	0x10110000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40011400 	.word	0x40011400
 80012b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_GPIO_Init+0x304>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4909      	ldr	r1, [pc, #36]	; (80012e4 <HAL_GPIO_Init+0x304>)
 80012be:	4013      	ands	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae8e 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	; 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12b      	b.n	8001552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff face 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134c:	f001 f832 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	; (800155c <HAL_I2C_Init+0x274>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d807      	bhi.n	800136c <HAL_I2C_Init+0x84>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <HAL_I2C_Init+0x278>)
 8001360:	4293      	cmp	r3, r2
 8001362:	bf94      	ite	ls
 8001364:	2301      	movls	r3, #1
 8001366:	2300      	movhi	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e006      	b.n	800137a <HAL_I2C_Init+0x92>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_I2C_Init+0x27c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0e7      	b.n	8001552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a78      	ldr	r2, [pc, #480]	; (8001568 <HAL_I2C_Init+0x280>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a6a      	ldr	r2, [pc, #424]	; (800155c <HAL_I2C_Init+0x274>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d802      	bhi.n	80013bc <HAL_I2C_Init+0xd4>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e009      	b.n	80013d0 <HAL_I2C_Init+0xe8>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a69      	ldr	r2, [pc, #420]	; (800156c <HAL_I2C_Init+0x284>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	495c      	ldr	r1, [pc, #368]	; (800155c <HAL_I2C_Init+0x274>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d819      	bhi.n	8001424 <HAL_I2C_Init+0x13c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001404:	400b      	ands	r3, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <HAL_I2C_Init+0x138>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	e051      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001420:	2304      	movs	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x168>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x18e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x196>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1bc>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff faea 	bl	8000b5c <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	; (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f964 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f89c 	bl	800176c <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fa22 	bl	8001aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fa19 	bl	8001b34 <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d006      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <I2C_MasterRequestWrite+0x2a>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00b      	b.n	80017c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d107      	bne.n	80017c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f84f 	bl	8001870 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e6:	d103      	bne.n	80017f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e035      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017fc:	d108      	bne.n	8001810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017fe:	897b      	ldrh	r3, [r7, #10]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	e01b      	b.n	8001848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	11db      	asrs	r3, r3, #7
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0306 	and.w	r3, r3, #6
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f063 030f 	orn	r3, r3, #15
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <I2C_MasterRequestWrite+0xfc>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f898 	bl	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e010      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <I2C_MasterRequestWrite+0x100>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f888 	bl	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	00010008 	.word	0x00010008
 800186c:	00010002 	.word	0x00010002

08001870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001880:	e048      	b.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d044      	beq.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff f967 	bl	8000b5c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d139      	bne.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0c1b      	lsrs	r3, r3, #16
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10d      	bne.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	e00c      	b.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4013      	ands	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d116      	bne.n	8001914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e023      	b.n	800195c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d10d      	bne.n	800193a <I2C_WaitOnFlagUntilTimeout+0xca>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	e00c      	b.n	8001954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	43da      	mvns	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4013      	ands	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	429a      	cmp	r2, r3
 8001958:	d093      	beq.n	8001882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001972:	e071      	b.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d123      	bne.n	80019cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800199c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f043 0204 	orr.w	r2, r3, #4
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e067      	b.n	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d2:	d041      	beq.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d4:	f7ff f8c2 	bl	8000b5c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d302      	bcc.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d136      	bne.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10c      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4013      	ands	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e00b      	b.n	8001a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e021      	b.n	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10c      	bne.n	8001a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e00b      	b.n	8001a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4013      	ands	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f af6d 	bne.w	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab0:	e034      	b.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f886 	bl	8001bc4 <I2C_IsAcknowledgeFailed>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e034      	b.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d028      	beq.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f847 	bl	8000b5c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b80      	cmp	r3, #128	; 0x80
 8001aec:	d016      	beq.n	8001b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d1c3      	bne.n	8001ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b40:	e034      	b.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f83e 	bl	8001bc4 <I2C_IsAcknowledgeFailed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e034      	b.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d028      	beq.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7fe ffff 	bl	8000b5c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11d      	bne.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d016      	beq.n	8001bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e007      	b.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d1c3      	bne.n	8001b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bda:	d11b      	bne.n	8001c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0204 	orr.w	r2, r3, #4
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e272      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e24c      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff2e 	bl	8000b5c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7fe ff2a 	bl	8000b5c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e200      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe ff1a 	bl	8000b5c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff16 	bl	8000b5c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1ec      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1c0      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe fecf 	bl	8000b5c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7fe fecb 	bl	8000b5c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1a1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe feae 	bl	8000b5c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7fe feaa 	bl	8000b5c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e180      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7fe fe8e 	bl	8000b5c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7fe fe8a 	bl	8000b5c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e160      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 faba 	bl	80023dc <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7fe fe74 	bl	8000b5c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7fe fe70 	bl	8000b5c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e146      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a87      	ldr	r2, [pc, #540]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b85      	ldr	r3, [pc, #532]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7e      	ldr	r2, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fe31 	bl	8000b5c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7fe fe2d 	bl	8000b5c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e103      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a66      	ldr	r2, [pc, #408]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a5d      	ldr	r2, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fde1 	bl	8000b5c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fddd 	bl	8000b5c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0b1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fdcb 	bl	8000b5c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe fdc7 	bl	8000b5c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e09b      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fd9b 	bl	8000b5c <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fd97 	bl	8000b5c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e06d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4921      	ldr	r1, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	491b      	ldr	r1, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fd6b 	bl	8000b5c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fd67 	bl	8000b5c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e03d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e035      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fd54 	bl	8000b5c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fd50 	bl	8000b5c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e026      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e01e      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e019      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x500>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d0      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4965      	ldr	r1, [pc, #404]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b8      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800218a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a52      	ldr	r2, [pc, #328]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	494d      	ldr	r1, [pc, #308]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e07f      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e073      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06b      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4936      	ldr	r1, [pc, #216]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe fca2 	bl	8000b5c <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fc9e 	bl	8000b5c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e053      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d210      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e032      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4916      	ldr	r1, [pc, #88]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b2:	f000 f821 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490a      	ldr	r1, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1cc>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc00 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080029e8 	.word	0x080029e8
 80022f0:	20000010 	.word	0x20000010
 80022f4:	20000014 	.word	0x20000014

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x30>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x36>
 8002326:	e027      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	e027      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_RCC_GetSysClockFreq+0xa4>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	613b      	str	r3, [r7, #16]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	693b      	ldr	r3, [r7, #16]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	08002a00 	.word	0x08002a00
 8002398:	08002a10 	.word	0x08002a10
 800239c:	003d0900 	.word	0x003d0900

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	20000010 	.word	0x20000010

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b8:	f7ff fff2 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	080029f8 	.word	0x080029f8

080023dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <RCC_Delay+0x34>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <RCC_Delay+0x38>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a5b      	lsrs	r3, r3, #9
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f8:	bf00      	nop
  }
  while (Delay --);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	60fa      	str	r2, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <RCC_Delay+0x1c>
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000010 	.word	0x20000010
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e093      	b.n	8002554 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fa85 	bl	8000950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800245c:	f023 0307 	bic.w	r3, r3, #7
 8002460:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f000 f9a1 	bl	80027b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	4313      	orrs	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024b8:	f023 030c 	bic.w	r3, r3, #12
 80024bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	4313      	orrs	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	011a      	lsls	r2, r3, #4
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	031b      	lsls	r3, r3, #12
 80024e8:	4313      	orrs	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4313      	orrs	r3, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0202 	mvn.w	r2, #2
 8002588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8ed 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8e0 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8ef 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0204 	mvn.w	r2, #4
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8c3 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8b6 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8c5 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0208 	mvn.w	r2, #8
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f899 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f88c 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f89b 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2208      	movs	r2, #8
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f86f 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f862 	bl	800276c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f871 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0201 	mvn.w	r2, #1
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fd ff66 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f91d 	bl	8002946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f835 	bl	80027a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b20      	cmp	r3, #32
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b20      	cmp	r3, #32
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0220 	mvn.w	r2, #32
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8e8 	bl	8002934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a29      	ldr	r2, [pc, #164]	; (800286c <TIM_Base_SetConfig+0xb8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d007      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a26      	ldr	r2, [pc, #152]	; (8002870 <TIM_Base_SetConfig+0xbc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0xc0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d108      	bne.n	80027f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <TIM_Base_SetConfig+0xb8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d007      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <TIM_Base_SetConfig+0xbc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <TIM_Base_SetConfig+0xc0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d108      	bne.n	8002828 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <TIM_Base_SetConfig+0xb8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	615a      	str	r2, [r3, #20]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800

08002878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e046      	b.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4313      	orrs	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <memset>:
 8002958:	4603      	mov	r3, r0
 800295a:	4402      	add	r2, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	f000 f81a 	bl	80029b0 <_init>
 800297c:	2600      	movs	r6, #0
 800297e:	4d0a      	ldr	r5, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08002a14 	.word	0x08002a14
 80029a4:	08002a14 	.word	0x08002a14
 80029a8:	08002a14 	.word	0x08002a14
 80029ac:	08002a18 	.word	0x08002a18

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr
