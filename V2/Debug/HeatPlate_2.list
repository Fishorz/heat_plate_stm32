
HeatPlate_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006730  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  080069f0  080069f0  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069f0  080069f0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080069f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200000b4  08006aac  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08006aac  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dcf  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ada  00000000  00000000  00031eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  000349d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e37  00000000  00000000  00035c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f91  00000000  00000000  00036a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001548b  00000000  00000000  000509c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f79  00000000  00000000  00065e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005650  00000000  00000000  000f9dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ff41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b4 	.word	0x200000b4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006828 	.word	0x08006828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b8 	.word	0x200000b8
 800014c:	08006828 	.word	0x08006828

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <adcSelect>:
//y=resistor x=temp

const uint32_t ADC_CHANNEL[3] = { ADC_CHANNEL_0, ADC_CHANNEL_1, ADC_CHANNEL_2 };

void adcSelect(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig,
		uint32_t channel) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
	sConfig->Channel = channel;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start(hadc);
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f001 fbf2 	bl	80027c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 100);
 8000fdc:	2164      	movs	r1, #100	; 0x64
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f001 fc9c 	bl	800291c <HAL_ADC_PollForConversion>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <calTemp>:

//void calTemp(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig,
//		NTC_TypeDef *uNTC) {
void calTemp(ADC_HandleTypeDef *hadc, NTC_TypeDef *uNTC) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
//	getAdcVoltage(hadc, sConfig, uNTC);
	//calculating resistor value
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 3; i++) {
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e06d      	b.n	80010e8 <calTemp+0xf8>
		//change ADC selection
		adcSelect(hadc, &sConfig, ADC_CHANNEL[i]);
 800100c:	4a42      	ldr	r2, [pc, #264]	; (8001118 <calTemp+0x128>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffd2 	bl	8000fc4 <adcSelect>
		//get ADC value
		uNTC->adcValue[i] = HAL_ADC_GetValue(hadc);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f001 fd81 	bl	8002b28 <HAL_ADC_GetValue>
 8001026:	4603      	mov	r3, r0
 8001028:	b2d9      	uxtb	r1, r3
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4413      	add	r3, r2
 8001030:	460a      	mov	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
		//cal resistor
		uNTC->resistor[i] = (uNTC->adcValue[0] * refenceResistor)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f9db 	bl	80003f4 <__aeabi_i2d>
 800103e:	a32e      	add	r3, pc, #184	; (adr r3, 80010f8 <calTemp+0x108>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fa40 	bl	80004c8 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <calTemp+0x12c>)
 8001056:	f7ff fa37 	bl	80004c8 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
				/ (supplyVoltage - uNTC->adcValue[0]);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f9c4 	bl	80003f4 <__aeabi_i2d>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	a123      	add	r1, pc, #140	; (adr r1, 8001100 <calTemp+0x110>)
 8001072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001076:	f7ff f86f 	bl	8000158 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff fb4b 	bl	800071c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
		uNTC->resistor[i] = (uNTC->adcValue[0] * refenceResistor)
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fc2d 	bl	80008ec <__aeabi_d2iz>
 8001092:	4601      	mov	r1, r0
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	3204      	adds	r2, #4
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

//		calculating temperature
		//y=0.111x+264.262
		//y=resistor x=temp
		uNTC->temp[i] = (uNTC->resistor[i] - 264.262) / 0.111;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	3204      	adds	r2, #4
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9a3 	bl	80003f4 <__aeabi_i2d>
 80010ae:	a316      	add	r3, pc, #88	; (adr r3, 8001108 <calTemp+0x118>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f850 	bl	8000158 <__aeabi_dsub>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	a313      	add	r3, pc, #76	; (adr r3, 8001110 <calTemp+0x120>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fb29 	bl	800071c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc33 	bl	800093c <__aeabi_d2f>
 80010d6:	4601      	mov	r1, r0
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	6059      	str	r1, [r3, #4]
	for (int i = 0; i < 3; i++) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	dd8e      	ble.n	800100c <calTemp+0x1c>
	}
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	4012cccc 	.word	0x4012cccc
 8001100:	66666666 	.word	0x66666666
 8001104:	400a6666 	.word	0x400a6666
 8001108:	26e978d5 	.word	0x26e978d5
 800110c:	40708431 	.word	0x40708431
 8001110:	f9db22d1 	.word	0xf9db22d1
 8001114:	3fbc6a7e 	.word	0x3fbc6a7e
 8001118:	0800694c 	.word	0x0800694c
 800111c:	408f4000 	.word	0x408f4000

08001120 <PIDController_Init>:
 *      Author: sky.chu
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 800115a:	b5b0      	push	{r4, r5, r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fc3b 	bl	80009e4 <__aeabi_fsub>
 800116e:	4603      	mov	r3, r0
 8001170:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	6978      	ldr	r0, [r7, #20]
 800117a:	f7ff fd3d 	bl	8000bf8 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd32 	bl	8000bf8 <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4619      	mov	r1, r3
 800119e:	4610      	mov	r0, r2
 80011a0:	f7ff fd2a 	bl	8000bf8 <__aeabi_fmul>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461d      	mov	r5, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	6979      	ldr	r1, [r7, #20]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fc1a 	bl	80009e8 <__addsf3>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4628      	mov	r0, r5
 80011ba:	f7ff fd1d 	bl	8000bf8 <__aeabi_fmul>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff fc10 	bl	80009e8 <__addsf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f7ff fec8 	bl	8000f70 <__aeabi_fcmpgt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <PIDController_Update+0x96>

        pid->integrator = pid->limMaxInt;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
 80011ee:	e00e      	b.n	800120e <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMinInt) {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f7ff fe9a 	bl	8000f34 <__aeabi_fcmplt>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <PIDController_Update+0xb4>

        pid->integrator = pid->limMinInt;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4619      	mov	r1, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fbe7 	bl	80009e8 <__addsf3>
 800121a:	4603      	mov	r3, r0
 800121c:	461c      	mov	r4, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fbdd 	bl	80009e4 <__aeabi_fsub>
 800122a:	4603      	mov	r3, r0
 800122c:	4619      	mov	r1, r3
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff fce2 	bl	8000bf8 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4619      	mov	r1, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fbd2 	bl	80009e8 <__addsf3>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f7ff fbc8 	bl	80009e4 <__aeabi_fsub>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fcca 	bl	8000bf8 <__aeabi_fmul>
 8001264:	4603      	mov	r3, r0
 8001266:	4619      	mov	r1, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fbbd 	bl	80009e8 <__addsf3>
 800126e:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001270:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4619      	mov	r1, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fbb4 	bl	80009e8 <__addsf3>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f7ff fbac 	bl	80009e8 <__addsf3>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fd63 	bl	8000d60 <__aeabi_fdiv>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	6939      	ldr	r1, [r7, #16]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fb9d 	bl	80009e8 <__addsf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f7ff fb95 	bl	80009e8 <__addsf3>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff fe4d 	bl	8000f70 <__aeabi_fcmpgt>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
 80012e4:	e00e      	b.n	8001304 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff fe1f 	bl	8000f34 <__aeabi_fcmplt>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34

}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bdb0      	pop	{r4, r5, r7, pc}

0800131c <heaterInit>:

//NTC_TypeDef ntc1;
//extern ADC_HandleTypeDef hadc1;
//ADC_ChannelConfTypeDef heaterADC;

void heaterInit(PIDController *pid) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	PIDController_Init(pid);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fefb 	bl	8001120 <PIDController_Init>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <heating>:

void heating(ADC_HandleTypeDef *hadc, NTC_TypeDef *uNTC, PIDController *pid) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	/* Compute new control signal */
	calTemp(hadc, uNTC);
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fe54 	bl	8000ff0 <calTemp>
	PIDController_Update(pid, setpoint, uNTC->temp[0]);
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <heating+0x34>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fbfb 	bl	8000b48 <__aeabi_ui2f>
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fefd 	bl	800115a <PIDController_Update>

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000

0800136c <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 8001376:	4a38      	ldr	r2, [pc, #224]	; (8001458 <HD44780_Init+0xec>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <HD44780_Init+0xf0>)
 800137e:	2208      	movs	r2, #8
 8001380:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HD44780_Init+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HD44780_Init+0xec>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d907      	bls.n	80013a0 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HD44780_Init+0xf4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HD44780_Init+0xf4>)
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e006      	b.n	80013ae <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HD44780_Init+0xf4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HD44780_Init+0xf4>)
 80013ac:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 80013ae:	f000 f985 	bl	80016bc <DelayInit>
	HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	; 0x32
 80013b4:	f001 f908 	bl	80025c8 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HD44780_Init+0xf0>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f943 	bl	8001648 <ExpanderWrite>
	HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f001 f8ff 	bl	80025c8 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 80013ca:	2030      	movs	r0, #48	; 0x30
 80013cc:	f000 f92b 	bl	8001626 <Write4Bits>
	DelayUS(4500);
 80013d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80013d4:	f000 f99a 	bl	800170c <DelayUS>

	Write4Bits(0x03 << 4);
 80013d8:	2030      	movs	r0, #48	; 0x30
 80013da:	f000 f924 	bl	8001626 <Write4Bits>
	DelayUS(4500);
 80013de:	f241 1094 	movw	r0, #4500	; 0x1194
 80013e2:	f000 f993 	bl	800170c <DelayUS>

	Write4Bits(0x03 << 4);
 80013e6:	2030      	movs	r0, #48	; 0x30
 80013e8:	f000 f91d 	bl	8001626 <Write4Bits>
	DelayUS(4500);
 80013ec:	f241 1094 	movw	r0, #4500	; 0x1194
 80013f0:	f000 f98c 	bl	800170c <DelayUS>

	Write4Bits(0x02 << 4);
 80013f4:	2020      	movs	r0, #32
 80013f6:	f000 f916 	bl	8001626 <Write4Bits>
	DelayUS(100);
 80013fa:	2064      	movs	r0, #100	; 0x64
 80013fc:	f000 f986 	bl	800170c <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HD44780_Init+0xf4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8ce 	bl	80015ac <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HD44780_Init+0xf8>)
 8001412:	2204      	movs	r2, #4
 8001414:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 8001416:	f000 f875 	bl	8001504 <HD44780_Display>
	HD44780_Clear();
 800141a:	f000 f82b 	bl	8001474 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HD44780_Init+0xfc>)
 8001420:	2202      	movs	r2, #2
 8001422:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HD44780_Init+0xfc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f8bc 	bl	80015ac <SendCommand>
	DelayUS(4500);
 8001434:	f241 1094 	movw	r0, #4500	; 0x1194
 8001438:	f000 f968 	bl	800170c <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 800143c:	490b      	ldr	r1, [pc, #44]	; (800146c <HD44780_Init+0x100>)
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f876 	bl	8001530 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 8001444:	490a      	ldr	r1, [pc, #40]	; (8001470 <HD44780_Init+0x104>)
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f872 	bl	8001530 <HD44780_CreateSpecialChar>

	HD44780_Home();
 800144c:	f000 f81d 	bl	800148a <HD44780_Home>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200000d3 	.word	0x200000d3
 800145c:	200000d4 	.word	0x200000d4
 8001460:	200000d0 	.word	0x200000d0
 8001464:	200000d1 	.word	0x200000d1
 8001468:	200000d2 	.word	0x200000d2
 800146c:	20000004 	.word	0x20000004
 8001470:	2000000c 	.word	0x2000000c

08001474 <HD44780_Clear>:

void HD44780_Clear() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8001478:	2001      	movs	r0, #1
 800147a:	f000 f897 	bl	80015ac <SendCommand>
	DelayUS(2000);
 800147e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001482:	f000 f943 	bl	800170c <DelayUS>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <HD44780_Home>:

void HD44780_Home() {
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 800148e:	2002      	movs	r0, #2
 8001490:	f000 f88c 	bl	80015ac <SendCommand>
	DelayUS(2000);
 8001494:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001498:	f000 f938 	bl	800170c <DelayUS>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HD44780_SetCursor+0x5c>)
 80014b2:	f107 0408 	add.w	r4, r7, #8
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HD44780_SetCursor+0x60>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	79ba      	ldrb	r2, [r7, #6]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d303      	bcc.n	80014ce <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HD44780_SetCursor+0x60>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3318      	adds	r3, #24
 80014d4:	443b      	add	r3, r7
 80014d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f85d 	bl	80015ac <SendCommand>
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08006840 	.word	0x08006840
 8001500:	200000d3 	.word	0x200000d3

08001504 <HD44780_Display>:
void HD44780_NoDisplay() {
	dpControl &= ~LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HD44780_Display+0x28>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HD44780_Display+0x28>)
 8001514:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HD44780_Display+0x28>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f843 	bl	80015ac <SendCommand>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000d1 	.word	0x200000d1

08001530 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	b25b      	sxtb	r3, r3
 800154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154e:	b25b      	sxtb	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f82a 	bl	80015ac <SendCommand>
	for (int i = 0; i < 8; i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e009      	b.n	8001572 <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f82e 	bl	80015c8 <SendChar>
	for (int i = 0; i < 8; i++) {
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b07      	cmp	r3, #7
 8001576:	ddf2      	ble.n	800155e <HD44780_CreateSpecialChar+0x2e>
	}
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	while (*c)
 800158a:	e006      	b.n	800159a <HD44780_PrintStr+0x18>
		SendChar(*c++);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f817 	bl	80015c8 <SendChar>
	while (*c)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f4      	bne.n	800158c <HD44780_PrintStr+0xa>
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SendCommand>:
void HD44780_Backlight(void) {
	dpBacklight = LCD_BACKLIGHT;
	ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f812 	bl	80015e4 <Send>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SendChar>:

static void SendChar(uint8_t ch) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f804 	bl	80015e4 <Send>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f023 030f 	bic.w	r3, r3, #15
 80015fa:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	4313      	orrs	r3, r2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f80b 	bl	8001626 <Write4Bits>
	Write4Bits((lownib) | mode);
 8001610:	7bba      	ldrb	r2, [r7, #14]
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	4313      	orrs	r3, r2
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f804 	bl	8001626 <Write4Bits>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f808 	bl	8001648 <ExpanderWrite>
	PulseEnable(value);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f820 	bl	8001680 <PulseEnable>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <ExpanderWrite+0x30>)
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4313      	orrs	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 800165e:	f107 020f 	add.w	r2, r7, #15
 8001662:	230a      	movs	r3, #10
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	217e      	movs	r1, #126	; 0x7e
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <ExpanderWrite+0x34>)
 800166c:	f002 f804 	bl	8003678 <HAL_I2C_Master_Transmit>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000d4 	.word	0x200000d4
 800167c:	20000108 	.word	0x20000108

08001680 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffd8 	bl	8001648 <ExpanderWrite>
	DelayUS(20);
 8001698:	2014      	movs	r0, #20
 800169a:	f000 f837 	bl	800170c <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffce 	bl	8001648 <ExpanderWrite>
	DelayUS(20);
 80016ac:	2014      	movs	r0, #20
 80016ae:	f000 f82d 	bl	800170c <DelayUS>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <DelayInit>:

static void DelayInit(void) {
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <DelayInit+0x48>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <DelayInit+0x48>)
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ca:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <DelayInit+0x48>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <DelayInit+0x48>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d6:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <DelayInit+0x4c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <DelayInit+0x4c>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <DelayInit+0x4c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <DelayInit+0x4c>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <DelayInit+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80016f6:	bf00      	nop
	__ASM volatile ("NOP");
 80016f8:	bf00      	nop
	__ASM volatile ("NOP");
 80016fa:	bf00      	nop
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000edf0 	.word	0xe000edf0
 8001708:	e0001000 	.word	0xe0001000

0800170c <DelayUS>:

static void DelayUS(uint32_t us) {
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <DelayUS+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <DelayUS+0x44>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9a      	lsrs	r2, r3, #18
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <DelayUS+0x48>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <DelayUS+0x48>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f6      	bhi.n	800172e <DelayUS+0x22>
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	2000004c 	.word	0x2000004c
 8001750:	431bde83 	.word	0x431bde83
 8001754:	e0001000 	.word	0xe0001000

08001758 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800175e:	f000 fed1 	bl	8002504 <HAL_Init>

	/* USER CODE BEGIN Init */
//	HAL_TIM_Base_Start_IT(&htim2);
	heaterInit();
 8001762:	f7ff fddb 	bl	800131c <heaterInit>
	meunInit(&userMeun);
 8001766:	483c      	ldr	r0, [pc, #240]	; (8001858 <main+0x100>)
 8001768:	f000 faea 	bl	8001d40 <meunInit>
	PIDController_Init(&pid1);
 800176c:	483b      	ldr	r0, [pc, #236]	; (800185c <main+0x104>)
 800176e:	f7ff fcd7 	bl	8001120 <PIDController_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001772:	f000 f88d 	bl	8001890 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001776:	f000 fa39 	bl	8001bec <MX_GPIO_Init>
	MX_TIM2_Init();
 800177a:	f000 f951 	bl	8001a20 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800177e:	f000 fa0b 	bl	8001b98 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001782:	f000 f8e1 	bl	8001948 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001786:	f000 f91d 	bl	80019c4 <MX_I2C1_Init>
	MX_TIM3_Init();
 800178a:	f000 f997 	bl	8001abc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800178e:	4834      	ldr	r0, [pc, #208]	; (8001860 <main+0x108>)
 8001790:	f003 f896 	bl	80048c0 <HAL_TIM_Base_Start_IT>

	debug_print("Init OK! \n\r");
 8001794:	4833      	ldr	r0, [pc, #204]	; (8001864 <main+0x10c>)
 8001796:	f000 fac3 	bl	8001d20 <debug_print>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		char Temp[10];
		itoa(counter, Temp, 10);
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <main+0x110>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	220a      	movs	r2, #10
 80017a4:	4619      	mov	r1, r3
 80017a6:	f004 f8bb 	bl	8005920 <itoa>
		debug_print("Counter = ");
 80017aa:	4830      	ldr	r0, [pc, #192]	; (800186c <main+0x114>)
 80017ac:	f000 fab8 	bl	8001d20 <debug_print>
		debug_print(Temp);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fab4 	bl	8001d20 <debug_print>
		debug_print("\n\r");
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <main+0x118>)
 80017ba:	f000 fab1 	bl	8001d20 <debug_print>

		if (counter % 14 == 1) {
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <main+0x110>)
 80017c0:	881a      	ldrh	r2, [r3, #0]
 80017c2:	0853      	lsrs	r3, r2, #1
 80017c4:	492b      	ldr	r1, [pc, #172]	; (8001874 <main+0x11c>)
 80017c6:	fba1 1303 	umull	r1, r3, r1, r3
 80017ca:	0899      	lsrs	r1, r3, #2
 80017cc:	460b      	mov	r3, r1
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <main+0x90>
			debug_print("update meun \n\r");
 80017dc:	4826      	ldr	r0, [pc, #152]	; (8001878 <main+0x120>)
 80017de:	f000 fa9f 	bl	8001d20 <debug_print>
			displayMeunHandler(&userMeun);
 80017e2:	481d      	ldr	r0, [pc, #116]	; (8001858 <main+0x100>)
 80017e4:	f000 fbc4 	bl	8001f70 <displayMeunHandler>
		}

		if (counter % 11 == 1) {
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <main+0x110>)
 80017ea:	8819      	ldrh	r1, [r3, #0]
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <main+0x124>)
 80017ee:	fba3 2301 	umull	r2, r3, r3, r1
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	1acb      	subs	r3, r1, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d1c9      	bne.n	800179a <main+0x42>
			if (userMeun.meunIndex == 0) {
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <main+0x100>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11f      	bne.n	800184e <main+0xf6>
				userMeun.meunUpdateState = 0;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <main+0x100>)
 8001810:	2200      	movs	r2, #0
 8001812:	709a      	strb	r2, [r3, #2]
				heating(&hadc1, &ntc1, &pid1);
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <main+0x104>)
 8001816:	491a      	ldr	r1, [pc, #104]	; (8001880 <main+0x128>)
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <main+0x12c>)
 800181a:	f7ff fd8b 	bl	8001334 <heating>
				TIM3->CCR1 = pid1.out;
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <main+0x104>)
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	4c19      	ldr	r4, [pc, #100]	; (8001888 <main+0x130>)
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fbad 	bl	8000f84 <__aeabi_f2uiz>
 800182a:	4603      	mov	r3, r0
 800182c:	6363      	str	r3, [r4, #52]	; 0x34
				TIM3->CCR2 = pid1.out;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <main+0x104>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	4c15      	ldr	r4, [pc, #84]	; (8001888 <main+0x130>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fba5 	bl	8000f84 <__aeabi_f2uiz>
 800183a:	4603      	mov	r3, r0
 800183c:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM3->CCR2 = pid1.out;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <main+0x104>)
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	4c11      	ldr	r4, [pc, #68]	; (8001888 <main+0x130>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb9d 	bl	8000f84 <__aeabi_f2uiz>
 800184a:	4603      	mov	r3, r0
 800184c:	63a3      	str	r3, [r4, #56]	; 0x38
			}
			debug_print("PID update \n\r");
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <main+0x134>)
 8001850:	f000 fa66 	bl	8001d20 <debug_print>
	while (1) {
 8001854:	e7a1      	b.n	800179a <main+0x42>
 8001856:	bf00      	nop
 8001858:	20000234 	.word	0x20000234
 800185c:	20000014 	.word	0x20000014
 8001860:	2000015c 	.word	0x2000015c
 8001864:	08006850 	.word	0x08006850
 8001868:	200000d6 	.word	0x200000d6
 800186c:	0800685c 	.word	0x0800685c
 8001870:	08006868 	.word	0x08006868
 8001874:	92492493 	.word	0x92492493
 8001878:	0800686c 	.word	0x0800686c
 800187c:	ba2e8ba3 	.word	0xba2e8ba3
 8001880:	2000023c 	.word	0x2000023c
 8001884:	200000d8 	.word	0x200000d8
 8001888:	40000400 	.word	0x40000400
 800188c:	0800687c 	.word	0x0800687c

08001890 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189a:	2228      	movs	r2, #40	; 0x28
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 f999 	bl	8005bd6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ce:	2301      	movs	r3, #1
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d2:	2302      	movs	r3, #2
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fa1e 	bl	8003d28 <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x66>
		Error_Handler();
 80018f2:	f000 fa20 	bl	8001d36 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2102      	movs	r1, #2
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fc8a 	bl	800422c <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x92>
		Error_Handler();
 800191e:	f000 fa0a 	bl	8001d36 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001922:	2302      	movs	r3, #2
 8001924:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800192a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fe0a 	bl	8004548 <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xae>
		Error_Handler();
 800193a:	f000 f9fc 	bl	8001d36 <Error_Handler>
	}
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	; 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_ADC1_Init+0x74>)
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <MX_ADC1_Init+0x78>)
 800195c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_ADC1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <MX_ADC1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_ADC1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_ADC1_Init+0x74>)
 8001972:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001976:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_ADC1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_ADC1_Init+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_ADC1_Init+0x74>)
 8001986:	f000 fe43 	bl	8002610 <HAL_ADC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001990:	f000 f9d1 	bl	8001d36 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001994:	2301      	movs	r3, #1
 8001996:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001998:	2301      	movs	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_ADC1_Init+0x74>)
 80019a6:	f001 f8cb 	bl	8002b40 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80019b0:	f000 f9c1 	bl	8001d36 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000d8 	.word	0x200000d8
 80019c0:	40012400 	.word	0x40012400

080019c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <MX_I2C1_Init+0x54>)
 80019cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x58>)
 80019d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_I2C1_Init+0x50>)
 8001a02:	f001 fcf5 	bl	80033f0 <HAL_I2C_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a0c:	f000 f993 	bl	8001d36 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000108 	.word	0x20000108
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	000186a0 	.word	0x000186a0

08001a20 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 500 - 1;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a46:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a4a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 7200 - 1;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a54:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a58:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a68:	f002 feda 	bl	8004820 <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001a72:	f000 f960 	bl	8001d36 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4619      	mov	r1, r3
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001a84:	f003 f988 	bl	8004d98 <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x72>
		Error_Handler();
 8001a8e:	f000 f952 	bl	8001d36 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM2_Init+0x98>)
 8001aa0:	f003 fce6 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001aaa:	f000 f944 	bl	8001d36 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000015c 	.word	0x2000015c

08001abc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001ae0:	4a2c      	ldr	r2, [pc, #176]	; (8001b94 <MX_TIM3_Init+0xd8>)
 8001ae2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36 - 1;
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001ae6:	2223      	movs	r2, #35	; 0x23
 8001ae8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100 - 1;
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001af2:	2263      	movs	r2, #99	; 0x63
 8001af4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001b02:	4823      	ldr	r0, [pc, #140]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b04:	f002 ff2e 	bl	8004964 <HAL_TIM_PWM_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x56>
		Error_Handler();
 8001b0e:	f000 f912 	bl	8001d36 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b22:	f003 fca5 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8001b2c:	f000 f903 	bl	8001d36 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b48:	f003 f864 	bl	8004c14 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001b52:	f000 f8f0 	bl	8001d36 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b5e:	f003 f859 	bl	8004c14 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001b68:	f000 f8e5 	bl	8001d36 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b74:	f003 f84e 	bl	8004c14 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001b7e:	f000 f8da 	bl	8001d36 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <MX_TIM3_Init+0xd4>)
 8001b84:	f000 fb2a 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200001a4 	.word	0x200001a4
 8001b94:	40000400 	.word	0x40000400

08001b98 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART2_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f003 fcbe 	bl	8005550 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001bda:	f000 f8ac 	bl	8001d36 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200001ec 	.word	0x200001ec
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a29      	ldr	r2, [pc, #164]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a17      	ldr	r2, [pc, #92]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_GPIO_Init+0xc0>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <MX_GPIO_Init+0xc4>)
 8001c68:	f001 fb90 	bl	800338c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <MX_GPIO_Init+0xc4>)
 8001c86:	f001 f9fd 	bl	8003084 <HAL_GPIO_Init>

	/*Configure GPIO pins : encoderBtn_Pin encoderPinB_Pin encoderPinA_Pin */
	GPIO_InitStruct.Pin = encoderBtn_Pin | encoderPinB_Pin | encoderPinA_Pin;
 8001c8a:	23e0      	movs	r3, #224	; 0xe0
 8001c8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_GPIO_Init+0xc8>)
 8001c9e:	f001 f9f1 	bl	8003084 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40010c00 	.word	0x40010c00

08001cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	counter = counter > 400 ? 0 : counter + 1;  //1 count is 10ms
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001cc8:	d804      	bhi.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	e000      	b.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cd8:	8013      	strh	r3, [r2, #0]
	if (counter == 0) {
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ce8:	f001 fb68 	bl	80033bc <HAL_GPIO_TogglePin>
	}
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000d6 	.word	0x200000d6
 8001cf8:	40011000 	.word	0x40011000

08001cfc <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001d04:	1d39      	adds	r1, r7, #4
 8001d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <__io_putchar+0x20>)
 8001d0e:	f003 fc6f 	bl	80055f0 <HAL_UART_Transmit>

	return ch;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200001ec 	.word	0x200001ec

08001d20 <debug_print>:

void debug_print(char test[]) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if (DEBUG_PRINT == 1) {
		printf(test);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f003 feff 	bl	8005b2c <iprintf>

	}
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3a:	b672      	cpsid	i
}
 8001d3c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d3e:	e7fe      	b.n	8001d3e <Error_Handler+0x8>

08001d40 <meunInit>:
//uint8_t meunUpdateState;

enum display meunIndex;
extern uint8_t counter;

void meunInit(MEUN_TypeDef *meun){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	meun->meunIndex = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	meun->previousMeunIndex = 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
	meun->meunUpdateState = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	709a      	strb	r2, [r3, #2]
	HD44780_Init(2);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff fb06 	bl	800136c <HD44780_Init>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <reflowSoldering_select>:
	HD44780_SetCursor(0, 0);
	HD44780_PrintStr("HELLO STM32!!!");
	HD44780_PrintSpecialChar(0);
}

void reflowSoldering_select() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001d6c:	f7ff fb82 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fb94 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("Reflow Soldering<");
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <reflowSoldering_select+0x28>)
 8001d7a:	f7ff fc02 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff fb8d 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Auto Tuning");
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <reflowSoldering_select+0x2c>)
 8001d88:	f7ff fbfb 	bl	8001582 <HD44780_PrintStr>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0800689c 	.word	0x0800689c
 8001d94:	080068b0 	.word	0x080068b0

08001d98 <_PID_Auto_Tuning_select>:

void _PID_Auto_Tuning_select() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001d9c:	f7ff fb6a 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001da0:	2100      	movs	r1, #0
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff fb7c 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("Reflow Soldering");
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <_PID_Auto_Tuning_select+0x28>)
 8001daa:	f7ff fbea 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001dae:	2101      	movs	r1, #1
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fb75 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Auto Tuning<");
 8001db6:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <_PID_Auto_Tuning_select+0x2c>)
 8001db8:	f7ff fbe3 	bl	8001582 <HD44780_PrintStr>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	080068c0 	.word	0x080068c0
 8001dc4:	080068d4 	.word	0x080068d4

08001dc8 <_PID_Auto_Tuning_wait>:

void _PID_Auto_Tuning_wait() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	uint8_t _waitState = counter % 100;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <_PID_Auto_Tuning_wait+0x7c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <_PID_Auto_Tuning_wait+0x80>)
 8001dd4:	fba2 1203 	umull	r1, r2, r2, r3
 8001dd8:	0952      	lsrs	r2, r2, #5
 8001dda:	2164      	movs	r1, #100	; 0x64
 8001ddc:	fb01 f202 	mul.w	r2, r1, r2
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
	HD44780_Clear();
 8001de4:	f7ff fb46 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fb58 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Auto Tuning");
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <_PID_Auto_Tuning_wait+0x84>)
 8001df2:	f7ff fbc6 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001df6:	2101      	movs	r1, #1
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fb51 	bl	80014a0 <HD44780_SetCursor>
	switch (_waitState) {
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d81a      	bhi.n	8001e3c <_PID_Auto_Tuning_wait+0x74>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <_PID_Auto_Tuning_wait+0x44>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e2d 	.word	0x08001e2d
 8001e18:	08001e35 	.word	0x08001e35
	case (1):
		HD44780_PrintStr("waiting");
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <_PID_Auto_Tuning_wait+0x88>)
 8001e1e:	f7ff fbb0 	bl	8001582 <HD44780_PrintStr>
		break;
 8001e22:	e00c      	b.n	8001e3e <_PID_Auto_Tuning_wait+0x76>
	case (2):
		HD44780_PrintStr("waiting.");
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <_PID_Auto_Tuning_wait+0x8c>)
 8001e26:	f7ff fbac 	bl	8001582 <HD44780_PrintStr>
		break;
 8001e2a:	e008      	b.n	8001e3e <_PID_Auto_Tuning_wait+0x76>
	case (3):
		HD44780_PrintStr("waiting..");
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <_PID_Auto_Tuning_wait+0x90>)
 8001e2e:	f7ff fba8 	bl	8001582 <HD44780_PrintStr>
		break;
 8001e32:	e004      	b.n	8001e3e <_PID_Auto_Tuning_wait+0x76>
	case (4):
		HD44780_PrintStr("waiting...");
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <_PID_Auto_Tuning_wait+0x94>)
 8001e36:	f7ff fba4 	bl	8001582 <HD44780_PrintStr>
		break;
 8001e3a:	e000      	b.n	8001e3e <_PID_Auto_Tuning_wait+0x76>
	default:
		return;
 8001e3c:	bf00      	nop
	}
}
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200000d6 	.word	0x200000d6
 8001e48:	51eb851f 	.word	0x51eb851f
 8001e4c:	080068b0 	.word	0x080068b0
 8001e50:	080068e8 	.word	0x080068e8
 8001e54:	080068f0 	.word	0x080068f0
 8001e58:	080068fc 	.word	0x080068fc
 8001e5c:	08006908 	.word	0x08006908

08001e60 <_PID_Auto_Tuning_OK>:

void _PID_Auto_Tuning_OK() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001e64:	f7ff fb06 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fb18 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Auto Tuning");
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <_PID_Auto_Tuning_OK+0x28>)
 8001e72:	f7ff fb86 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fb11 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Tuning OK");
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <_PID_Auto_Tuning_OK+0x2c>)
 8001e80:	f7ff fb7f 	bl	8001582 <HD44780_PrintStr>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	080068b0 	.word	0x080068b0
 8001e8c:	08006914 	.word	0x08006914

08001e90 <_PID_Auto_Tuning_fail>:

void _PID_Auto_Tuning_fail() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001e94:	f7ff faee 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fb00 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Auto Tuning");
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <_PID_Auto_Tuning_fail+0x28>)
 8001ea2:	f7ff fb6e 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff faf9 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("PID Tuning Fail");
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <_PID_Auto_Tuning_fail+0x2c>)
 8001eb0:	f7ff fb67 	bl	8001582 <HD44780_PrintStr>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	080068b0 	.word	0x080068b0
 8001ebc:	08006924 	.word	0x08006924

08001ec0 <reflow_Soliding_process>:
 *------------------
 *|Step:XX Time:XXX|
 *|N_T:XXX S_T:XXX |
 *------------------
 */
void reflow_Soliding_process(MEUN_TypeDef *meun) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	char displayTemp[10];
	HD44780_Clear();
 8001ec8:	f7ff fad4 	bl	8001474 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fae6 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("step:");
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <reflow_Soliding_process+0xa4>)
 8001ed6:	f7ff fb54 	bl	8001582 <HD44780_PrintStr>
	HD44780_PrintStr(&(meun->status));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3306      	adds	r3, #6
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fb4f 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(8, 0); //Time:
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2008      	movs	r0, #8
 8001ee8:	f7ff fada 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("Time:");
 8001eec:	481e      	ldr	r0, [pc, #120]	; (8001f68 <reflow_Soliding_process+0xa8>)
 8001eee:	f7ff fb48 	bl	8001582 <HD44780_PrintStr>
	itoa(meun->heatTime, displayTemp, 10);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	220a      	movs	r2, #10
 8001efe:	4619      	mov	r1, r3
 8001f00:	f003 fd0e 	bl	8005920 <itoa>
	HD44780_PrintStr(displayTemp);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb3a 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fac5 	bl	80014a0 <HD44780_SetCursor>
	HD44780_PrintStr("N_T:");
 8001f16:	4815      	ldr	r0, [pc, #84]	; (8001f6c <reflow_Soliding_process+0xac>)
 8001f18:	f7ff fb33 	bl	8001582 <HD44780_PrintStr>
	itoa(meun->nowTemp, displayTemp, 10);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	78db      	ldrb	r3, [r3, #3]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	220a      	movs	r2, #10
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f003 fcf9 	bl	8005920 <itoa>
	HD44780_PrintStr(displayTemp);
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fb25 	bl	8001582 <HD44780_PrintStr>
	HD44780_SetCursor(8, 0);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f7ff fab0 	bl	80014a0 <HD44780_SetCursor>
	itoa(meun->targetTemp, displayTemp, 10);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	791b      	ldrb	r3, [r3, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	220a      	movs	r2, #10
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f003 fce7 	bl	8005920 <itoa>
	HD44780_PrintStr(displayTemp);
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fb13 	bl	8001582 <HD44780_PrintStr>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08006934 	.word	0x08006934
 8001f68:	0800693c 	.word	0x0800693c
 8001f6c:	08006944 	.word	0x08006944

08001f70 <displayMeunHandler>:

void displayMeunHandler(MEUN_TypeDef *meun) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	if (meun->meunUpdateState == 0) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	789b      	ldrb	r3, [r3, #2]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d129      	bne.n	8001fd4 <displayMeunHandler+0x64>
		meun->meunUpdateState = 1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	709a      	strb	r2, [r3, #2]
		switch (meun->meunIndex) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d821      	bhi.n	8001fd2 <displayMeunHandler+0x62>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <displayMeunHandler+0x24>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fb3 	.word	0x08001fb3
 8001f9c:	08001fb9 	.word	0x08001fb9
 8001fa0:	08001fbf 	.word	0x08001fbf
 8001fa4:	08001fc5 	.word	0x08001fc5
 8001fa8:	08001fcb 	.word	0x08001fcb
		case 0:
			reflowSoldering_select();
 8001fac:	f7ff fedc 	bl	8001d68 <reflowSoldering_select>
			break;
 8001fb0:	e010      	b.n	8001fd4 <displayMeunHandler+0x64>
		case 1:
			_PID_Auto_Tuning_select();
 8001fb2:	f7ff fef1 	bl	8001d98 <_PID_Auto_Tuning_select>
			break;
 8001fb6:	e00d      	b.n	8001fd4 <displayMeunHandler+0x64>
		case 2:
			_PID_Auto_Tuning_wait();
 8001fb8:	f7ff ff06 	bl	8001dc8 <_PID_Auto_Tuning_wait>
			break;
 8001fbc:	e00a      	b.n	8001fd4 <displayMeunHandler+0x64>
		case 3:
			_PID_Auto_Tuning_OK();
 8001fbe:	f7ff ff4f 	bl	8001e60 <_PID_Auto_Tuning_OK>
			break;
 8001fc2:	e007      	b.n	8001fd4 <displayMeunHandler+0x64>
		case 4:
			_PID_Auto_Tuning_fail();
 8001fc4:	f7ff ff64 	bl	8001e90 <_PID_Auto_Tuning_fail>
			break;
 8001fc8:	e004      	b.n	8001fd4 <displayMeunHandler+0x64>
		case 5:
			reflow_Soliding_process(meun);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff78 	bl	8001ec0 <reflow_Soliding_process>
			break;
 8001fd0:	e000      	b.n	8001fd4 <displayMeunHandler+0x64>
		default:
			return;
 8001fd2:	bf00      	nop
		}
	}
}
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_MspInit+0x5c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6193      	str	r3, [r2, #24]
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_MspInit+0x5c>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_MspInit+0x5c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_MspInit+0x60>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_MspInit+0x60>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000

08002040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_ADC_MspInit+0x6c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d121      	bne.n	80020a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_ADC_MspInit+0x70>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002090:	2332      	movs	r3, #50	; 0x32
 8002092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_ADC_MspInit+0x74>)
 80020a0:	f000 fff0 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010800 	.word	0x40010800

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_I2C_MspInit+0x90>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d132      	bne.n	800213e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_I2C_MspInit+0x94>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_I2C_MspInit+0x94>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_I2C_MspInit+0x94>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f6:	2312      	movs	r3, #18
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4812      	ldr	r0, [pc, #72]	; (8002150 <HAL_I2C_MspInit+0x98>)
 8002106:	f000 ffbd 	bl	8003084 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_I2C_MspInit+0x9c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_I2C_MspInit+0x9c>)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_I2C_MspInit+0x94>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_I2C_MspInit+0x94>)
 800212c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_I2C_MspInit+0x94>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40005400 	.word	0x40005400
 800214c:	40021000 	.word	0x40021000
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40010000 	.word	0x40010000

08002158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d113      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0x44>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_TIM_Base_MspInit+0x44>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_TIM_Base_MspInit+0x44>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f000 ff45 	bl	8003016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f000 ff5e 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_TIM_PWM_MspInit+0x34>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10b      	bne.n	80021ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_TIM_PWM_MspInit+0x38>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_TIM_PWM_MspInit+0x38>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_TIM_PWM_MspInit+0x38>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_TIM_MspPostInit+0x88>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d12f      	bne.n	800225c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_TIM_MspPostInit+0x8c>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2302      	movs	r3, #2
 8002236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4619      	mov	r1, r3
 800223e:	480b      	ldr	r0, [pc, #44]	; (800226c <HAL_TIM_MspPostInit+0x90>)
 8002240:	f000 ff20 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2302      	movs	r3, #2
 800224e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4619      	mov	r1, r3
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <HAL_TIM_MspPostInit+0x94>)
 8002258:	f000 ff14 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40000400 	.word	0x40000400
 8002268:	40021000 	.word	0x40021000
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_UART_MspInit+0x88>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d12f      	bne.n	80022f4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_UART_MspInit+0x8c>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_UART_MspInit+0x8c>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229e:	61d3      	str	r3, [r2, #28]
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_UART_MspInit+0x8c>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_UART_MspInit+0x8c>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_UART_MspInit+0x8c>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_UART_MspInit+0x8c>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c4:	2304      	movs	r3, #4
 80022c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4619      	mov	r1, r3
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <HAL_UART_MspInit+0x90>)
 80022d8:	f000 fed4 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022dc:	2308      	movs	r3, #8
 80022de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4619      	mov	r1, r3
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_UART_MspInit+0x90>)
 80022f0:	f000 fec8 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000
 8002304:	40010800 	.word	0x40010800

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 f91f 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM2_IRQHandler+0x10>)
 800235e:	f002 fb50 	bl	8004a02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000015c 	.word	0x2000015c

0800236c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e00a      	b.n	8002394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800237e:	f3af 8000 	nop.w
 8002382:	4601      	mov	r1, r0
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	60ba      	str	r2, [r7, #8]
 800238a:	b2ca      	uxtb	r2, r1
 800238c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf0      	blt.n	800237e <_read+0x12>
  }

  return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e009      	b.n	80023cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	60ba      	str	r2, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fc9b 	bl	8001cfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dbf1      	blt.n	80023b8 <_write+0x12>
  }
  return len;
 80023d4:	687b      	ldr	r3, [r7, #4]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_close>:

int _close(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002404:	605a      	str	r2, [r3, #4]
  return 0;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_isatty>:

int _isatty(int file)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f003 fc00 	bl	8005c74 <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	220c      	movs	r2, #12
 8002478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20005000 	.word	0x20005000
 80024a0:	00000400 	.word	0x00000400
 80024a4:	20000258 	.word	0x20000258
 80024a8:	200003b0 	.word	0x200003b0

080024ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b8:	f7ff fff8 	bl	80024ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024be:	490c      	ldr	r1, [pc, #48]	; (80024f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d4:	4c09      	ldr	r4, [pc, #36]	; (80024fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e2:	f003 fbcd 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024e6:	f7ff f937 	bl	8001758 <main>
  bx lr
 80024ea:	4770      	bx	lr
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80024f4:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 80024f8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80024fc:	200003ac 	.word	0x200003ac

08002500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC1_2_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x28>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x28>)
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 fd73 	bl	8003000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fd5c 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40022000 	.word	0x40022000

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd8b 	bl	800306a <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 fd53 	bl	8003016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000004c 	.word	0x2000004c
 8002588:	20000054 	.word	0x20000054
 800258c:	20000050 	.word	0x20000050

08002590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_IncTick+0x1c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x20>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <HAL_IncTick+0x20>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000054 	.word	0x20000054
 80025b0:	2000025c 	.word	0x2000025c

080025b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_GetTick+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	2000025c 	.word	0x2000025c

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffe0 	bl	80025b4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000054 	.word	0x20000054

08002610 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0be      	b.n	80027b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fcf6 	bl	8002040 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fbc5 	bl	8002de4 <ADC_ConversionStop_Disable>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8099 	bne.w	800279e <HAL_ADC_Init+0x18e>
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 8095 	bne.w	800279e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002690:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7b1b      	ldrb	r3, [r3, #12]
 8002696:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002698:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a8:	d003      	beq.n	80026b2 <HAL_ADC_Init+0xa2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_ADC_Init+0xa8>
 80026b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b6:	e000      	b.n	80026ba <HAL_ADC_Init+0xaa>
 80026b8:	2300      	movs	r3, #0
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7d1b      	ldrb	r3, [r3, #20]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d119      	bne.n	80026fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7b1b      	ldrb	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	035a      	lsls	r2, r3, #13
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e00b      	b.n	80026fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_ADC_Init+0x1a8>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	430b      	orrs	r3, r1
 8002722:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272c:	d003      	beq.n	8002736 <HAL_ADC_Init+0x126>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d104      	bne.n	8002740 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	3b01      	subs	r3, #1
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	430a      	orrs	r2, r1
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_ADC_Init+0x1ac>)
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	d10b      	bne.n	800277c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800277a:	e018      	b.n	80027ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f023 0312 	bic.w	r3, r3, #18
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800279c:	e007      	b.n	80027ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f043 0210 	orr.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	ffe1f7fd 	.word	0xffe1f7fd
 80027bc:	ff1f0efe 	.word	0xff1f0efe

080027c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADC_Start+0x1a>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e098      	b.n	800290c <HAL_ADC_Start+0x14c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 faa4 	bl	8002d30 <ADC_Enable>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8087 	bne.w	8002902 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a41      	ldr	r2, [pc, #260]	; (8002914 <HAL_ADC_Start+0x154>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d105      	bne.n	800281e <HAL_ADC_Start+0x5e>
 8002812:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_ADC_Start+0x158>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d026      	beq.n	8002886 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002840:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002848:	e01d      	b.n	8002886 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_ADC_Start+0x158>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_ADC_Start+0xaa>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2b      	ldr	r2, [pc, #172]	; (8002914 <HAL_ADC_Start+0x154>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10d      	bne.n	8002886 <HAL_ADC_Start+0xc6>
 800286a:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_ADC_Start+0x158>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800287e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f023 0206 	bic.w	r2, r3, #6
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
 800289e:	e002      	b.n	80028a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0202 	mvn.w	r2, #2
 80028b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028c6:	d113      	bne.n	80028f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_ADC_Start+0x154>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d105      	bne.n	80028de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_ADC_Start+0x158>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	e00c      	b.n	800290a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e003      	b.n	800290a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40012800 	.word	0x40012800
 8002918:	40012400 	.word	0x40012400

0800291c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002932:	f7ff fe3f 	bl	80025b4 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d3      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d131      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12a      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800297a:	e021      	b.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d01d      	beq.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_PollForConversion+0x7e>
 800298a:	f7ff fe13 	bl	80025b4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d212      	bcs.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0a2      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0d6      	beq.n	800297c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029ce:	e070      	b.n	8002ab2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_ADC_PollForConversion+0x1f4>)
 80029d2:	681c      	ldr	r4, [r3, #0]
 80029d4:	2002      	movs	r0, #2
 80029d6:	f001 fe6d 	bl	80046b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80029da:	4603      	mov	r3, r0
 80029dc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6919      	ldr	r1, [r3, #16]
 80029e6:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_ADC_PollForConversion+0x1f8>)
 80029e8:	400b      	ands	r3, r1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x104>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68d9      	ldr	r1, [r3, #12]
 80029f4:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_ADC_PollForConversion+0x1fc>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x104>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_ADC_PollForConversion+0x200>)
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x100>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68d9      	ldr	r1, [r3, #12]
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_ADC_PollForConversion+0x204>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x100>
 8002a18:	2314      	movs	r3, #20
 8002a1a:	e020      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a1c:	2329      	movs	r3, #41	; 0x29
 8002a1e:	e01e      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_ADC_PollForConversion+0x200>)
 8002a28:	400b      	ands	r3, r1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_ADC_PollForConversion+0x120>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_ADC_PollForConversion+0x204>)
 8002a36:	400b      	ands	r3, r1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_ADC_PollForConversion+0x13c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_ADC_PollForConversion+0x208>)
 8002a44:	400b      	ands	r3, r1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_ADC_PollForConversion+0x140>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_ADC_PollForConversion+0x208>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_PollForConversion+0x140>
 8002a58:	2354      	movs	r3, #84	; 0x54
 8002a5a:	e000      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a5c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a64:	e021      	b.n	8002aaa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_ADC_PollForConversion+0x168>
 8002a74:	f7ff fd9e 	bl	80025b4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d20f      	bcs.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d90b      	bls.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e030      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d8d9      	bhi.n	8002a66 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0212 	mvn.w	r2, #18
 8002aba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ad2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ad6:	d115      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000004c 	.word	0x2000004c
 8002b14:	24924924 	.word	0x24924924
 8002b18:	00924924 	.word	0x00924924
 8002b1c:	12492492 	.word	0x12492492
 8002b20:	00492492 	.word	0x00492492
 8002b24:	00249249 	.word	0x00249249

08002b28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0dc      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x1da>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d81c      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	221f      	movs	r2, #31
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b05      	subs	r3, #5
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba8:	e03c      	b.n	8002c24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d81c      	bhi.n	8002bec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b23      	subs	r3, #35	; 0x23
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b23      	subs	r3, #35	; 0x23
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bea:	e01b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b41      	subs	r3, #65	; 0x41
 8002bfe:	221f      	movs	r2, #31
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b41      	subs	r3, #65	; 0x41
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d91c      	bls.n	8002c66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68d9      	ldr	r1, [r3, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4019      	ands	r1, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	e019      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6919      	ldr	r1, [r3, #16]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4019      	ands	r1, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6898      	ldr	r0, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d003      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ca6:	2b11      	cmp	r3, #17
 8002ca8:	d132      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d125      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d126      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d11a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <HAL_ADC_ConfigChannel+0x1ec>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	0c9a      	lsrs	r2, r3, #18
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x1b2>
 8002cfe:	e007      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	40012400 	.word	0x40012400
 8002d28:	2000004c 	.word	0x2000004c
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d040      	beq.n	8002dd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <ADC_Enable+0xac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <ADC_Enable+0xb0>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d6c:	e002      	b.n	8002d74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d7a:	f7ff fc1b 	bl	80025b4 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d80:	e01f      	b.n	8002dc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d82:	f7ff fc17 	bl	80025b4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d918      	bls.n	8002dc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d011      	beq.n	8002dc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d1d8      	bne.n	8002d82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000004c 	.word	0x2000004c
 8002de0:	431bde83 	.word	0x431bde83

08002de4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12e      	bne.n	8002e5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e0e:	f7ff fbd1 	bl	80025b4 <HAL_GetTick>
 8002e12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e14:	e01b      	b.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e16:	f7ff fbcd 	bl	80025b4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d914      	bls.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e007      	b.n	8002e5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d0dc      	beq.n	8002e16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db0b      	blt.n	8002ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4906      	ldr	r1, [pc, #24]	; (8002f00 <__NVIC_EnableIRQ+0x34>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2001      	movs	r0, #1
 8002eee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	; (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fcc:	d301      	bcc.n	8002fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00f      	b.n	8002ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <SysTick_Config+0x40>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fda:	210f      	movs	r1, #15
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f7ff ff90 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <SysTick_Config+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <SysTick_Config+0x40>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff2d 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff42 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ff90 	bl	8002f58 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff5f 	bl	8002f04 <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff35 	bl	8002ecc <__NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ffa2 	bl	8002fbc <SysTick_Config>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b480      	push	{r7}
 8003086:	b08b      	sub	sp, #44	; 0x2c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e169      	b.n	800336c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003098:	2201      	movs	r2, #1
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8158 	bne.w	8003366 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a9a      	ldr	r2, [pc, #616]	; (8003324 <HAL_GPIO_Init+0x2a0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030c0:	4a98      	ldr	r2, [pc, #608]	; (8003324 <HAL_GPIO_Init+0x2a0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d875      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030c6:	4a98      	ldr	r2, [pc, #608]	; (8003328 <HAL_GPIO_Init+0x2a4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d058      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030cc:	4a96      	ldr	r2, [pc, #600]	; (8003328 <HAL_GPIO_Init+0x2a4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d86f      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030d2:	4a96      	ldr	r2, [pc, #600]	; (800332c <HAL_GPIO_Init+0x2a8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d052      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030d8:	4a94      	ldr	r2, [pc, #592]	; (800332c <HAL_GPIO_Init+0x2a8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d869      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030de:	4a94      	ldr	r2, [pc, #592]	; (8003330 <HAL_GPIO_Init+0x2ac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04c      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030e4:	4a92      	ldr	r2, [pc, #584]	; (8003330 <HAL_GPIO_Init+0x2ac>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d863      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030ea:	4a92      	ldr	r2, [pc, #584]	; (8003334 <HAL_GPIO_Init+0x2b0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d046      	beq.n	800317e <HAL_GPIO_Init+0xfa>
 80030f0:	4a90      	ldr	r2, [pc, #576]	; (8003334 <HAL_GPIO_Init+0x2b0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d85d      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d82a      	bhi.n	8003150 <HAL_GPIO_Init+0xcc>
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d859      	bhi.n	80031b2 <HAL_GPIO_Init+0x12e>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_GPIO_Init+0x80>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	0800317f 	.word	0x0800317f
 8003108:	08003159 	.word	0x08003159
 800310c:	0800316b 	.word	0x0800316b
 8003110:	080031ad 	.word	0x080031ad
 8003114:	080031b3 	.word	0x080031b3
 8003118:	080031b3 	.word	0x080031b3
 800311c:	080031b3 	.word	0x080031b3
 8003120:	080031b3 	.word	0x080031b3
 8003124:	080031b3 	.word	0x080031b3
 8003128:	080031b3 	.word	0x080031b3
 800312c:	080031b3 	.word	0x080031b3
 8003130:	080031b3 	.word	0x080031b3
 8003134:	080031b3 	.word	0x080031b3
 8003138:	080031b3 	.word	0x080031b3
 800313c:	080031b3 	.word	0x080031b3
 8003140:	080031b3 	.word	0x080031b3
 8003144:	080031b3 	.word	0x080031b3
 8003148:	08003161 	.word	0x08003161
 800314c:	08003175 	.word	0x08003175
 8003150:	4a79      	ldr	r2, [pc, #484]	; (8003338 <HAL_GPIO_Init+0x2b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003156:	e02c      	b.n	80031b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e029      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	3304      	adds	r3, #4
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e024      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	3308      	adds	r3, #8
 8003170:	623b      	str	r3, [r7, #32]
          break;
 8003172:	e01f      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	330c      	adds	r3, #12
 800317a:	623b      	str	r3, [r7, #32]
          break;
 800317c:	e01a      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003186:	2304      	movs	r3, #4
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e013      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003194:	2308      	movs	r3, #8
 8003196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	611a      	str	r2, [r3, #16]
          break;
 800319e:	e009      	b.n	80031b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a0:	2308      	movs	r3, #8
 80031a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	615a      	str	r2, [r3, #20]
          break;
 80031aa:	e003      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x130>
          break;
 80031b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2bff      	cmp	r3, #255	; 0xff
 80031b8:	d801      	bhi.n	80031be <HAL_GPIO_Init+0x13a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_Init+0x13e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2bff      	cmp	r3, #255	; 0xff
 80031c8:	d802      	bhi.n	80031d0 <HAL_GPIO_Init+0x14c>
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x152>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3b08      	subs	r3, #8
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	210f      	movs	r1, #15
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	431a      	orrs	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80b1 	beq.w	8003366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_GPIO_Init+0x2b8>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2bc>)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_GPIO_Init+0x2c0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_GPIO_Init+0x1ec>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3f      	ldr	r2, [pc, #252]	; (8003348 <HAL_GPIO_Init+0x2c4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00d      	beq.n	800326c <HAL_GPIO_Init+0x1e8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3e      	ldr	r2, [pc, #248]	; (800334c <HAL_GPIO_Init+0x2c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <HAL_GPIO_Init+0x1e4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <HAL_GPIO_Init+0x2cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_GPIO_Init+0x1e0>
 8003260:	2303      	movs	r3, #3
 8003262:	e006      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003264:	2304      	movs	r3, #4
 8003266:	e004      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003268:	2302      	movs	r3, #2
 800326a:	e002      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_GPIO_Init+0x1ee>
 8003270:	2300      	movs	r3, #0
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	f002 0203 	and.w	r2, r2, #3
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	4093      	lsls	r3, r2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003282:	492f      	ldr	r1, [pc, #188]	; (8003340 <HAL_GPIO_Init+0x2bc>)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	492c      	ldr	r1, [pc, #176]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4928      	ldr	r1, [pc, #160]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d006      	beq.n	80032d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4922      	ldr	r1, [pc, #136]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	43db      	mvns	r3, r3
 80032da:	491e      	ldr	r1, [pc, #120]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4918      	ldr	r1, [pc, #96]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4914      	ldr	r1, [pc, #80]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d021      	beq.n	8003358 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
 8003320:	e021      	b.n	8003366 <HAL_GPIO_Init+0x2e2>
 8003322:	bf00      	nop
 8003324:	10320000 	.word	0x10320000
 8003328:	10310000 	.word	0x10310000
 800332c:	10220000 	.word	0x10220000
 8003330:	10210000 	.word	0x10210000
 8003334:	10120000 	.word	0x10120000
 8003338:	10110000 	.word	0x10110000
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	40010800 	.word	0x40010800
 8003348:	40010c00 	.word	0x40010c00
 800334c:	40011000 	.word	0x40011000
 8003350:	40011400 	.word	0x40011400
 8003354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_GPIO_Init+0x304>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	43db      	mvns	r3, r3
 8003360:	4909      	ldr	r1, [pc, #36]	; (8003388 <HAL_GPIO_Init+0x304>)
 8003362:	4013      	ands	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	3301      	adds	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f ae8e 	bne.w	8003098 <HAL_GPIO_Init+0x14>
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	372c      	adds	r7, #44	; 0x2c
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40010400 	.word	0x40010400

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a8:	e003      	b.n	80033b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43d9      	mvns	r1, r3
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	400b      	ands	r3, r1
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e12b      	b.n	800365a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fe4e 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003454:	f001 f832 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8003458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a81      	ldr	r2, [pc, #516]	; (8003664 <HAL_I2C_Init+0x274>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d807      	bhi.n	8003474 <HAL_I2C_Init+0x84>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_I2C_Init+0x278>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e006      	b.n	8003482 <HAL_I2C_Init+0x92>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a7d      	ldr	r2, [pc, #500]	; (800366c <HAL_I2C_Init+0x27c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0e7      	b.n	800365a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a78      	ldr	r2, [pc, #480]	; (8003670 <HAL_I2C_Init+0x280>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
 8003494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a6a      	ldr	r2, [pc, #424]	; (8003664 <HAL_I2C_Init+0x274>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d802      	bhi.n	80034c4 <HAL_I2C_Init+0xd4>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3301      	adds	r3, #1
 80034c2:	e009      	b.n	80034d8 <HAL_I2C_Init+0xe8>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <HAL_I2C_Init+0x284>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	3301      	adds	r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	495c      	ldr	r1, [pc, #368]	; (8003664 <HAL_I2C_Init+0x274>)
 80034f4:	428b      	cmp	r3, r1
 80034f6:	d819      	bhi.n	800352c <HAL_I2C_Init+0x13c>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e59      	subs	r1, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fbb1 f3f3 	udiv	r3, r1, r3
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800350c:	400b      	ands	r3, r1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_I2C_Init+0x138>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e59      	subs	r1, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	e051      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003528:	2304      	movs	r3, #4
 800352a:	e04f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <HAL_I2C_Init+0x168>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e012      	b.n	800357e <HAL_I2C_Init+0x18e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e58      	subs	r0, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	0099      	lsls	r1, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Init+0x196>
 8003582:	2301      	movs	r3, #1
 8003584:	e022      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <HAL_I2C_Init+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e58      	subs	r0, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	440b      	add	r3, r1
 800359c:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	e00f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	0099      	lsls	r1, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6809      	ldr	r1, [r1, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6911      	ldr	r1, [r2, #16]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	430b      	orrs	r3, r1
 800360e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	000186a0 	.word	0x000186a0
 8003668:	001e847f 	.word	0x001e847f
 800366c:	003d08ff 	.word	0x003d08ff
 8003670:	431bde83 	.word	0x431bde83
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	460b      	mov	r3, r1
 8003686:	817b      	strh	r3, [r7, #10]
 8003688:	4613      	mov	r3, r2
 800368a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7fe ff92 	bl	80025b4 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	f040 80e0 	bne.w	8003860 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2319      	movs	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	4970      	ldr	r1, [pc, #448]	; (800386c <HAL_I2C_Master_Transmit+0x1f4>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f964 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	e0d3      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2C_Master_Transmit+0x50>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0cc      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d007      	beq.n	80036ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2221      	movs	r2, #33	; 0x21
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2210      	movs	r2, #16
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a50      	ldr	r2, [pc, #320]	; (8003870 <HAL_I2C_Master_Transmit+0x1f8>)
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003730:	8979      	ldrh	r1, [r7, #10]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f89c 	bl	8003874 <I2C_MasterRequestWrite>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08d      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800375c:	e066      	b.n	800382c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fa22 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b04      	cmp	r3, #4
 8003774:	d107      	bne.n	8003786 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_I2C_Master_Transmit+0x188>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d017      	beq.n	8003800 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6a39      	ldr	r1, [r7, #32]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa19 	bl	8003c3c <I2C_WaitOnBTFFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e01a      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d194      	bne.n	800375e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00100002 	.word	0x00100002
 8003870:	ffff0000 	.word	0xffff0000

08003874 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	460b      	mov	r3, r1
 8003882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d006      	beq.n	800389e <I2C_MasterRequestWrite+0x2a>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d003      	beq.n	800389e <I2C_MasterRequestWrite+0x2a>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800389c:	d108      	bne.n	80038b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e00b      	b.n	80038c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	2b12      	cmp	r3, #18
 80038b6:	d107      	bne.n	80038c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f84f 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d103      	bne.n	80038f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e035      	b.n	8003968 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003904:	d108      	bne.n	8003918 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003914:	611a      	str	r2, [r3, #16]
 8003916:	e01b      	b.n	8003950 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003918:	897b      	ldrh	r3, [r7, #10]
 800391a:	11db      	asrs	r3, r3, #7
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0306 	and.w	r3, r3, #6
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f063 030f 	orn	r3, r3, #15
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <I2C_MasterRequestWrite+0xfc>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f898 	bl	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e010      	b.n	8003968 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003946:	897b      	ldrh	r3, [r7, #10]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4907      	ldr	r1, [pc, #28]	; (8003974 <I2C_MasterRequestWrite+0x100>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f888 	bl	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	00010008 	.word	0x00010008
 8003974:	00010002 	.word	0x00010002

08003978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	e048      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d044      	beq.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fe0f 	bl	80025b4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d139      	bne.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10d      	bne.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	e00c      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d116      	bne.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e023      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	e00c      	b.n	8003a5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d093      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7a:	e071      	b.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d123      	bne.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e067      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d041      	beq.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fd6a 	bl	80025b4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d136      	bne.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10c      	bne.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e00b      	b.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e021      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10c      	bne.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e00b      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af6d 	bne.w	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb8:	e034      	b.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f886 	bl	8003ccc <I2C_IsAcknowledgeFailed>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e034      	b.n	8003c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d028      	beq.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fcef 	bl	80025b4 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11d      	bne.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d016      	beq.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d1c3      	bne.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c48:	e034      	b.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f83e 	bl	8003ccc <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e034      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d028      	beq.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe fca7 	bl	80025b4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11d      	bne.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d016      	beq.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d1c3      	bne.n	8003c4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d11b      	bne.n	8003d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e272      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8087 	beq.w	8003e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d48:	4b92      	ldr	r3, [pc, #584]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d00c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d54:	4b8f      	ldr	r3, [pc, #572]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d112      	bne.n	8003d86 <HAL_RCC_OscConfig+0x5e>
 8003d60:	4b8c      	ldr	r3, [pc, #560]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d10b      	bne.n	8003d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06c      	beq.n	8003e54 <HAL_RCC_OscConfig+0x12c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d168      	bne.n	8003e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e24c      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x76>
 8003d90:	4b80      	ldr	r3, [pc, #512]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7f      	ldr	r2, [pc, #508]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e02e      	b.n	8003dfc <HAL_RCC_OscConfig+0xd4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x98>
 8003da6:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7a      	ldr	r2, [pc, #488]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b78      	ldr	r3, [pc, #480]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a77      	ldr	r2, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xd4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0xbc>
 8003dca:	4b72      	ldr	r3, [pc, #456]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a71      	ldr	r2, [pc, #452]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xd4>
 8003de4:	4b6b      	ldr	r3, [pc, #428]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b68      	ldr	r3, [pc, #416]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a67      	ldr	r2, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fbd6 	bl	80025b4 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fbd2 	bl	80025b4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e200      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe4>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fbc2 	bl	80025b4 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe fbbe 	bl	80025b4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1ec      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x10c>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d063      	beq.n	8003f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e62:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e6e:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d11c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x18c>
 8003e7a:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCC_OscConfig+0x176>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e1c0      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4939      	ldr	r1, [pc, #228]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e03a      	b.n	8003f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fb77 	bl	80025b4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe fb73 	bl	80025b4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1a1      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4927      	ldr	r1, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
 8003efc:	e015      	b.n	8003f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fb56 	bl	80025b4 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fb52 	bl	80025b4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e180      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03a      	beq.n	8003fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <HAL_RCC_OscConfig+0x274>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fe fb36 	bl	80025b4 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fe fb32 	bl	80025b4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e160      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f000 face 	bl	800450c <RCC_Delay>
 8003f70:	e01c      	b.n	8003fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_OscConfig+0x274>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f78:	f7fe fb1c 	bl	80025b4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7e:	e00f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fe fb18 	bl	80025b4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d908      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e146      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	42420000 	.word	0x42420000
 8003f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b92      	ldr	r3, [pc, #584]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e9      	bne.n	8003f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a6 	beq.w	8004106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b8b      	ldr	r3, [pc, #556]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4a87      	ldr	r2, [pc, #540]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	61d3      	str	r3, [r2, #28]
 8003fd6:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b82      	ldr	r3, [pc, #520]	; (80041f0 <HAL_RCC_OscConfig+0x4c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4b7f      	ldr	r3, [pc, #508]	; (80041f0 <HAL_RCC_OscConfig+0x4c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7e      	ldr	r2, [pc, #504]	; (80041f0 <HAL_RCC_OscConfig+0x4c8>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7fe fad9 	bl	80025b4 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7fe fad5 	bl	80025b4 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e103      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x4c8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x312>
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4a6e      	ldr	r2, [pc, #440]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6213      	str	r3, [r2, #32]
 8004038:	e02d      	b.n	8004096 <HAL_RCC_OscConfig+0x36e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x334>
 8004042:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4a69      	ldr	r2, [pc, #420]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6213      	str	r3, [r2, #32]
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4a66      	ldr	r2, [pc, #408]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	6213      	str	r3, [r2, #32]
 800405a:	e01c      	b.n	8004096 <HAL_RCC_OscConfig+0x36e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x356>
 8004064:	4b61      	ldr	r3, [pc, #388]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	4a60      	ldr	r2, [pc, #384]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	6213      	str	r3, [r2, #32]
 8004070:	4b5e      	ldr	r3, [pc, #376]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4a5d      	ldr	r2, [pc, #372]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6213      	str	r3, [r2, #32]
 800407c:	e00b      	b.n	8004096 <HAL_RCC_OscConfig+0x36e>
 800407e:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a5a      	ldr	r2, [pc, #360]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fe fa89 	bl	80025b4 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe fa85 	bl	80025b4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0b1      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	4b4b      	ldr	r3, [pc, #300]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_RCC_OscConfig+0x37e>
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe fa73 	bl	80025b4 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fe fa6f 	bl	80025b4 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e09b      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ee      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fa:	4b3c      	ldr	r3, [pc, #240]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4a3b      	ldr	r2, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8087 	beq.w	800421e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004110:	4b36      	ldr	r3, [pc, #216]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d061      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d146      	bne.n	80041b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe fa43 	bl	80025b4 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe fa3f 	bl	80025b4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e06d      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4921      	ldr	r1, [pc, #132]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800416c:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a19      	ldr	r1, [r3, #32]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	430b      	orrs	r3, r1
 800417e:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4cc>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe fa13 	bl	80025b4 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe fa0f 	bl	80025b4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e03d      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x46a>
 80041b0:	e035      	b.n	800421e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCC_OscConfig+0x4cc>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe f9fc 	bl	80025b4 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe f9f8 	bl	80025b4 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e026      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x498>
 80041de:	e01e      	b.n	800421e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e019      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_OscConfig+0x500>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	429a      	cmp	r2, r3
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0d0      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b67      	ldr	r3, [pc, #412]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 0207 	bic.w	r2, r3, #7
 8004256:	4965      	ldr	r1, [pc, #404]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d040      	beq.n	800434c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d115      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ea:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e073      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e06b      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430a:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f023 0203 	bic.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4936      	ldr	r1, [pc, #216]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800431c:	f7fe f94a 	bl	80025b4 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fe f946 	bl	80025b4 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e053      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 020c 	and.w	r2, r3, #12
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	429a      	cmp	r2, r3
 800434a:	d1eb      	bne.n	8004324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d210      	bcs.n	800437c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4922      	ldr	r1, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1cc>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1d0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe f8a8 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40022000 	.word	0x40022000
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08006958 	.word	0x08006958
 80043f8:	2000004c 	.word	0x2000004c
 80043fc:	20000050 	.word	0x20000050

08004400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <HAL_RCC_GetSysClockFreq+0x94>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b04      	cmp	r3, #4
 8004428:	d002      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x30>
 800442a:	2b08      	cmp	r3, #8
 800442c:	d003      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x36>
 800442e:	e027      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_RCC_GetSysClockFreq+0x98>)
 8004432:	613b      	str	r3, [r7, #16]
      break;
 8004434:	e027      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	0c9b      	lsrs	r3, r3, #18
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a17      	ldr	r2, [pc, #92]	; (800449c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d010      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_RCC_GetSysClockFreq+0x94>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	0c5b      	lsrs	r3, r3, #17
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <HAL_RCC_GetSysClockFreq+0x98>)
 8004462:	fb03 f202 	mul.w	r2, r3, r2
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e004      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	613b      	str	r3, [r7, #16]
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0x98>)
 8004482:	613b      	str	r3, [r7, #16]
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	693b      	ldr	r3, [r7, #16]
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	007a1200 	.word	0x007a1200
 800449c:	08006970 	.word	0x08006970
 80044a0:	08006980 	.word	0x08006980
 80044a4:	003d0900 	.word	0x003d0900

080044a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ac:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	2000004c 	.word	0x2000004c

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff2 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08006968 	.word	0x08006968

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffde 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	0adb      	lsrs	r3, r3, #11
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	08006968 	.word	0x08006968

0800450c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <RCC_Delay+0x34>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <RCC_Delay+0x38>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0a5b      	lsrs	r3, r3, #9
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004528:	bf00      	nop
  }
  while (Delay --);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	60fa      	str	r2, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f9      	bne.n	8004528 <RCC_Delay+0x1c>
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	2000004c 	.word	0x2000004c
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d07d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	4a4b      	ldr	r2, [pc, #300]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	61d3      	str	r3, [r2, #28]
 8004580:	4b49      	ldr	r3, [pc, #292]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d118      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459c:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a42      	ldr	r2, [pc, #264]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a8:	f7fe f804 	bl	80025b4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	e008      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fe f800 	bl	80025b4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e06d      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d027      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fc:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004602:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fd ffcf 	bl	80025b4 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fd ffcb 	bl	80025b4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e036      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ee      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4917      	ldr	r1, [pc, #92]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	4313      	orrs	r3, r2
 800464c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	490b      	ldr	r1, [pc, #44]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42420440 	.word	0x42420440

080046b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	f200 808a 	bhi.w	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d045      	beq.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d075      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80046ea:	e082      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80046ec:	4b46      	ldr	r3, [pc, #280]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80046f2:	4b45      	ldr	r3, [pc, #276]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d07b      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	0c9b      	lsrs	r3, r3, #18
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a41      	ldr	r2, [pc, #260]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d015      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	0c5b      	lsrs	r3, r3, #17
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	4a3b      	ldr	r2, [pc, #236]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004730:	4a38      	ldr	r2, [pc, #224]	; (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fbb2 f2f3 	udiv	r2, r2, r3
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e004      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4a34      	ldr	r2, [pc, #208]	; (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800474c:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004758:	d102      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	61bb      	str	r3, [r7, #24]
      break;
 800475e:	e04a      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
      break;
 800476e:	e042      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d108      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800478c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e01f      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800479e:	d109      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80047ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e00f      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d11c      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80047cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80047d0:	61bb      	str	r3, [r7, #24]
      break;
 80047d2:	e012      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047d4:	e011      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047d6:	f7ff fe85 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 80047da:	4602      	mov	r2, r0
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0b9b      	lsrs	r3, r3, #14
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	61bb      	str	r3, [r7, #24]
      break;
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047fa:	bf00      	nop
    }
  }
  return (frequency);
 80047fc:	69bb      	ldr	r3, [r7, #24]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	08006984 	.word	0x08006984
 8004810:	08006994 	.word	0x08006994
 8004814:	007a1200 	.word	0x007a1200
 8004818:	003d0900 	.word	0x003d0900
 800481c:	aaaaaaab 	.word	0xaaaaaaab

08004820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e041      	b.n	80048b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd fc86 	bl	8002158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fb86 	bl	8004f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d001      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e03a      	b.n	800494e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_TIM_Base_Start_IT+0x98>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x58>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d009      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x58>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIM_Base_Start_IT+0x9c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x58>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <HAL_TIM_Base_Start_IT+0xa0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d111      	bne.n	800493c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b06      	cmp	r3, #6
 8004928:	d010      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	e007      	b.n	800494c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800

08004964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e041      	b.n	80049fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd fc08 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f000 fae4 	bl	8004f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d122      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d11b      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0202 	mvn.w	r2, #2
 8004a2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa77 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004a4a:	e005      	b.n	8004a58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fa6a 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa79 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d122      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0204 	mvn.w	r2, #4
 8004a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa4d 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fa40 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa4f 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d122      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d11b      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0208 	mvn.w	r2, #8
 8004ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa23 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004af2:	e005      	b.n	8004b00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa16 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa25 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0210 	mvn.w	r2, #16
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9f9 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9ec 	bl	8004f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9fb 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0201 	mvn.w	r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fd f899 	bl	8001cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fcc6 	bl	800553e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9bf 	bl	8004f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d10e      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d107      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0220 	mvn.w	r2, #32
 8004c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fc91 	bl	800552c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e0ae      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	f200 809f 	bhi.w	8004d80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c7d 	.word	0x08004c7d
 8004c4c:	08004d81 	.word	0x08004d81
 8004c50:	08004d81 	.word	0x08004d81
 8004c54:	08004d81 	.word	0x08004d81
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004d81 	.word	0x08004d81
 8004c60:	08004d81 	.word	0x08004d81
 8004c64:	08004d81 	.word	0x08004d81
 8004c68:	08004cff 	.word	0x08004cff
 8004c6c:	08004d81 	.word	0x08004d81
 8004c70:	08004d81 	.word	0x08004d81
 8004c74:	08004d81 	.word	0x08004d81
 8004c78:	08004d3f 	.word	0x08004d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f9d6 	bl	8005034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6999      	ldr	r1, [r3, #24]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	619a      	str	r2, [r3, #24]
      break;
 8004cba:	e064      	b.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa1c 	bl	8005100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]
      break;
 8004cfc:	e043      	b.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa65 	bl	80051d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0208 	orr.w	r2, r2, #8
 8004d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0204 	bic.w	r2, r2, #4
 8004d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      break;
 8004d3c:	e023      	b.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 faaf 	bl	80052a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	021a      	lsls	r2, r3, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
      break;
 8004d7e:	e002      	b.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
      break;
 8004d84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b4      	b.n	8004f1e <HAL_TIM_ConfigClockSource+0x186>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d03e      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xd4>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df2:	f200 8087 	bhi.w	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	f000 8086 	beq.w	8004f0a <HAL_TIM_ConfigClockSource+0x172>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d87f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d01a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xa6>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d87b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d050      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d877      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d03c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xfa>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d873      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d058      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d86f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d064      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d86b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d060      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d867      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d05a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	e062      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	f000 faf0 	bl	8005432 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e04f      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	f000 fad9 	bl	8005432 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8e:	609a      	str	r2, [r3, #8]
      break;
 8004e90:	e03c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fa50 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2150      	movs	r1, #80	; 0x50
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 faa7 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e02c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa6e 	bl	80053a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2160      	movs	r1, #96	; 0x60
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa97 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e01c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa30 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fa87 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e00c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 fa7e 	bl	80053fe <TIM_ITRx_SetConfig>
      break;
 8004f02:	e003      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e000      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
	...

08004f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a29      	ldr	r2, [pc, #164]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_Base_SetConfig+0xbc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x30>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a25      	ldr	r2, [pc, #148]	; (8005030 <TIM_Base_SetConfig+0xc0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d007      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	; (800502c <TIM_Base_SetConfig+0xbc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_Base_SetConfig+0x62>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	; (8005030 <TIM_Base_SetConfig+0xc0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a07      	ldr	r2, [pc, #28]	; (8005028 <TIM_Base_SetConfig+0xb8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800

08005034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 0201 	bic.w	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0302 	bic.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <TIM_OC1_SetConfig+0xc8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10c      	bne.n	80050aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0308 	bic.w	r3, r3, #8
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a13      	ldr	r2, [pc, #76]	; (80050fc <TIM_OC1_SetConfig+0xc8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d111      	bne.n	80050d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00

08005100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f023 0210 	bic.w	r2, r3, #16
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <TIM_OC2_SetConfig+0xd0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10d      	bne.n	800517c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <TIM_OC2_SetConfig+0xd0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800518a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00

080051d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <TIM_OC3_SetConfig+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10d      	bne.n	800524e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <TIM_OC3_SetConfig+0xd0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d113      	bne.n	800527e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00

080052a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <TIM_OC4_SetConfig+0x98>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d109      	bne.n	800531c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00

08005344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 030a 	bic.w	r3, r3, #10
 8005380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f023 0210 	bic.w	r2, r3, #16
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	031b      	lsls	r3, r3, #12
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	f043 0307 	orr.w	r3, r3, #7
 8005420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005432:	b480      	push	{r7}
 8005434:	b087      	sub	sp, #28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800544c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	021a      	lsls	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	431a      	orrs	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4313      	orrs	r3, r2
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e046      	b.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d009      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a12      	ldr	r2, [pc, #72]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a10      	ldr	r2, [pc, #64]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10c      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800

0800552c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e042      	b.n	80055e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fe7c 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f91d 	bl	80057d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d16d      	bne.n	80056ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Transmit+0x2c>
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e066      	b.n	80056ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2221      	movs	r2, #33	; 0x21
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800562e:	f7fc ffc1 	bl	80025b4 <HAL_GetTick>
 8005632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005648:	d108      	bne.n	800565c <HAL_UART_Transmit+0x6c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d104      	bne.n	800565c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e003      	b.n	8005664 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005664:	e02a      	b.n	80056bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f840 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e036      	b.n	80056ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	3302      	adds	r3, #2
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e007      	b.n	80056ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1cf      	bne.n	8005666 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2140      	movs	r1, #64	; 0x40
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f810 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b090      	sub	sp, #64	; 0x40
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4613      	mov	r3, r2
 8005704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005706:	e050      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d04c      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0x30>
 8005716:	f7fc ff4d 	bl	80025b4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005722:	429a      	cmp	r2, r3
 8005724:	d241      	bcs.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005746:	637a      	str	r2, [r7, #52]	; 0x34
 8005748:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800574c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	63bb      	str	r3, [r7, #56]	; 0x38
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3314      	adds	r3, #20
 8005778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800577a:	623a      	str	r2, [r7, #32]
 800577c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	61bb      	str	r3, [r7, #24]
   return(result);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e5      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00f      	b.n	80057ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d09f      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3740      	adds	r7, #64	; 0x40
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800580e:	f023 030c 	bic.w	r3, r3, #12
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	430b      	orrs	r3, r1
 800581a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2c      	ldr	r2, [pc, #176]	; (80058e8 <UART_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d103      	bne.n	8005844 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800583c:	f7fe fe52 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	e002      	b.n	800584a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fe3a 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8005848:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009a      	lsls	r2, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <UART_SetConfig+0x118>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	0119      	lsls	r1, r3, #4
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009a      	lsls	r2, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <UART_SetConfig+0x118>)
 8005882:	fba3 0302 	umull	r0, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2064      	movs	r0, #100	; 0x64
 800588a:	fb00 f303 	mul.w	r3, r0, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	3332      	adds	r3, #50	; 0x32
 8005894:	4a15      	ldr	r2, [pc, #84]	; (80058ec <UART_SetConfig+0x118>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a0:	4419      	add	r1, r3
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009a      	lsls	r2, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <UART_SetConfig+0x118>)
 80058ba:	fba3 0302 	umull	r0, r3, r3, r2
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2064      	movs	r0, #100	; 0x64
 80058c2:	fb00 f303 	mul.w	r3, r0, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	3332      	adds	r3, #50	; 0x32
 80058cc:	4a07      	ldr	r2, [pc, #28]	; (80058ec <UART_SetConfig+0x118>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	440a      	add	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40013800 	.word	0x40013800
 80058ec:	51eb851f 	.word	0x51eb851f

080058f0 <__itoa>:
 80058f0:	1e93      	subs	r3, r2, #2
 80058f2:	2b22      	cmp	r3, #34	; 0x22
 80058f4:	b510      	push	{r4, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	d904      	bls.n	8005904 <__itoa+0x14>
 80058fa:	2300      	movs	r3, #0
 80058fc:	461c      	mov	r4, r3
 80058fe:	700b      	strb	r3, [r1, #0]
 8005900:	4620      	mov	r0, r4
 8005902:	bd10      	pop	{r4, pc}
 8005904:	2a0a      	cmp	r2, #10
 8005906:	d109      	bne.n	800591c <__itoa+0x2c>
 8005908:	2800      	cmp	r0, #0
 800590a:	da07      	bge.n	800591c <__itoa+0x2c>
 800590c:	232d      	movs	r3, #45	; 0x2d
 800590e:	700b      	strb	r3, [r1, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	4240      	negs	r0, r0
 8005914:	4421      	add	r1, r4
 8005916:	f000 f805 	bl	8005924 <__utoa>
 800591a:	e7f1      	b.n	8005900 <__itoa+0x10>
 800591c:	2100      	movs	r1, #0
 800591e:	e7f9      	b.n	8005914 <__itoa+0x24>

08005920 <itoa>:
 8005920:	f7ff bfe6 	b.w	80058f0 <__itoa>

08005924 <__utoa>:
 8005924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005926:	b08b      	sub	sp, #44	; 0x2c
 8005928:	4605      	mov	r5, r0
 800592a:	460b      	mov	r3, r1
 800592c:	466e      	mov	r6, sp
 800592e:	4c1d      	ldr	r4, [pc, #116]	; (80059a4 <__utoa+0x80>)
 8005930:	f104 0c20 	add.w	ip, r4, #32
 8005934:	4637      	mov	r7, r6
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	6861      	ldr	r1, [r4, #4]
 800593a:	3408      	adds	r4, #8
 800593c:	c703      	stmia	r7!, {r0, r1}
 800593e:	4564      	cmp	r4, ip
 8005940:	463e      	mov	r6, r7
 8005942:	d1f7      	bne.n	8005934 <__utoa+0x10>
 8005944:	7921      	ldrb	r1, [r4, #4]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	7139      	strb	r1, [r7, #4]
 800594a:	1e91      	subs	r1, r2, #2
 800594c:	2922      	cmp	r1, #34	; 0x22
 800594e:	6038      	str	r0, [r7, #0]
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	d904      	bls.n	8005960 <__utoa+0x3c>
 8005956:	7019      	strb	r1, [r3, #0]
 8005958:	460b      	mov	r3, r1
 800595a:	4618      	mov	r0, r3
 800595c:	b00b      	add	sp, #44	; 0x2c
 800595e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005960:	1e58      	subs	r0, r3, #1
 8005962:	4684      	mov	ip, r0
 8005964:	fbb5 f7f2 	udiv	r7, r5, r2
 8005968:	fb02 5617 	mls	r6, r2, r7, r5
 800596c:	3628      	adds	r6, #40	; 0x28
 800596e:	446e      	add	r6, sp
 8005970:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005974:	460c      	mov	r4, r1
 8005976:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800597a:	462e      	mov	r6, r5
 800597c:	42b2      	cmp	r2, r6
 800597e:	463d      	mov	r5, r7
 8005980:	f101 0101 	add.w	r1, r1, #1
 8005984:	d9ee      	bls.n	8005964 <__utoa+0x40>
 8005986:	2200      	movs	r2, #0
 8005988:	545a      	strb	r2, [r3, r1]
 800598a:	1919      	adds	r1, r3, r4
 800598c:	1aa5      	subs	r5, r4, r2
 800598e:	42aa      	cmp	r2, r5
 8005990:	dae3      	bge.n	800595a <__utoa+0x36>
 8005992:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005996:	780e      	ldrb	r6, [r1, #0]
 8005998:	3201      	adds	r2, #1
 800599a:	7006      	strb	r6, [r0, #0]
 800599c:	f801 5901 	strb.w	r5, [r1], #-1
 80059a0:	e7f4      	b.n	800598c <__utoa+0x68>
 80059a2:	bf00      	nop
 80059a4:	08006996 	.word	0x08006996

080059a8 <std>:
 80059a8:	2300      	movs	r3, #0
 80059aa:	b510      	push	{r4, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	e9c0 3300 	strd	r3, r3, [r0]
 80059b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059b6:	6083      	str	r3, [r0, #8]
 80059b8:	8181      	strh	r1, [r0, #12]
 80059ba:	6643      	str	r3, [r0, #100]	; 0x64
 80059bc:	81c2      	strh	r2, [r0, #14]
 80059be:	6183      	str	r3, [r0, #24]
 80059c0:	4619      	mov	r1, r3
 80059c2:	2208      	movs	r2, #8
 80059c4:	305c      	adds	r0, #92	; 0x5c
 80059c6:	f000 f906 	bl	8005bd6 <memset>
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <std+0x58>)
 80059cc:	6224      	str	r4, [r4, #32]
 80059ce:	6263      	str	r3, [r4, #36]	; 0x24
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <std+0x5c>)
 80059d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <std+0x60>)
 80059d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <std+0x64>)
 80059da:	6323      	str	r3, [r4, #48]	; 0x30
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <std+0x68>)
 80059de:	429c      	cmp	r4, r3
 80059e0:	d006      	beq.n	80059f0 <std+0x48>
 80059e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059e6:	4294      	cmp	r4, r2
 80059e8:	d002      	beq.n	80059f0 <std+0x48>
 80059ea:	33d0      	adds	r3, #208	; 0xd0
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d105      	bne.n	80059fc <std+0x54>
 80059f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f8:	f000 b966 	b.w	8005cc8 <__retarget_lock_init_recursive>
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	08005b51 	.word	0x08005b51
 8005a04:	08005b73 	.word	0x08005b73
 8005a08:	08005bab 	.word	0x08005bab
 8005a0c:	08005bcf 	.word	0x08005bcf
 8005a10:	20000260 	.word	0x20000260

08005a14 <stdio_exit_handler>:
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <stdio_exit_handler+0xc>)
 8005a16:	4903      	ldr	r1, [pc, #12]	; (8005a24 <stdio_exit_handler+0x10>)
 8005a18:	4803      	ldr	r0, [pc, #12]	; (8005a28 <stdio_exit_handler+0x14>)
 8005a1a:	f000 b869 	b.w	8005af0 <_fwalk_sglue>
 8005a1e:	bf00      	nop
 8005a20:	20000058 	.word	0x20000058
 8005a24:	08006569 	.word	0x08006569
 8005a28:	20000064 	.word	0x20000064

08005a2c <cleanup_stdio>:
 8005a2c:	6841      	ldr	r1, [r0, #4]
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <cleanup_stdio+0x34>)
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4299      	cmp	r1, r3
 8005a34:	4604      	mov	r4, r0
 8005a36:	d001      	beq.n	8005a3c <cleanup_stdio+0x10>
 8005a38:	f000 fd96 	bl	8006568 <_fflush_r>
 8005a3c:	68a1      	ldr	r1, [r4, #8]
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <cleanup_stdio+0x38>)
 8005a40:	4299      	cmp	r1, r3
 8005a42:	d002      	beq.n	8005a4a <cleanup_stdio+0x1e>
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 fd8f 	bl	8006568 <_fflush_r>
 8005a4a:	68e1      	ldr	r1, [r4, #12]
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <cleanup_stdio+0x3c>)
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	d004      	beq.n	8005a5c <cleanup_stdio+0x30>
 8005a52:	4620      	mov	r0, r4
 8005a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a58:	f000 bd86 	b.w	8006568 <_fflush_r>
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000260 	.word	0x20000260
 8005a64:	200002c8 	.word	0x200002c8
 8005a68:	20000330 	.word	0x20000330

08005a6c <global_stdio_init.part.0>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <global_stdio_init.part.0+0x30>)
 8005a70:	4c0b      	ldr	r4, [pc, #44]	; (8005aa0 <global_stdio_init.part.0+0x34>)
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <global_stdio_init.part.0+0x38>)
 8005a74:	4620      	mov	r0, r4
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	2104      	movs	r1, #4
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7ff ff94 	bl	80059a8 <std>
 8005a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a84:	2201      	movs	r2, #1
 8005a86:	2109      	movs	r1, #9
 8005a88:	f7ff ff8e 	bl	80059a8 <std>
 8005a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a90:	2202      	movs	r2, #2
 8005a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a96:	2112      	movs	r1, #18
 8005a98:	f7ff bf86 	b.w	80059a8 <std>
 8005a9c:	20000398 	.word	0x20000398
 8005aa0:	20000260 	.word	0x20000260
 8005aa4:	08005a15 	.word	0x08005a15

08005aa8 <__sfp_lock_acquire>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__sfp_lock_acquire+0x8>)
 8005aaa:	f000 b90e 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005aae:	bf00      	nop
 8005ab0:	200003a1 	.word	0x200003a1

08005ab4 <__sfp_lock_release>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__sfp_lock_release+0x8>)
 8005ab6:	f000 b909 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005aba:	bf00      	nop
 8005abc:	200003a1 	.word	0x200003a1

08005ac0 <__sinit>:
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	f7ff fff0 	bl	8005aa8 <__sfp_lock_acquire>
 8005ac8:	6a23      	ldr	r3, [r4, #32]
 8005aca:	b11b      	cbz	r3, 8005ad4 <__sinit+0x14>
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f7ff bff0 	b.w	8005ab4 <__sfp_lock_release>
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <__sinit+0x28>)
 8005ad6:	6223      	str	r3, [r4, #32]
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <__sinit+0x2c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f5      	bne.n	8005acc <__sinit+0xc>
 8005ae0:	f7ff ffc4 	bl	8005a6c <global_stdio_init.part.0>
 8005ae4:	e7f2      	b.n	8005acc <__sinit+0xc>
 8005ae6:	bf00      	nop
 8005ae8:	08005a2d 	.word	0x08005a2d
 8005aec:	20000398 	.word	0x20000398

08005af0 <_fwalk_sglue>:
 8005af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af4:	4607      	mov	r7, r0
 8005af6:	4688      	mov	r8, r1
 8005af8:	4614      	mov	r4, r2
 8005afa:	2600      	movs	r6, #0
 8005afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b00:	f1b9 0901 	subs.w	r9, r9, #1
 8005b04:	d505      	bpl.n	8005b12 <_fwalk_sglue+0x22>
 8005b06:	6824      	ldr	r4, [r4, #0]
 8005b08:	2c00      	cmp	r4, #0
 8005b0a:	d1f7      	bne.n	8005afc <_fwalk_sglue+0xc>
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	89ab      	ldrh	r3, [r5, #12]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d907      	bls.n	8005b28 <_fwalk_sglue+0x38>
 8005b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	d003      	beq.n	8005b28 <_fwalk_sglue+0x38>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4638      	mov	r0, r7
 8005b24:	47c0      	blx	r8
 8005b26:	4306      	orrs	r6, r0
 8005b28:	3568      	adds	r5, #104	; 0x68
 8005b2a:	e7e9      	b.n	8005b00 <_fwalk_sglue+0x10>

08005b2c <iprintf>:
 8005b2c:	b40f      	push	{r0, r1, r2, r3}
 8005b2e:	b507      	push	{r0, r1, r2, lr}
 8005b30:	4906      	ldr	r1, [pc, #24]	; (8005b4c <iprintf+0x20>)
 8005b32:	ab04      	add	r3, sp, #16
 8005b34:	6808      	ldr	r0, [r1, #0]
 8005b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3a:	6881      	ldr	r1, [r0, #8]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	f000 f9e3 	bl	8005f08 <_vfiprintf_r>
 8005b42:	b003      	add	sp, #12
 8005b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b48:	b004      	add	sp, #16
 8005b4a:	4770      	bx	lr
 8005b4c:	200000b0 	.word	0x200000b0

08005b50 <__sread>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	f000 f868 	bl	8005c2c <_read_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	bfab      	itete	ge
 8005b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b62:	89a3      	ldrhlt	r3, [r4, #12]
 8005b64:	181b      	addge	r3, r3, r0
 8005b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b6a:	bfac      	ite	ge
 8005b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b6e:	81a3      	strhlt	r3, [r4, #12]
 8005b70:	bd10      	pop	{r4, pc}

08005b72 <__swrite>:
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	461f      	mov	r7, r3
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	05db      	lsls	r3, r3, #23
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4616      	mov	r6, r2
 8005b82:	d505      	bpl.n	8005b90 <__swrite+0x1e>
 8005b84:	2302      	movs	r3, #2
 8005b86:	2200      	movs	r2, #0
 8005b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8c:	f000 f83c 	bl	8005c08 <_lseek_r>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	4632      	mov	r2, r6
 8005b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	f000 b853 	b.w	8005c50 <_write_r>

08005baa <__sseek>:
 8005baa:	b510      	push	{r4, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 f829 	bl	8005c08 <_lseek_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	bf15      	itete	ne
 8005bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bc6:	81a3      	strheq	r3, [r4, #12]
 8005bc8:	bf18      	it	ne
 8005bca:	81a3      	strhne	r3, [r4, #12]
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <__sclose>:
 8005bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd2:	f000 b809 	b.w	8005be8 <_close_r>

08005bd6 <memset>:
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4402      	add	r2, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d100      	bne.n	8005be0 <memset+0xa>
 8005bde:	4770      	bx	lr
 8005be0:	f803 1b01 	strb.w	r1, [r3], #1
 8005be4:	e7f9      	b.n	8005bda <memset+0x4>
	...

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d05      	ldr	r5, [pc, #20]	; (8005c04 <_close_r+0x1c>)
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fc fbf3 	bl	80023de <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	2000039c 	.word	0x2000039c

08005c08 <_lseek_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	2200      	movs	r2, #0
 8005c12:	4d05      	ldr	r5, [pc, #20]	; (8005c28 <_lseek_r+0x20>)
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fc fc05 	bl	8002426 <_lseek>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_lseek_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_lseek_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	2000039c 	.word	0x2000039c

08005c2c <_read_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	2200      	movs	r2, #0
 8005c36:	4d05      	ldr	r5, [pc, #20]	; (8005c4c <_read_r+0x20>)
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fc fb96 	bl	800236c <_read>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_read_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_read_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	2000039c 	.word	0x2000039c

08005c50 <_write_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4d05      	ldr	r5, [pc, #20]	; (8005c70 <_write_r+0x20>)
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fc fba1 	bl	80023a6 <_write>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_write_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_write_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	2000039c 	.word	0x2000039c

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200000b0 	.word	0x200000b0

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	2600      	movs	r6, #0
 8005c84:	4d0c      	ldr	r5, [pc, #48]	; (8005cb8 <__libc_init_array+0x38>)
 8005c86:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	f000 fdca 	bl	8006828 <_init>
 8005c94:	2600      	movs	r6, #0
 8005c96:	4d0a      	ldr	r5, [pc, #40]	; (8005cc0 <__libc_init_array+0x40>)
 8005c98:	4c0a      	ldr	r4, [pc, #40]	; (8005cc4 <__libc_init_array+0x44>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	080069f0 	.word	0x080069f0
 8005cbc:	080069f0 	.word	0x080069f0
 8005cc0:	080069f0 	.word	0x080069f0
 8005cc4:	080069f4 	.word	0x080069f4

08005cc8 <__retarget_lock_init_recursive>:
 8005cc8:	4770      	bx	lr

08005cca <__retarget_lock_acquire_recursive>:
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_release_recursive>:
 8005ccc:	4770      	bx	lr
	...

08005cd0 <_free_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d040      	beq.n	8005d5a <_free_r+0x8a>
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f0c      	subs	r4, r1, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfb8      	it	lt
 8005ce2:	18e4      	addlt	r4, r4, r3
 8005ce4:	f000 f8dc 	bl	8005ea0 <__malloc_lock>
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <_free_r+0x8c>)
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	b933      	cbnz	r3, 8005cfc <_free_r+0x2c>
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	6014      	str	r4, [r2, #0]
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf8:	f000 b8d8 	b.w	8005eac <__malloc_unlock>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d908      	bls.n	8005d12 <_free_r+0x42>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf01      	itttt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	1809      	addeq	r1, r1, r0
 8005d0e:	6021      	streq	r1, [r4, #0]
 8005d10:	e7ed      	b.n	8005cee <_free_r+0x1e>
 8005d12:	461a      	mov	r2, r3
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b10b      	cbz	r3, 8005d1c <_free_r+0x4c>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d9fa      	bls.n	8005d12 <_free_r+0x42>
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	1850      	adds	r0, r2, r1
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d10b      	bne.n	8005d3c <_free_r+0x6c>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	4401      	add	r1, r0
 8005d28:	1850      	adds	r0, r2, r1
 8005d2a:	4283      	cmp	r3, r0
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	d1e0      	bne.n	8005cf2 <_free_r+0x22>
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4408      	add	r0, r1
 8005d36:	6010      	str	r0, [r2, #0]
 8005d38:	6053      	str	r3, [r2, #4]
 8005d3a:	e7da      	b.n	8005cf2 <_free_r+0x22>
 8005d3c:	d902      	bls.n	8005d44 <_free_r+0x74>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	e7d6      	b.n	8005cf2 <_free_r+0x22>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	1821      	adds	r1, r4, r0
 8005d48:	428b      	cmp	r3, r1
 8005d4a:	bf01      	itttt	eq
 8005d4c:	6819      	ldreq	r1, [r3, #0]
 8005d4e:	685b      	ldreq	r3, [r3, #4]
 8005d50:	1809      	addeq	r1, r1, r0
 8005d52:	6021      	streq	r1, [r4, #0]
 8005d54:	6063      	str	r3, [r4, #4]
 8005d56:	6054      	str	r4, [r2, #4]
 8005d58:	e7cb      	b.n	8005cf2 <_free_r+0x22>
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	200003a4 	.word	0x200003a4

08005d60 <sbrk_aligned>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4e0e      	ldr	r6, [pc, #56]	; (8005d9c <sbrk_aligned+0x3c>)
 8005d64:	460c      	mov	r4, r1
 8005d66:	6831      	ldr	r1, [r6, #0]
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b911      	cbnz	r1, 8005d72 <sbrk_aligned+0x12>
 8005d6c:	f000 fcba 	bl	80066e4 <_sbrk_r>
 8005d70:	6030      	str	r0, [r6, #0]
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fcb5 	bl	80066e4 <_sbrk_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d00a      	beq.n	8005d94 <sbrk_aligned+0x34>
 8005d7e:	1cc4      	adds	r4, r0, #3
 8005d80:	f024 0403 	bic.w	r4, r4, #3
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d007      	beq.n	8005d98 <sbrk_aligned+0x38>
 8005d88:	1a21      	subs	r1, r4, r0
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 fcaa 	bl	80066e4 <_sbrk_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d101      	bne.n	8005d98 <sbrk_aligned+0x38>
 8005d94:	f04f 34ff 	mov.w	r4, #4294967295
 8005d98:	4620      	mov	r0, r4
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	200003a8 	.word	0x200003a8

08005da0 <_malloc_r>:
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	1ccd      	adds	r5, r1, #3
 8005da6:	f025 0503 	bic.w	r5, r5, #3
 8005daa:	3508      	adds	r5, #8
 8005dac:	2d0c      	cmp	r5, #12
 8005dae:	bf38      	it	cc
 8005db0:	250c      	movcc	r5, #12
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	4607      	mov	r7, r0
 8005db6:	db01      	blt.n	8005dbc <_malloc_r+0x1c>
 8005db8:	42a9      	cmp	r1, r5
 8005dba:	d905      	bls.n	8005dc8 <_malloc_r+0x28>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e9c <_malloc_r+0xfc>
 8005dcc:	f000 f868 	bl	8005ea0 <__malloc_lock>
 8005dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd4:	461c      	mov	r4, r3
 8005dd6:	bb5c      	cbnz	r4, 8005e30 <_malloc_r+0x90>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f7ff ffc0 	bl	8005d60 <sbrk_aligned>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	4604      	mov	r4, r0
 8005de4:	d155      	bne.n	8005e92 <_malloc_r+0xf2>
 8005de6:	f8d8 4000 	ldr.w	r4, [r8]
 8005dea:	4626      	mov	r6, r4
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	d145      	bne.n	8005e7c <_malloc_r+0xdc>
 8005df0:	2c00      	cmp	r4, #0
 8005df2:	d048      	beq.n	8005e86 <_malloc_r+0xe6>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	4631      	mov	r1, r6
 8005df8:	4638      	mov	r0, r7
 8005dfa:	eb04 0903 	add.w	r9, r4, r3
 8005dfe:	f000 fc71 	bl	80066e4 <_sbrk_r>
 8005e02:	4581      	cmp	r9, r0
 8005e04:	d13f      	bne.n	8005e86 <_malloc_r+0xe6>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	1a6d      	subs	r5, r5, r1
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7ff ffa7 	bl	8005d60 <sbrk_aligned>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d037      	beq.n	8005e86 <_malloc_r+0xe6>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	442b      	add	r3, r5
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d038      	beq.n	8005e96 <_malloc_r+0xf6>
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	42a2      	cmp	r2, r4
 8005e28:	d12b      	bne.n	8005e82 <_malloc_r+0xe2>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e00f      	b.n	8005e50 <_malloc_r+0xb0>
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	1b52      	subs	r2, r2, r5
 8005e34:	d41f      	bmi.n	8005e76 <_malloc_r+0xd6>
 8005e36:	2a0b      	cmp	r2, #11
 8005e38:	d917      	bls.n	8005e6a <_malloc_r+0xca>
 8005e3a:	1961      	adds	r1, r4, r5
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	6025      	str	r5, [r4, #0]
 8005e40:	bf18      	it	ne
 8005e42:	6059      	strne	r1, [r3, #4]
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	bf08      	it	eq
 8005e48:	f8c8 1000 	streq.w	r1, [r8]
 8005e4c:	5162      	str	r2, [r4, r5]
 8005e4e:	604b      	str	r3, [r1, #4]
 8005e50:	4638      	mov	r0, r7
 8005e52:	f104 060b 	add.w	r6, r4, #11
 8005e56:	f000 f829 	bl	8005eac <__malloc_unlock>
 8005e5a:	f026 0607 	bic.w	r6, r6, #7
 8005e5e:	1d23      	adds	r3, r4, #4
 8005e60:	1af2      	subs	r2, r6, r3
 8005e62:	d0ae      	beq.n	8005dc2 <_malloc_r+0x22>
 8005e64:	1b9b      	subs	r3, r3, r6
 8005e66:	50a3      	str	r3, [r4, r2]
 8005e68:	e7ab      	b.n	8005dc2 <_malloc_r+0x22>
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	d1dd      	bne.n	8005e2c <_malloc_r+0x8c>
 8005e70:	f8c8 2000 	str.w	r2, [r8]
 8005e74:	e7ec      	b.n	8005e50 <_malloc_r+0xb0>
 8005e76:	4623      	mov	r3, r4
 8005e78:	6864      	ldr	r4, [r4, #4]
 8005e7a:	e7ac      	b.n	8005dd6 <_malloc_r+0x36>
 8005e7c:	4634      	mov	r4, r6
 8005e7e:	6876      	ldr	r6, [r6, #4]
 8005e80:	e7b4      	b.n	8005dec <_malloc_r+0x4c>
 8005e82:	4613      	mov	r3, r2
 8005e84:	e7cc      	b.n	8005e20 <_malloc_r+0x80>
 8005e86:	230c      	movs	r3, #12
 8005e88:	4638      	mov	r0, r7
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f000 f80e 	bl	8005eac <__malloc_unlock>
 8005e90:	e797      	b.n	8005dc2 <_malloc_r+0x22>
 8005e92:	6025      	str	r5, [r4, #0]
 8005e94:	e7dc      	b.n	8005e50 <_malloc_r+0xb0>
 8005e96:	605b      	str	r3, [r3, #4]
 8005e98:	deff      	udf	#255	; 0xff
 8005e9a:	bf00      	nop
 8005e9c:	200003a4 	.word	0x200003a4

08005ea0 <__malloc_lock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__malloc_lock+0x8>)
 8005ea2:	f7ff bf12 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	200003a0 	.word	0x200003a0

08005eac <__malloc_unlock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__malloc_unlock+0x8>)
 8005eae:	f7ff bf0d 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	200003a0 	.word	0x200003a0

08005eb8 <__sfputc_r>:
 8005eb8:	6893      	ldr	r3, [r2, #8]
 8005eba:	b410      	push	{r4}
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	6093      	str	r3, [r2, #8]
 8005ec2:	da07      	bge.n	8005ed4 <__sfputc_r+0x1c>
 8005ec4:	6994      	ldr	r4, [r2, #24]
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	db01      	blt.n	8005ece <__sfputc_r+0x16>
 8005eca:	290a      	cmp	r1, #10
 8005ecc:	d102      	bne.n	8005ed4 <__sfputc_r+0x1c>
 8005ece:	bc10      	pop	{r4}
 8005ed0:	f000 bb72 	b.w	80065b8 <__swbuf_r>
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	1c58      	adds	r0, r3, #1
 8005ed8:	6010      	str	r0, [r2, #0]
 8005eda:	7019      	strb	r1, [r3, #0]
 8005edc:	4608      	mov	r0, r1
 8005ede:	bc10      	pop	{r4}
 8005ee0:	4770      	bx	lr

08005ee2 <__sfputs_r>:
 8005ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	18d5      	adds	r5, r2, r3
 8005eec:	42ac      	cmp	r4, r5
 8005eee:	d101      	bne.n	8005ef4 <__sfputs_r+0x12>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e007      	b.n	8005f04 <__sfputs_r+0x22>
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efc:	f7ff ffdc 	bl	8005eb8 <__sfputc_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d1f3      	bne.n	8005eec <__sfputs_r+0xa>
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f08 <_vfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	4614      	mov	r4, r2
 8005f10:	4698      	mov	r8, r3
 8005f12:	4606      	mov	r6, r0
 8005f14:	b09d      	sub	sp, #116	; 0x74
 8005f16:	b118      	cbz	r0, 8005f20 <_vfiprintf_r+0x18>
 8005f18:	6a03      	ldr	r3, [r0, #32]
 8005f1a:	b90b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x18>
 8005f1c:	f7ff fdd0 	bl	8005ac0 <__sinit>
 8005f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f22:	07d9      	lsls	r1, r3, #31
 8005f24:	d405      	bmi.n	8005f32 <_vfiprintf_r+0x2a>
 8005f26:	89ab      	ldrh	r3, [r5, #12]
 8005f28:	059a      	lsls	r2, r3, #22
 8005f2a:	d402      	bmi.n	8005f32 <_vfiprintf_r+0x2a>
 8005f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f2e:	f7ff fecc 	bl	8005cca <__retarget_lock_acquire_recursive>
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	071b      	lsls	r3, r3, #28
 8005f36:	d501      	bpl.n	8005f3c <_vfiprintf_r+0x34>
 8005f38:	692b      	ldr	r3, [r5, #16]
 8005f3a:	b99b      	cbnz	r3, 8005f64 <_vfiprintf_r+0x5c>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 fb78 	bl	8006634 <__swsetup_r>
 8005f44:	b170      	cbz	r0, 8005f64 <_vfiprintf_r+0x5c>
 8005f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f48:	07dc      	lsls	r4, r3, #31
 8005f4a:	d504      	bpl.n	8005f56 <_vfiprintf_r+0x4e>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	b01d      	add	sp, #116	; 0x74
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	0598      	lsls	r0, r3, #22
 8005f5a:	d4f7      	bmi.n	8005f4c <_vfiprintf_r+0x44>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f5e:	f7ff feb5 	bl	8005ccc <__retarget_lock_release_recursive>
 8005f62:	e7f3      	b.n	8005f4c <_vfiprintf_r+0x44>
 8005f64:	2300      	movs	r3, #0
 8005f66:	9309      	str	r3, [sp, #36]	; 0x24
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f6e:	2330      	movs	r3, #48	; 0x30
 8005f70:	f04f 0901 	mov.w	r9, #1
 8005f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006128 <_vfiprintf_r+0x220>
 8005f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f80:	4623      	mov	r3, r4
 8005f82:	469a      	mov	sl, r3
 8005f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f88:	b10a      	cbz	r2, 8005f8e <_vfiprintf_r+0x86>
 8005f8a:	2a25      	cmp	r2, #37	; 0x25
 8005f8c:	d1f9      	bne.n	8005f82 <_vfiprintf_r+0x7a>
 8005f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f92:	d00b      	beq.n	8005fac <_vfiprintf_r+0xa4>
 8005f94:	465b      	mov	r3, fp
 8005f96:	4622      	mov	r2, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff ffa1 	bl	8005ee2 <__sfputs_r>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	f000 80a9 	beq.w	80060f8 <_vfiprintf_r+0x1f0>
 8005fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa8:	445a      	add	r2, fp
 8005faa:	9209      	str	r2, [sp, #36]	; 0x24
 8005fac:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80a1 	beq.w	80060f8 <_vfiprintf_r+0x1f0>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc0:	f10a 0a01 	add.w	sl, sl, #1
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	9307      	str	r3, [sp, #28]
 8005fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8005fce:	4654      	mov	r4, sl
 8005fd0:	2205      	movs	r2, #5
 8005fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd6:	4854      	ldr	r0, [pc, #336]	; (8006128 <_vfiprintf_r+0x220>)
 8005fd8:	f000 fb94 	bl	8006704 <memchr>
 8005fdc:	9a04      	ldr	r2, [sp, #16]
 8005fde:	b9d8      	cbnz	r0, 8006018 <_vfiprintf_r+0x110>
 8005fe0:	06d1      	lsls	r1, r2, #27
 8005fe2:	bf44      	itt	mi
 8005fe4:	2320      	movmi	r3, #32
 8005fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fea:	0713      	lsls	r3, r2, #28
 8005fec:	bf44      	itt	mi
 8005fee:	232b      	movmi	r3, #43	; 0x2b
 8005ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffa:	d015      	beq.n	8006028 <_vfiprintf_r+0x120>
 8005ffc:	4654      	mov	r4, sl
 8005ffe:	2000      	movs	r0, #0
 8006000:	f04f 0c0a 	mov.w	ip, #10
 8006004:	9a07      	ldr	r2, [sp, #28]
 8006006:	4621      	mov	r1, r4
 8006008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800600c:	3b30      	subs	r3, #48	; 0x30
 800600e:	2b09      	cmp	r3, #9
 8006010:	d94d      	bls.n	80060ae <_vfiprintf_r+0x1a6>
 8006012:	b1b0      	cbz	r0, 8006042 <_vfiprintf_r+0x13a>
 8006014:	9207      	str	r2, [sp, #28]
 8006016:	e014      	b.n	8006042 <_vfiprintf_r+0x13a>
 8006018:	eba0 0308 	sub.w	r3, r0, r8
 800601c:	fa09 f303 	lsl.w	r3, r9, r3
 8006020:	4313      	orrs	r3, r2
 8006022:	46a2      	mov	sl, r4
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	e7d2      	b.n	8005fce <_vfiprintf_r+0xc6>
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	1d19      	adds	r1, r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	9103      	str	r1, [sp, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfbb      	ittet	lt
 8006034:	425b      	neglt	r3, r3
 8006036:	f042 0202 	orrlt.w	r2, r2, #2
 800603a:	9307      	strge	r3, [sp, #28]
 800603c:	9307      	strlt	r3, [sp, #28]
 800603e:	bfb8      	it	lt
 8006040:	9204      	strlt	r2, [sp, #16]
 8006042:	7823      	ldrb	r3, [r4, #0]
 8006044:	2b2e      	cmp	r3, #46	; 0x2e
 8006046:	d10c      	bne.n	8006062 <_vfiprintf_r+0x15a>
 8006048:	7863      	ldrb	r3, [r4, #1]
 800604a:	2b2a      	cmp	r3, #42	; 0x2a
 800604c:	d134      	bne.n	80060b8 <_vfiprintf_r+0x1b0>
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	3402      	adds	r4, #2
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	9203      	str	r2, [sp, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	bfb8      	it	lt
 800605c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006060:	9305      	str	r3, [sp, #20]
 8006062:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800612c <_vfiprintf_r+0x224>
 8006066:	2203      	movs	r2, #3
 8006068:	4650      	mov	r0, sl
 800606a:	7821      	ldrb	r1, [r4, #0]
 800606c:	f000 fb4a 	bl	8006704 <memchr>
 8006070:	b138      	cbz	r0, 8006082 <_vfiprintf_r+0x17a>
 8006072:	2240      	movs	r2, #64	; 0x40
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	eba0 000a 	sub.w	r0, r0, sl
 800607a:	4082      	lsls	r2, r0
 800607c:	4313      	orrs	r3, r2
 800607e:	3401      	adds	r4, #1
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006086:	2206      	movs	r2, #6
 8006088:	4829      	ldr	r0, [pc, #164]	; (8006130 <_vfiprintf_r+0x228>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800608e:	f000 fb39 	bl	8006704 <memchr>
 8006092:	2800      	cmp	r0, #0
 8006094:	d03f      	beq.n	8006116 <_vfiprintf_r+0x20e>
 8006096:	4b27      	ldr	r3, [pc, #156]	; (8006134 <_vfiprintf_r+0x22c>)
 8006098:	bb1b      	cbnz	r3, 80060e2 <_vfiprintf_r+0x1da>
 800609a:	9b03      	ldr	r3, [sp, #12]
 800609c:	3307      	adds	r3, #7
 800609e:	f023 0307 	bic.w	r3, r3, #7
 80060a2:	3308      	adds	r3, #8
 80060a4:	9303      	str	r3, [sp, #12]
 80060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a8:	443b      	add	r3, r7
 80060aa:	9309      	str	r3, [sp, #36]	; 0x24
 80060ac:	e768      	b.n	8005f80 <_vfiprintf_r+0x78>
 80060ae:	460c      	mov	r4, r1
 80060b0:	2001      	movs	r0, #1
 80060b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b6:	e7a6      	b.n	8006006 <_vfiprintf_r+0xfe>
 80060b8:	2300      	movs	r3, #0
 80060ba:	f04f 0c0a 	mov.w	ip, #10
 80060be:	4619      	mov	r1, r3
 80060c0:	3401      	adds	r4, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	4620      	mov	r0, r4
 80060c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ca:	3a30      	subs	r2, #48	; 0x30
 80060cc:	2a09      	cmp	r2, #9
 80060ce:	d903      	bls.n	80060d8 <_vfiprintf_r+0x1d0>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0c6      	beq.n	8006062 <_vfiprintf_r+0x15a>
 80060d4:	9105      	str	r1, [sp, #20]
 80060d6:	e7c4      	b.n	8006062 <_vfiprintf_r+0x15a>
 80060d8:	4604      	mov	r4, r0
 80060da:	2301      	movs	r3, #1
 80060dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e0:	e7f0      	b.n	80060c4 <_vfiprintf_r+0x1bc>
 80060e2:	ab03      	add	r3, sp, #12
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	462a      	mov	r2, r5
 80060e8:	4630      	mov	r0, r6
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <_vfiprintf_r+0x230>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	f3af 8000 	nop.w
 80060f2:	4607      	mov	r7, r0
 80060f4:	1c78      	adds	r0, r7, #1
 80060f6:	d1d6      	bne.n	80060a6 <_vfiprintf_r+0x19e>
 80060f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060fa:	07d9      	lsls	r1, r3, #31
 80060fc:	d405      	bmi.n	800610a <_vfiprintf_r+0x202>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	059a      	lsls	r2, r3, #22
 8006102:	d402      	bmi.n	800610a <_vfiprintf_r+0x202>
 8006104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006106:	f7ff fde1 	bl	8005ccc <__retarget_lock_release_recursive>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	065b      	lsls	r3, r3, #25
 800610e:	f53f af1d 	bmi.w	8005f4c <_vfiprintf_r+0x44>
 8006112:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006114:	e71c      	b.n	8005f50 <_vfiprintf_r+0x48>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4630      	mov	r0, r6
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <_vfiprintf_r+0x230>)
 8006120:	a904      	add	r1, sp, #16
 8006122:	f000 f87d 	bl	8006220 <_printf_i>
 8006126:	e7e4      	b.n	80060f2 <_vfiprintf_r+0x1ea>
 8006128:	080069bb 	.word	0x080069bb
 800612c:	080069c1 	.word	0x080069c1
 8006130:	080069c5 	.word	0x080069c5
 8006134:	00000000 	.word	0x00000000
 8006138:	08005ee3 	.word	0x08005ee3

0800613c <_printf_common>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	4616      	mov	r6, r2
 8006142:	4699      	mov	r9, r3
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4607      	mov	r7, r0
 800614a:	4293      	cmp	r3, r2
 800614c:	bfb8      	it	lt
 800614e:	4613      	movlt	r3, r2
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006156:	460c      	mov	r4, r1
 8006158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800615c:	b10a      	cbz	r2, 8006162 <_printf_common+0x26>
 800615e:	3301      	adds	r3, #1
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	0699      	lsls	r1, r3, #26
 8006166:	bf42      	ittt	mi
 8006168:	6833      	ldrmi	r3, [r6, #0]
 800616a:	3302      	addmi	r3, #2
 800616c:	6033      	strmi	r3, [r6, #0]
 800616e:	6825      	ldr	r5, [r4, #0]
 8006170:	f015 0506 	ands.w	r5, r5, #6
 8006174:	d106      	bne.n	8006184 <_printf_common+0x48>
 8006176:	f104 0a19 	add.w	sl, r4, #25
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	6832      	ldr	r2, [r6, #0]
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ab      	cmp	r3, r5
 8006182:	dc2b      	bgt.n	80061dc <_printf_common+0xa0>
 8006184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006188:	1e13      	subs	r3, r2, #0
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	bf18      	it	ne
 800618e:	2301      	movne	r3, #1
 8006190:	0692      	lsls	r2, r2, #26
 8006192:	d430      	bmi.n	80061f6 <_printf_common+0xba>
 8006194:	4649      	mov	r1, r9
 8006196:	4638      	mov	r0, r7
 8006198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800619c:	47c0      	blx	r8
 800619e:	3001      	adds	r0, #1
 80061a0:	d023      	beq.n	80061ea <_printf_common+0xae>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	f003 0306 	and.w	r3, r3, #6
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	bf14      	ite	ne
 80061ae:	2500      	movne	r5, #0
 80061b0:	6833      	ldreq	r3, [r6, #0]
 80061b2:	f04f 0600 	mov.w	r6, #0
 80061b6:	bf08      	it	eq
 80061b8:	68e5      	ldreq	r5, [r4, #12]
 80061ba:	f104 041a 	add.w	r4, r4, #26
 80061be:	bf08      	it	eq
 80061c0:	1aed      	subeq	r5, r5, r3
 80061c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061c6:	bf08      	it	eq
 80061c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bfc4      	itt	gt
 80061d0:	1a9b      	subgt	r3, r3, r2
 80061d2:	18ed      	addgt	r5, r5, r3
 80061d4:	42b5      	cmp	r5, r6
 80061d6:	d11a      	bne.n	800620e <_printf_common+0xd2>
 80061d8:	2000      	movs	r0, #0
 80061da:	e008      	b.n	80061ee <_printf_common+0xb2>
 80061dc:	2301      	movs	r3, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	4649      	mov	r1, r9
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c0      	blx	r8
 80061e6:	3001      	adds	r0, #1
 80061e8:	d103      	bne.n	80061f2 <_printf_common+0xb6>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	3501      	adds	r5, #1
 80061f4:	e7c1      	b.n	800617a <_printf_common+0x3e>
 80061f6:	2030      	movs	r0, #48	; 0x30
 80061f8:	18e1      	adds	r1, r4, r3
 80061fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006204:	4422      	add	r2, r4
 8006206:	3302      	adds	r3, #2
 8006208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800620c:	e7c2      	b.n	8006194 <_printf_common+0x58>
 800620e:	2301      	movs	r3, #1
 8006210:	4622      	mov	r2, r4
 8006212:	4649      	mov	r1, r9
 8006214:	4638      	mov	r0, r7
 8006216:	47c0      	blx	r8
 8006218:	3001      	adds	r0, #1
 800621a:	d0e6      	beq.n	80061ea <_printf_common+0xae>
 800621c:	3601      	adds	r6, #1
 800621e:	e7d9      	b.n	80061d4 <_printf_common+0x98>

08006220 <_printf_i>:
 8006220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	7e0f      	ldrb	r7, [r1, #24]
 8006226:	4691      	mov	r9, r2
 8006228:	2f78      	cmp	r7, #120	; 0x78
 800622a:	4680      	mov	r8, r0
 800622c:	460c      	mov	r4, r1
 800622e:	469a      	mov	sl, r3
 8006230:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006236:	d807      	bhi.n	8006248 <_printf_i+0x28>
 8006238:	2f62      	cmp	r7, #98	; 0x62
 800623a:	d80a      	bhi.n	8006252 <_printf_i+0x32>
 800623c:	2f00      	cmp	r7, #0
 800623e:	f000 80d5 	beq.w	80063ec <_printf_i+0x1cc>
 8006242:	2f58      	cmp	r7, #88	; 0x58
 8006244:	f000 80c1 	beq.w	80063ca <_printf_i+0x1aa>
 8006248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800624c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006250:	e03a      	b.n	80062c8 <_printf_i+0xa8>
 8006252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006256:	2b15      	cmp	r3, #21
 8006258:	d8f6      	bhi.n	8006248 <_printf_i+0x28>
 800625a:	a101      	add	r1, pc, #4	; (adr r1, 8006260 <_printf_i+0x40>)
 800625c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006260:	080062b9 	.word	0x080062b9
 8006264:	080062cd 	.word	0x080062cd
 8006268:	08006249 	.word	0x08006249
 800626c:	08006249 	.word	0x08006249
 8006270:	08006249 	.word	0x08006249
 8006274:	08006249 	.word	0x08006249
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006249 	.word	0x08006249
 8006280:	08006249 	.word	0x08006249
 8006284:	08006249 	.word	0x08006249
 8006288:	08006249 	.word	0x08006249
 800628c:	080063d3 	.word	0x080063d3
 8006290:	080062f9 	.word	0x080062f9
 8006294:	0800638d 	.word	0x0800638d
 8006298:	08006249 	.word	0x08006249
 800629c:	08006249 	.word	0x08006249
 80062a0:	080063f5 	.word	0x080063f5
 80062a4:	08006249 	.word	0x08006249
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	08006249 	.word	0x08006249
 80062b0:	08006249 	.word	0x08006249
 80062b4:	08006395 	.word	0x08006395
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	602a      	str	r2, [r5, #0]
 80062c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0a0      	b.n	800640e <_printf_i+0x1ee>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	0607      	lsls	r7, r0, #24
 80062d2:	f103 0104 	add.w	r1, r3, #4
 80062d6:	6029      	str	r1, [r5, #0]
 80062d8:	d501      	bpl.n	80062de <_printf_i+0xbe>
 80062da:	681e      	ldr	r6, [r3, #0]
 80062dc:	e003      	b.n	80062e6 <_printf_i+0xc6>
 80062de:	0646      	lsls	r6, r0, #25
 80062e0:	d5fb      	bpl.n	80062da <_printf_i+0xba>
 80062e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	da03      	bge.n	80062f2 <_printf_i+0xd2>
 80062ea:	232d      	movs	r3, #45	; 0x2d
 80062ec:	4276      	negs	r6, r6
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f2:	230a      	movs	r3, #10
 80062f4:	4859      	ldr	r0, [pc, #356]	; (800645c <_printf_i+0x23c>)
 80062f6:	e012      	b.n	800631e <_printf_i+0xfe>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6029      	str	r1, [r5, #0]
 8006300:	0605      	lsls	r5, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xe8>
 8006304:	681e      	ldr	r6, [r3, #0]
 8006306:	e002      	b.n	800630e <_printf_i+0xee>
 8006308:	0641      	lsls	r1, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xe4>
 800630c:	881e      	ldrh	r6, [r3, #0]
 800630e:	2f6f      	cmp	r7, #111	; 0x6f
 8006310:	bf0c      	ite	eq
 8006312:	2308      	moveq	r3, #8
 8006314:	230a      	movne	r3, #10
 8006316:	4851      	ldr	r0, [pc, #324]	; (800645c <_printf_i+0x23c>)
 8006318:	2100      	movs	r1, #0
 800631a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800631e:	6865      	ldr	r5, [r4, #4]
 8006320:	2d00      	cmp	r5, #0
 8006322:	bfa8      	it	ge
 8006324:	6821      	ldrge	r1, [r4, #0]
 8006326:	60a5      	str	r5, [r4, #8]
 8006328:	bfa4      	itt	ge
 800632a:	f021 0104 	bicge.w	r1, r1, #4
 800632e:	6021      	strge	r1, [r4, #0]
 8006330:	b90e      	cbnz	r6, 8006336 <_printf_i+0x116>
 8006332:	2d00      	cmp	r5, #0
 8006334:	d04b      	beq.n	80063ce <_printf_i+0x1ae>
 8006336:	4615      	mov	r5, r2
 8006338:	fbb6 f1f3 	udiv	r1, r6, r3
 800633c:	fb03 6711 	mls	r7, r3, r1, r6
 8006340:	5dc7      	ldrb	r7, [r0, r7]
 8006342:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006346:	4637      	mov	r7, r6
 8006348:	42bb      	cmp	r3, r7
 800634a:	460e      	mov	r6, r1
 800634c:	d9f4      	bls.n	8006338 <_printf_i+0x118>
 800634e:	2b08      	cmp	r3, #8
 8006350:	d10b      	bne.n	800636a <_printf_i+0x14a>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	07de      	lsls	r6, r3, #31
 8006356:	d508      	bpl.n	800636a <_printf_i+0x14a>
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	6861      	ldr	r1, [r4, #4]
 800635c:	4299      	cmp	r1, r3
 800635e:	bfde      	ittt	le
 8006360:	2330      	movle	r3, #48	; 0x30
 8006362:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006366:	f105 35ff 	addle.w	r5, r5, #4294967295
 800636a:	1b52      	subs	r2, r2, r5
 800636c:	6122      	str	r2, [r4, #16]
 800636e:	464b      	mov	r3, r9
 8006370:	4621      	mov	r1, r4
 8006372:	4640      	mov	r0, r8
 8006374:	f8cd a000 	str.w	sl, [sp]
 8006378:	aa03      	add	r2, sp, #12
 800637a:	f7ff fedf 	bl	800613c <_printf_common>
 800637e:	3001      	adds	r0, #1
 8006380:	d14a      	bne.n	8006418 <_printf_i+0x1f8>
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	b004      	add	sp, #16
 8006388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	f043 0320 	orr.w	r3, r3, #32
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	2778      	movs	r7, #120	; 0x78
 8006396:	4832      	ldr	r0, [pc, #200]	; (8006460 <_printf_i+0x240>)
 8006398:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	6829      	ldr	r1, [r5, #0]
 80063a0:	061f      	lsls	r7, r3, #24
 80063a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80063a6:	d402      	bmi.n	80063ae <_printf_i+0x18e>
 80063a8:	065f      	lsls	r7, r3, #25
 80063aa:	bf48      	it	mi
 80063ac:	b2b6      	uxthmi	r6, r6
 80063ae:	07df      	lsls	r7, r3, #31
 80063b0:	bf48      	it	mi
 80063b2:	f043 0320 	orrmi.w	r3, r3, #32
 80063b6:	6029      	str	r1, [r5, #0]
 80063b8:	bf48      	it	mi
 80063ba:	6023      	strmi	r3, [r4, #0]
 80063bc:	b91e      	cbnz	r6, 80063c6 <_printf_i+0x1a6>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f023 0320 	bic.w	r3, r3, #32
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7a6      	b.n	8006318 <_printf_i+0xf8>
 80063ca:	4824      	ldr	r0, [pc, #144]	; (800645c <_printf_i+0x23c>)
 80063cc:	e7e4      	b.n	8006398 <_printf_i+0x178>
 80063ce:	4615      	mov	r5, r2
 80063d0:	e7bd      	b.n	800634e <_printf_i+0x12e>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	6826      	ldr	r6, [r4, #0]
 80063d6:	1d18      	adds	r0, r3, #4
 80063d8:	6961      	ldr	r1, [r4, #20]
 80063da:	6028      	str	r0, [r5, #0]
 80063dc:	0635      	lsls	r5, r6, #24
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	d501      	bpl.n	80063e6 <_printf_i+0x1c6>
 80063e2:	6019      	str	r1, [r3, #0]
 80063e4:	e002      	b.n	80063ec <_printf_i+0x1cc>
 80063e6:	0670      	lsls	r0, r6, #25
 80063e8:	d5fb      	bpl.n	80063e2 <_printf_i+0x1c2>
 80063ea:	8019      	strh	r1, [r3, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	4615      	mov	r5, r2
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	e7bc      	b.n	800636e <_printf_i+0x14e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	2100      	movs	r1, #0
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f97f 	bl	8006704 <memchr>
 8006406:	b108      	cbz	r0, 800640c <_printf_i+0x1ec>
 8006408:	1b40      	subs	r0, r0, r5
 800640a:	6060      	str	r0, [r4, #4]
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2300      	movs	r3, #0
 8006412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006416:	e7aa      	b.n	800636e <_printf_i+0x14e>
 8006418:	462a      	mov	r2, r5
 800641a:	4649      	mov	r1, r9
 800641c:	4640      	mov	r0, r8
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	47d0      	blx	sl
 8006422:	3001      	adds	r0, #1
 8006424:	d0ad      	beq.n	8006382 <_printf_i+0x162>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	079b      	lsls	r3, r3, #30
 800642a:	d413      	bmi.n	8006454 <_printf_i+0x234>
 800642c:	68e0      	ldr	r0, [r4, #12]
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	4298      	cmp	r0, r3
 8006432:	bfb8      	it	lt
 8006434:	4618      	movlt	r0, r3
 8006436:	e7a6      	b.n	8006386 <_printf_i+0x166>
 8006438:	2301      	movs	r3, #1
 800643a:	4632      	mov	r2, r6
 800643c:	4649      	mov	r1, r9
 800643e:	4640      	mov	r0, r8
 8006440:	47d0      	blx	sl
 8006442:	3001      	adds	r0, #1
 8006444:	d09d      	beq.n	8006382 <_printf_i+0x162>
 8006446:	3501      	adds	r5, #1
 8006448:	68e3      	ldr	r3, [r4, #12]
 800644a:	9903      	ldr	r1, [sp, #12]
 800644c:	1a5b      	subs	r3, r3, r1
 800644e:	42ab      	cmp	r3, r5
 8006450:	dcf2      	bgt.n	8006438 <_printf_i+0x218>
 8006452:	e7eb      	b.n	800642c <_printf_i+0x20c>
 8006454:	2500      	movs	r5, #0
 8006456:	f104 0619 	add.w	r6, r4, #25
 800645a:	e7f5      	b.n	8006448 <_printf_i+0x228>
 800645c:	080069cc 	.word	0x080069cc
 8006460:	080069dd 	.word	0x080069dd

08006464 <__sflush_r>:
 8006464:	898a      	ldrh	r2, [r1, #12]
 8006466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006468:	4605      	mov	r5, r0
 800646a:	0710      	lsls	r0, r2, #28
 800646c:	460c      	mov	r4, r1
 800646e:	d457      	bmi.n	8006520 <__sflush_r+0xbc>
 8006470:	684b      	ldr	r3, [r1, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dc04      	bgt.n	8006480 <__sflush_r+0x1c>
 8006476:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	dc01      	bgt.n	8006480 <__sflush_r+0x1c>
 800647c:	2000      	movs	r0, #0
 800647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006482:	2e00      	cmp	r6, #0
 8006484:	d0fa      	beq.n	800647c <__sflush_r+0x18>
 8006486:	2300      	movs	r3, #0
 8006488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800648c:	682f      	ldr	r7, [r5, #0]
 800648e:	6a21      	ldr	r1, [r4, #32]
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	d032      	beq.n	80064fa <__sflush_r+0x96>
 8006494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	075a      	lsls	r2, r3, #29
 800649a:	d505      	bpl.n	80064a8 <__sflush_r+0x44>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	1ac0      	subs	r0, r0, r3
 80064a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a2:	b10b      	cbz	r3, 80064a8 <__sflush_r+0x44>
 80064a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a6:	1ac0      	subs	r0, r0, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	4602      	mov	r2, r0
 80064ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ae:	4628      	mov	r0, r5
 80064b0:	6a21      	ldr	r1, [r4, #32]
 80064b2:	47b0      	blx	r6
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	d106      	bne.n	80064c8 <__sflush_r+0x64>
 80064ba:	6829      	ldr	r1, [r5, #0]
 80064bc:	291d      	cmp	r1, #29
 80064be:	d82b      	bhi.n	8006518 <__sflush_r+0xb4>
 80064c0:	4a28      	ldr	r2, [pc, #160]	; (8006564 <__sflush_r+0x100>)
 80064c2:	410a      	asrs	r2, r1
 80064c4:	07d6      	lsls	r6, r2, #31
 80064c6:	d427      	bmi.n	8006518 <__sflush_r+0xb4>
 80064c8:	2200      	movs	r2, #0
 80064ca:	6062      	str	r2, [r4, #4]
 80064cc:	6922      	ldr	r2, [r4, #16]
 80064ce:	04d9      	lsls	r1, r3, #19
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	d504      	bpl.n	80064de <__sflush_r+0x7a>
 80064d4:	1c42      	adds	r2, r0, #1
 80064d6:	d101      	bne.n	80064dc <__sflush_r+0x78>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b903      	cbnz	r3, 80064de <__sflush_r+0x7a>
 80064dc:	6560      	str	r0, [r4, #84]	; 0x54
 80064de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064e0:	602f      	str	r7, [r5, #0]
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d0ca      	beq.n	800647c <__sflush_r+0x18>
 80064e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ea:	4299      	cmp	r1, r3
 80064ec:	d002      	beq.n	80064f4 <__sflush_r+0x90>
 80064ee:	4628      	mov	r0, r5
 80064f0:	f7ff fbee 	bl	8005cd0 <_free_r>
 80064f4:	2000      	movs	r0, #0
 80064f6:	6360      	str	r0, [r4, #52]	; 0x34
 80064f8:	e7c1      	b.n	800647e <__sflush_r+0x1a>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b0      	blx	r6
 8006500:	1c41      	adds	r1, r0, #1
 8006502:	d1c8      	bne.n	8006496 <__sflush_r+0x32>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0c5      	beq.n	8006496 <__sflush_r+0x32>
 800650a:	2b1d      	cmp	r3, #29
 800650c:	d001      	beq.n	8006512 <__sflush_r+0xae>
 800650e:	2b16      	cmp	r3, #22
 8006510:	d101      	bne.n	8006516 <__sflush_r+0xb2>
 8006512:	602f      	str	r7, [r5, #0]
 8006514:	e7b2      	b.n	800647c <__sflush_r+0x18>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	e7ae      	b.n	800647e <__sflush_r+0x1a>
 8006520:	690f      	ldr	r7, [r1, #16]
 8006522:	2f00      	cmp	r7, #0
 8006524:	d0aa      	beq.n	800647c <__sflush_r+0x18>
 8006526:	0793      	lsls	r3, r2, #30
 8006528:	bf18      	it	ne
 800652a:	2300      	movne	r3, #0
 800652c:	680e      	ldr	r6, [r1, #0]
 800652e:	bf08      	it	eq
 8006530:	694b      	ldreq	r3, [r1, #20]
 8006532:	1bf6      	subs	r6, r6, r7
 8006534:	600f      	str	r7, [r1, #0]
 8006536:	608b      	str	r3, [r1, #8]
 8006538:	2e00      	cmp	r6, #0
 800653a:	dd9f      	ble.n	800647c <__sflush_r+0x18>
 800653c:	4633      	mov	r3, r6
 800653e:	463a      	mov	r2, r7
 8006540:	4628      	mov	r0, r5
 8006542:	6a21      	ldr	r1, [r4, #32]
 8006544:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006548:	47e0      	blx	ip
 800654a:	2800      	cmp	r0, #0
 800654c:	dc06      	bgt.n	800655c <__sflush_r+0xf8>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	e790      	b.n	800647e <__sflush_r+0x1a>
 800655c:	4407      	add	r7, r0
 800655e:	1a36      	subs	r6, r6, r0
 8006560:	e7ea      	b.n	8006538 <__sflush_r+0xd4>
 8006562:	bf00      	nop
 8006564:	dfbffffe 	.word	0xdfbffffe

08006568 <_fflush_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	690b      	ldr	r3, [r1, #16]
 800656c:	4605      	mov	r5, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b913      	cbnz	r3, 8006578 <_fflush_r+0x10>
 8006572:	2500      	movs	r5, #0
 8006574:	4628      	mov	r0, r5
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	b118      	cbz	r0, 8006582 <_fflush_r+0x1a>
 800657a:	6a03      	ldr	r3, [r0, #32]
 800657c:	b90b      	cbnz	r3, 8006582 <_fflush_r+0x1a>
 800657e:	f7ff fa9f 	bl	8005ac0 <__sinit>
 8006582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f3      	beq.n	8006572 <_fflush_r+0xa>
 800658a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800658c:	07d0      	lsls	r0, r2, #31
 800658e:	d404      	bmi.n	800659a <_fflush_r+0x32>
 8006590:	0599      	lsls	r1, r3, #22
 8006592:	d402      	bmi.n	800659a <_fflush_r+0x32>
 8006594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006596:	f7ff fb98 	bl	8005cca <__retarget_lock_acquire_recursive>
 800659a:	4628      	mov	r0, r5
 800659c:	4621      	mov	r1, r4
 800659e:	f7ff ff61 	bl	8006464 <__sflush_r>
 80065a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a4:	4605      	mov	r5, r0
 80065a6:	07da      	lsls	r2, r3, #31
 80065a8:	d4e4      	bmi.n	8006574 <_fflush_r+0xc>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	059b      	lsls	r3, r3, #22
 80065ae:	d4e1      	bmi.n	8006574 <_fflush_r+0xc>
 80065b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b2:	f7ff fb8b 	bl	8005ccc <__retarget_lock_release_recursive>
 80065b6:	e7dd      	b.n	8006574 <_fflush_r+0xc>

080065b8 <__swbuf_r>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	460e      	mov	r6, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	4605      	mov	r5, r0
 80065c0:	b118      	cbz	r0, 80065ca <__swbuf_r+0x12>
 80065c2:	6a03      	ldr	r3, [r0, #32]
 80065c4:	b90b      	cbnz	r3, 80065ca <__swbuf_r+0x12>
 80065c6:	f7ff fa7b 	bl	8005ac0 <__sinit>
 80065ca:	69a3      	ldr	r3, [r4, #24]
 80065cc:	60a3      	str	r3, [r4, #8]
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	071a      	lsls	r2, r3, #28
 80065d2:	d525      	bpl.n	8006620 <__swbuf_r+0x68>
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	b31b      	cbz	r3, 8006620 <__swbuf_r+0x68>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	6922      	ldr	r2, [r4, #16]
 80065dc:	b2f6      	uxtb	r6, r6
 80065de:	1a98      	subs	r0, r3, r2
 80065e0:	6963      	ldr	r3, [r4, #20]
 80065e2:	4637      	mov	r7, r6
 80065e4:	4283      	cmp	r3, r0
 80065e6:	dc04      	bgt.n	80065f2 <__swbuf_r+0x3a>
 80065e8:	4621      	mov	r1, r4
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7ff ffbc 	bl	8006568 <_fflush_r>
 80065f0:	b9e0      	cbnz	r0, 800662c <__swbuf_r+0x74>
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	701e      	strb	r6, [r3, #0]
 8006600:	6962      	ldr	r2, [r4, #20]
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	429a      	cmp	r2, r3
 8006606:	d004      	beq.n	8006612 <__swbuf_r+0x5a>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d506      	bpl.n	800661c <__swbuf_r+0x64>
 800660e:	2e0a      	cmp	r6, #10
 8006610:	d104      	bne.n	800661c <__swbuf_r+0x64>
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f7ff ffa7 	bl	8006568 <_fflush_r>
 800661a:	b938      	cbnz	r0, 800662c <__swbuf_r+0x74>
 800661c:	4638      	mov	r0, r7
 800661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f806 	bl	8006634 <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0d5      	beq.n	80065d8 <__swbuf_r+0x20>
 800662c:	f04f 37ff 	mov.w	r7, #4294967295
 8006630:	e7f4      	b.n	800661c <__swbuf_r+0x64>
	...

08006634 <__swsetup_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <__swsetup_r+0xac>)
 8006638:	4605      	mov	r5, r0
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	460c      	mov	r4, r1
 800663e:	b118      	cbz	r0, 8006648 <__swsetup_r+0x14>
 8006640:	6a03      	ldr	r3, [r0, #32]
 8006642:	b90b      	cbnz	r3, 8006648 <__swsetup_r+0x14>
 8006644:	f7ff fa3c 	bl	8005ac0 <__sinit>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800664e:	0718      	lsls	r0, r3, #28
 8006650:	d422      	bmi.n	8006698 <__swsetup_r+0x64>
 8006652:	06d9      	lsls	r1, r3, #27
 8006654:	d407      	bmi.n	8006666 <__swsetup_r+0x32>
 8006656:	2309      	movs	r3, #9
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800665e:	f04f 30ff 	mov.w	r0, #4294967295
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	e034      	b.n	80066d0 <__swsetup_r+0x9c>
 8006666:	0758      	lsls	r0, r3, #29
 8006668:	d512      	bpl.n	8006690 <__swsetup_r+0x5c>
 800666a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800666c:	b141      	cbz	r1, 8006680 <__swsetup_r+0x4c>
 800666e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006672:	4299      	cmp	r1, r3
 8006674:	d002      	beq.n	800667c <__swsetup_r+0x48>
 8006676:	4628      	mov	r0, r5
 8006678:	f7ff fb2a 	bl	8005cd0 <_free_r>
 800667c:	2300      	movs	r3, #0
 800667e:	6363      	str	r3, [r4, #52]	; 0x34
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	2300      	movs	r3, #0
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f043 0308 	orr.w	r3, r3, #8
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	b94b      	cbnz	r3, 80066b0 <__swsetup_r+0x7c>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a6:	d003      	beq.n	80066b0 <__swsetup_r+0x7c>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f85d 	bl	800676a <__smakebuf_r>
 80066b0:	89a0      	ldrh	r0, [r4, #12]
 80066b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b6:	f010 0301 	ands.w	r3, r0, #1
 80066ba:	d00a      	beq.n	80066d2 <__swsetup_r+0x9e>
 80066bc:	2300      	movs	r3, #0
 80066be:	60a3      	str	r3, [r4, #8]
 80066c0:	6963      	ldr	r3, [r4, #20]
 80066c2:	425b      	negs	r3, r3
 80066c4:	61a3      	str	r3, [r4, #24]
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	b943      	cbnz	r3, 80066dc <__swsetup_r+0xa8>
 80066ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ce:	d1c4      	bne.n	800665a <__swsetup_r+0x26>
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	0781      	lsls	r1, r0, #30
 80066d4:	bf58      	it	pl
 80066d6:	6963      	ldrpl	r3, [r4, #20]
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	e7f4      	b.n	80066c6 <__swsetup_r+0x92>
 80066dc:	2000      	movs	r0, #0
 80066de:	e7f7      	b.n	80066d0 <__swsetup_r+0x9c>
 80066e0:	200000b0 	.word	0x200000b0

080066e4 <_sbrk_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	2300      	movs	r3, #0
 80066e8:	4d05      	ldr	r5, [pc, #20]	; (8006700 <_sbrk_r+0x1c>)
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	f7fb fea6 	bl	8002440 <_sbrk>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_sbrk_r+0x1a>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_sbrk_r+0x1a>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	2000039c 	.word	0x2000039c

08006704 <memchr>:
 8006704:	4603      	mov	r3, r0
 8006706:	b510      	push	{r4, lr}
 8006708:	b2c9      	uxtb	r1, r1
 800670a:	4402      	add	r2, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	4618      	mov	r0, r3
 8006710:	d101      	bne.n	8006716 <memchr+0x12>
 8006712:	2000      	movs	r0, #0
 8006714:	e003      	b.n	800671e <memchr+0x1a>
 8006716:	7804      	ldrb	r4, [r0, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	428c      	cmp	r4, r1
 800671c:	d1f6      	bne.n	800670c <memchr+0x8>
 800671e:	bd10      	pop	{r4, pc}

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	4615      	mov	r5, r2
 800672a:	2900      	cmp	r1, #0
 800672c:	461e      	mov	r6, r3
 800672e:	b096      	sub	sp, #88	; 0x58
 8006730:	da0c      	bge.n	800674c <__swhatbuf_r+0x2c>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	2100      	movs	r1, #0
 8006736:	f013 0f80 	tst.w	r3, #128	; 0x80
 800673a:	bf0c      	ite	eq
 800673c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006740:	2340      	movne	r3, #64	; 0x40
 8006742:	2000      	movs	r0, #0
 8006744:	6031      	str	r1, [r6, #0]
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	b016      	add	sp, #88	; 0x58
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	466a      	mov	r2, sp
 800674e:	f000 f849 	bl	80067e4 <_fstat_r>
 8006752:	2800      	cmp	r0, #0
 8006754:	dbed      	blt.n	8006732 <__swhatbuf_r+0x12>
 8006756:	9901      	ldr	r1, [sp, #4]
 8006758:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800675c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006760:	4259      	negs	r1, r3
 8006762:	4159      	adcs	r1, r3
 8006764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006768:	e7eb      	b.n	8006742 <__swhatbuf_r+0x22>

0800676a <__smakebuf_r>:
 800676a:	898b      	ldrh	r3, [r1, #12]
 800676c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800676e:	079d      	lsls	r5, r3, #30
 8006770:	4606      	mov	r6, r0
 8006772:	460c      	mov	r4, r1
 8006774:	d507      	bpl.n	8006786 <__smakebuf_r+0x1c>
 8006776:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	2301      	movs	r3, #1
 8006780:	6163      	str	r3, [r4, #20]
 8006782:	b002      	add	sp, #8
 8006784:	bd70      	pop	{r4, r5, r6, pc}
 8006786:	466a      	mov	r2, sp
 8006788:	ab01      	add	r3, sp, #4
 800678a:	f7ff ffc9 	bl	8006720 <__swhatbuf_r>
 800678e:	9900      	ldr	r1, [sp, #0]
 8006790:	4605      	mov	r5, r0
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff fb04 	bl	8005da0 <_malloc_r>
 8006798:	b948      	cbnz	r0, 80067ae <__smakebuf_r+0x44>
 800679a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679e:	059a      	lsls	r2, r3, #22
 80067a0:	d4ef      	bmi.n	8006782 <__smakebuf_r+0x18>
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	f043 0302 	orr.w	r3, r3, #2
 80067aa:	81a3      	strh	r3, [r4, #12]
 80067ac:	e7e3      	b.n	8006776 <__smakebuf_r+0xc>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	6020      	str	r0, [r4, #0]
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	6120      	str	r0, [r4, #16]
 80067bc:	6163      	str	r3, [r4, #20]
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	b15b      	cbz	r3, 80067da <__smakebuf_r+0x70>
 80067c2:	4630      	mov	r0, r6
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	f000 f81e 	bl	8006808 <_isatty_r>
 80067cc:	b128      	cbz	r0, 80067da <__smakebuf_r+0x70>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	431d      	orrs	r5, r3
 80067de:	81a5      	strh	r5, [r4, #12]
 80067e0:	e7cf      	b.n	8006782 <__smakebuf_r+0x18>
	...

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	2300      	movs	r3, #0
 80067e8:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_fstat_r+0x20>)
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fb fdff 	bl	80023f4 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	2000039c 	.word	0x2000039c

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	2300      	movs	r3, #0
 800680c:	4d05      	ldr	r5, [pc, #20]	; (8006824 <_isatty_r+0x1c>)
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fb fdfd 	bl	8002412 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	2000039c 	.word	0x2000039c

08006828 <_init>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr

08006834 <_fini>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr
